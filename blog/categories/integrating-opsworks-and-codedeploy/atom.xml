<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Integrating Opsworks and Codedeploy | :HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2015-07-28T22:05:55+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part 3: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-25T11:43:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 3 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the CodeDeploy deployment, deploying it to the configured OpsWorks stack and demonstrating the results of the integration.
 <a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Setting bucket policy and uploading deployment package</h1>

<p>Now we&rsquo;re ready to deploy a package from CodeDeploy.</p>

<p>For the purposes of this example the package will contain two files:</p>

<p><figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appspec.yml
</span><span class='line'>app/index.php</span></code></pre></td></tr></table></div></figure></p>

<p>The <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AppSpec</a> specifies that the contents of the
 App directory should be copied to the location of the placeholder OpsWorks deployment.</p>

<p><figure class='code'><figcaption><span>appspec.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">os</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>     <span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/www/my_app/public</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>app/index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">CodeDeploy</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Zip this up and upload it to your S3 bucket where you&rsquo;ll store your deployment packages.</p>

<p>If you haven&rsquo;t already done so, you will also need to apply the S3 bucket policy provided <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-deploy-revision.html">here</a>
 to allow the CodeDeploy role access to objects in this bucket:</p>

<p><img src="/images/posts/opsworks_codedeploy/bucket_policy.png"></p>

<p>One important note is that you must also include the role ARN for your OpsWorks instances as above.</p>

<p>You can find the stack profile in the security settings of the layer:</p>

<p><img src="/images/posts/opsworks_codedeploy/instanceprofile.png"></p>

<p>Then get the role ARN from your IAM console:</p>

<p><img src="/images/posts/opsworks_codedeploy/iaminstanceprofile.png"></p>

<h1>Running CodeDeploy deployment</h1>

<p>We&rsquo;re now ready to deploy our application with CodeDeploy, head back to the CodeDeploy application you created earlier
 and create a new deployment from the zip you uploaded.</p>

<p><img src="/images/posts/opsworks_codedeploy/codedeploy_deployment.png"></p>

<p>Click &ldquo;Deploy Now&rdquo; and wait for the deployment to conclude.</p>

<p>Should your deployment fail, click &ldquo;View All Instances&rdquo; > &ldquo;View Events&rdquo; beside an instance and click &ldquo;View Logs&rdquo; beside the failed step.</p>

<h2>Viewing your application</h2>

<p>Your application should now successfully be deployed to your OpsWorks instances. If you view the application in your
 browser you should see your deployment.</p>

<p><img src="/images/posts/opsworks_codedeploy/complete.png"></p>

<h2>Caveats - Launching a new instance</h2>

<p>Unfortunately it seems CodeDeploy currently only supports automatic deployments for new instances when they&rsquo;re in
 an autoscaling group. OpsWorks only supports its own load and time based instance functionality rather than
 using autoscaling groups, and therefore you&rsquo;ll have to manually trigger a deployment after a new instance comes online
 and before you place it under your load-balancer. You may wish for your recipes to cause the load-balancer health
 check to fail by default, then have a separate recipe which enables the health check to pass which you can run manually
 once you&rsquo;ve run a deployment after a new instance has been launched.</p>

<p>Alternatively you could use your configure recipe to trigger a deployment automatically using the CodeDeploy API,
 however you would need to know which specific applications are relevant to the instance.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-24T11:43:29+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 2 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the OpsWorks Chef recipes to deploy your application via CodeDeploy.
 <a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Installing CodeDeploy agent via Chef</h1>

<p>Next we need to write a custom chef recipe to install the CodeDeploy agent and perform our desired configuration.</p>

<p>Checkout your cookbooks repository and create the following files:</p>

<p><figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Berksfile
</span><span class='line'>myrecipe/metadata.rb
</span><span class='line'>myrecipe/recipes/agent-install.rb
</span><span class='line'>myrecipe/recipes/vhost.rb
</span><span class='line'>myrecipe/templates/default/myapp_vhost.erb</span></code></pre></td></tr></table></div></figure></p>

<p>Populate these files with the following:</p>

<p><figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://supermarket.getchef.com&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//su</span><span class="n">permarket</span><span class="o">.</span><span class="n">getchef</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>(We won&rsquo;t be using <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/cookbooks-101-opsworks-berkshelf.html">Berkshelf</a>
 in this tutorial, however you&rsquo;ll probably want to create this file any way if you&rsquo;re planning to extend this tutorial
  with your own configuration)</p>

<p><figure class='code'><figcaption><span>myrecipe/metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">myrecipe</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">recipe</span>  <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">myrecipe</span><span class="o">::</span><span class="n">agent</span><span class="o">-</span><span class="n">install</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Fetches</span><span class="p">,</span> <span class="n">installs</span><span class="p">,</span> <span class="ow">and</span> <span class="n">starts</span> <span class="n">the</span> <span class="no">AWS</span> <span class="no">CodeDeploy</span> <span class="n">host</span> <span class="n">agent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is the code which downloads, installs and starts the CodeDeploy agent service:</p>

<p><figure class='code'><figcaption><span>myrecipe/recipes/agent-install.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Chef::Config[:file_cache_path]}/codedeploy-install.sh&amp;rdquo; do</span>
</span><span class='line'>    <span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/install&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//s</span><span class="mi">3</span><span class="o">.</span><span class="n">amazonaws</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">aws</span><span class="o">-</span><span class="n">codedeploy</span><span class="o">-</span><span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">install</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="sr">    mode &amp;ldquo;0744&amp;rdquo;</span>
</span><span class='line'><span class="sr">    owner &amp;ldquo;root&amp;rdquo;</span>
</span><span class='line'><span class="sr">    group &amp;ldquo;root&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">execute</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">install_codedeploy_agent</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Chef::Config[:file_cache_path]}/codedeploy-install.sh auto&amp;rdquo;</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;service &amp;ldquo;codedeploy-agent&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    action [:enable, :start]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This code creates a directory for the CodeDeploy to deploy to, creates the vhost and enables it.</p>

<p><figure class='code'><figcaption><span>myrecipe/recipes/vhost.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">my_app</span><span class="o">/</span><span class="kp">public</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">deploy</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;directory &amp;lsquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;template &amp;lsquo;myapp_vhost&amp;rsquo; do</span>
</span><span class='line'><span class="sr">    path  &amp;lsquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;link &amp;ldquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is a standard Apache vhost configuration based on the default OpsWorks template:
<figure class='code'><figcaption><span>myrecipe/templates/default/myapp_vhost.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> myapp.com
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/srv/www/my_app/public/</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">/srv/www/my_app/public/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.svn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.git&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">LogLevel</span> <span class="k">info</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/apache2/my_app-error.log</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-access.log</span> combined
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-ganglia.log</span> ganglia&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">FileETag</span> <span class="k">none</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/rewrite</span>*&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/local</span>*
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In this step you may also like to create additional recipes for other configuration tasks, such as installing dependencies
or configuring your HTTP server.</p>

<h1>Adding recipes and packages to layer via OpsWorks</h1>

<p>Once you&rsquo;ve committed and pushed your recipes, go to OpsWorks and add the agent recipe to the configure lifecycle event
of your application server layer. Also add <code>ruby2.0</code> and <code>awscli</code> to the OS packages.</p>

<p> <img src="/images/posts/opsworks_codedeploy/recipes.png"></p>

<h1>Creating placeholder deployment</h1>

<p>Because OpsWorks doesn&rsquo;t perform certain default configuration tasks (such as creating a www-data group) until
 a deployment occurs it&rsquo;s easiest to create a placeholder OpsWorks deployment with a holding page which will be replaced
 by CodeDeploy. You could of course skip this step and manually configure everything via custom recipes.</p>

<p>In this instance we&rsquo;ll create a new repository for the placeholder which contains nothing but an index.php file containing
 a placeholder message.</p>

<p><figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">undergoing</span> <span class="nx">maintenance</span><span class="p">,</span> <span class="nx">please</span> <span class="k">try</span> <span class="nx">reloading</span> <span class="nx">the</span> <span class="nx">page</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Create this deployment in OpsWorks:</p>

<p><img src="/images/posts/opsworks_codedeploy/opsworksdeploy.png"></p>

<h1>Starting an instance</h1>

<p>You can now start an instance in OpsWorks. It usually takes at least 20 minutes to boot and execute the setup and configure
 recipes. After this has complete your instance should have a status of online:</p>

<p><img src="/images/posts/opsworks_codedeploy/online.png"></p>

<p>You should also see the placeholder message when you visit the IP in a browser:</p>

<p><img src="/images/posts/opsworks_codedeploy/holding.png"></p>

<p>This should also have installed and started the CodeDeploy agent.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-23T11:09:28+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>Amazon <a href="http://aws.amazon.com/blogs/aws/code-management-and-deployment/">recently announced</a> a new deployment service
called <a href="http://aws.amazon.com/codedeploy/">CodeDeploy</a>. <a href="http://aws.amazon.com/opsworks/">OpsWorks</a> is another application
 management product which provides excellent configuration management via <a href="https://www.getchef.com/">Chef</a>, however it
lacks the advanced deployment functionality of CodeDeploy. It therefore makes sense to integrate these two products,
delegating the configuration management to OpsWorks and the deployment functionality to CodeDeploy.</p>

<p>This is part 1 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section provides an introduction to OpsWorks and CodeDeploy, and the basic configuration required to get started.</p>

<!-- more -->


<h2>Why not just use OpsWorks?</h2>

<p>OpsWorks is a great product, but it lacks several key deployment features such as the ability to run rolling
 deployments and cancel an in-flight deployment.</p>

<h2>Why not just use CodeDeploy?</h2>

<p>While CodeDeploy does support the execution of configuration scripts in lifecycle events, these could easily become
 difficult to maintain if your configuration is complex. Also, the configuration might not belong to any specific
 application, and if you&rsquo;re running multiple applications per instance it might make sense to configure certain
 shared services on a per-server basis rather than per-application. OpsWorks is an excellent solution to these issues
 as it supports Chef and per-instance setup and configuration lifecycle events.</p>

<h1>Getting started</h1>

<p>To get started you&rsquo;ll need to set up an OpsWorks stack with a custom cookbook repository. The stack also must be created
 in a region where CodeDeploy is supported, such as North Virginia. If you&rsquo;re using a VPC don&rsquo;t forget to configure your
  VPC to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">allow external connectivity</a>.</p>

<p>My stack configuration is as follows, as you can see I&rsquo;ll be using Ubuntu 14.04, but the steps should be similar on
 Amazon linux.</p>

<p><img src="/images/posts/opsworks_codedeploy/stack.png"></p>

<p>Also, create a layer for your application servers. For example I&rsquo;ve created a PHP App Server layer. Don&rsquo;t forget to
 enable &ldquo;Public IP addresses&rdquo; under the networking options.</p>

<p><img src="/images/posts/opsworks_codedeploy/layer.png"></p>

<p>In this example I&rsquo;m also going to deploy from S3, rather than GitHub. Therefore I&rsquo;ll assume you have an S3 bucket created
to host the zip deployment packages.</p>

<h1>Creating a CodeDeploy Service Role</h1>

<p>You&rsquo;ll need to create a service role for CodeDeploy before proceeding, although if you&rsquo;ve already followed the &ldquo;Sample
Deployment&rdquo; wizard then you will probably have created one at the following step:</p>

<p><img src="/images/posts/opsworks_codedeploy/policywizard.png"></p>

<p>If you need to create one manually then you can <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html">follow these steps</a>
 to first create a role with the following policy:</p>

<p><img src="/images/posts/opsworks_codedeploy/policy.png"></p>

<p>Then set the trust relationships:</p>

<p><img src="/images/posts/opsworks_codedeploy/trust.png"></p>

<h1>Creating CodeDeploy application</h1>

<p>Next go to the CodeDeploy console and create a new application using the &ldquo;Custom Deployment&rdquo; option.</p>

<p>In the application options you have to define which EC2 instance tags will be included in the deployment. Set the <code>
opsworks:stack</code> and <code>opsworks:layer:php-app</code> to the name of your stack and layer respectively.</p>

<p><img src="/images/posts/opsworks_codedeploy/codedeploy_app.png"></p>

<p>Select a Deployment Config (eg. <code>CodeDeployDefault.OneAtATime</code>), and set the Service Role ARN to the service
 role you created earlier.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cloudwatch | :HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/blog/categories/cloudwatch/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2015-07-28T21:52:08+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Analysing DynamoDB Index Usage in Hive Queries]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/05/30/analysing-dynamodb-index-usage-in-hive-queries/"/>
    <updated>2015-05-30T19:55:11+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/05/30/analysing-dynamodb-index-usage-in-hive-queries</id>
    <content type="html"><![CDATA[<p>Elastic Map Reduce allows you to conveniently <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/EMRforDynamoDB.html">run SQL-like queries against DynamoDB using Hive</a>.
This overcomes many of the limitations of the built-in DynamoDB query functionality and makes it significantly
more useful for storing raw analytical data.</p>

<p>While the abstraction provided by this handler is pretty good, it is still subject to the same underlying throughput
and indexing limitations faced when accessing data through the DynamoDB API directly. In particular, access efficiency
is extremely sensitive to the use of appropriate indexes - full table scans are both slow and expensive.</p>

<p>The documentation provides <a href="http://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/EMR_Hive_Optimizing.html">some guidance</a>
with regard to performance optimisation, however it does not go into how the handler maps a Hive query to
a DynamoDB scan or query, nor under what circumstances indexes will be used to avoid scanning the entire table.</p>

<p>In this blog post you&rsquo;ll find several Hive queries run against an example DynamoDB table, along with the resulting
DynamoDB request to observe which indexes are used.</p>

<!-- more -->


<h1>Setup</h1>

<h2>Example Table</h2>

<p>These queries were run against the following example table:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;+&mdash;&mdash;+
</span><span class='line'>| product | sequence_number | host | time |
</span><span class='line'>+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;+&mdash;&mdash;+</span></code></pre></td></tr></table></div></figure></p>

<p>The following index structure was used:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+
</span><span class='line'>| Primary Index          | product, sequence_number (range) |
</span><span class='line'>| Global Secondary Index | host, sequence_number (range)    |
</span><span class='line'>| Local Secondary Index  | time                             |
</span><span class='line'>+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+</span></code></pre></td></tr></table></div></figure></p>

<h2>Hive Table</h2>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">product_views</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">product</span> <span class="nb">bigint</span><span class="p">,</span>
</span><span class='line'>    <span class="n">sequence_number</span> <span class="n">string</span><span class="p">,</span>
</span><span class='line'>    <span class="k">host</span> <span class="n">string</span><span class="p">,</span>
</span><span class='line'>    <span class="n">time</span> <span class="nb">bigint</span>
</span><span class='line'><span class="p">)</span> <span class="n">STORED</span> <span class="k">BY</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">org</span><span class="p">.</span><span class="n">apache</span><span class="p">.</span><span class="n">hadoop</span><span class="p">.</span><span class="n">hive</span><span class="p">.</span><span class="n">dynamodb</span><span class="p">.</span><span class="n">DynamoDBStorageHandler</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dynamodb</span><span class="p">.</span><span class="n">endpoint</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="ss">&quot;http://dynamodb.us-east-1.amazonaws.com&quot;</span><span class="o">&gt;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">dynamodb</span><span class="p">.</span><span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span><span class="p">.</span><span class="n">amazonaws</span><span class="p">.</span><span class="n">com</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dynamodb</span><span class="p">.</span><span class="k">table</span><span class="p">.</span><span class="n">name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">web</span><span class="o">-</span><span class="n">analytics</span><span class="o">-</span><span class="n">raw</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dynamodb</span><span class="p">.</span><span class="k">column</span><span class="p">.</span><span class="n">mapping</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">sequence_number</span><span class="p">:</span><span class="n">sequence_number</span><span class="p">,</span>
</span><span class='line'>    <span class="k">host</span><span class="p">:</span><span class="k">host</span><span class="p">,</span><span class="n">product</span><span class="p">:</span><span class="n">product</span><span class="p">,</span><span class="n">time</span><span class="p">:</span><span class="n">time</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note that the endpoint has been made the http (as oppose to https) to make the requests easier to observe without
encryption.</p>

<h2>Observing HTTP requests with wireshark</h2>

<p>First, SSH into a core task node (it&rsquo;s easiest if you only run one) and run <code>sudo yum install tcpdump</code>, then from your
local machine:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkfifo /tmp/wireshark
</span><span class='line'><span class="nv">$ </span>ssh -i ~/.ssh/keypair.pem &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x68;&amp;#97;&amp;#x64;&amp;#x6f;&amp;#111;&amp;#x70;&amp;#64;&amp;#101;&amp;#x63;&amp;#50;&amp;#x2d;&amp;#x31;&amp;#x32;&amp;#51;&amp;#x2e;&amp;#x34;&amp;#53;&amp;#x36;&amp;#46;&amp;#x31;&amp;#50;&amp;#x33;&amp;#x2e;&amp;#52;&amp;#53;&amp;#46;&amp;#99;&amp;#x6f;&amp;#109;&amp;#x70;&amp;#117;&amp;#x74;&amp;#x65;&amp;#x2d;&amp;#49;&amp;#46;&amp;#97;&amp;#109;&amp;#97;&amp;#x7a;&amp;#x6f;&amp;#x6e;&amp;#97;&amp;#119;&amp;#x73;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#x6d;&quot;</span>&gt;<span class="p">&amp;</span><span class="c">#104;&amp;#97;&amp;#x64;&amp;#x6f;&amp;#111;&amp;#112;&amp;#64;&amp;#101;&amp;#99;&amp;#x32;&amp;#x2d;&amp;#x31;&amp;#x32;&amp;#51;&amp;#46;&amp;#52;&amp;#x35;&amp;#54;&amp;#46;&amp;#x31;&amp;#50;&amp;#51;&amp;#46;&amp;#x34;&amp;#53;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&amp;#112;&amp;#x75;&amp;#116;&amp;#x65;&amp;#45;&amp;#x31;&amp;#x2e;&amp;#97;&amp;#x6d;&amp;#x61;&amp;#122;&amp;#x6f;&amp;#110;&amp;#x61;&amp;#119;&amp;#x73;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt; &amp;ldquo;sudo tcpdump -i eth0 -s 0 -U -w - not port 22&amp;rdquo; &gt; /tmp/wireshark</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, run the following in another terminal:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wireshark -k -i /tmp/wireshark
</span></code></pre></td></tr></table></div></figure></p>

<h1>Queries</h1>

<h2>Simple query on primary index key.</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;3&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>As you&rsquo;d expect the handler is able to query for a specific key and save a full scan.</p>

<h2>Simple query on primary range key</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">AND</span> <span class="n">sequence_number</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">49551126539595599111737467812411851738953944699026538498</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;sequence_number&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;S&amp;rdquo;:&amp;ldquo;49551126539595599111737467812411851738953944699026538498&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;GT&amp;rdquo;</span>
</span><span class='line'>      <span class="err">},</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:</span><span class="p">{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;3&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>Likewise, a query is used for both the primary and range key.</p>

<h2>Query on primary key with limit</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">4</span> <span class="k">LIMIT</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:1933,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;4&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>It appears however that limit conditions do not affect the DynamoDB query, and all results for the key
are returned regardless.</p>

<h2>Query on local index</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">AND</span> <span class="n">time</span> <span class="o">&gt;</span> <span class="mi">1432979370486</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;3&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>Unfortunately it doesn&rsquo;t seem local indexes are recognised, instead it just queries on the primary key and
filters the time from the returned results.</p>

<h2>Query on secondary global index</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="k">host</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">site</span><span class="o">-</span><span class="mi">8</span><span class="p">.</span><span class="n">com</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>It seems secondary global indexes aren&rsquo;t supported either, leading to a full table scan in the absence of any
conditions on the primary key.</p>

<h2>Greater than query on primary index</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>Unsurprisingly this results in a full scan given that you can only apply greater than conditions to a range key.</p>

<h2>Using OR to select multiple primary keys</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">OR</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>This results in a full scan also, which isn&rsquo;t much of a surprise seeing as you can only query on one key at a time.</p>

<h2>Using multiple range key values with OR</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">6</span> <span class="k">AND</span>
</span><span class='line'><span class="p">(</span><span class="n">sequence_number</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">49551126539595599111737467812353823299612434595900817410</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">OR</span>
</span><span class='line'><span class="n">sequence_number</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">49551126539595599111737467812437239181165855278949728258</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;6&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>It starts by simply querying on the primary key then filtering the results, nothing fancy like selecting only those
greater than the smallest to reduce the returned results.</p>

<h2>Querying on range key alone</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">sequence_number</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">49551126539595599111737467812411851738953944699026538498</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>Full scan, which is expected as you can&rsquo;t query on a range key without specifying a primary key.</p>

<h2>Like query on range key</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="k">AND</span> <span class="n">sequence_number</span> <span class="k">LIKE</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">49551126539595599111737467812411851738953944699026</span><span class="o">%&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:2147483647,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;KeyConditions&amp;rdquo;:{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;product&amp;rdquo;:{</span>
</span><span class='line'>         <span class="err">&amp;ldquo;AttributeValueList&amp;rdquo;:[</span>
</span><span class='line'>            <span class="err">{</span>
</span><span class='line'>               <span class="err">&amp;ldquo;N&amp;rdquo;:&amp;ldquo;3&amp;rdquo;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>         <span class="err">],</span>
</span><span class='line'>         <span class="err">&amp;ldquo;ComparisonOperator&amp;rdquo;:&amp;ldquo;EQ&amp;rdquo;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>   <span class="err">},</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 0.5</p>

<p>Although there is support for BEGINS_WITH in the KeyConditions field it appears this isn&rsquo;t used. Instead it just queries
on the primary key and filters the results for the range key condition.</p>

<h2>Primary key ID expressed indirectly through multiple conditions</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">&gt;</span> <span class="mi">2</span> <span class="k">AND</span> <span class="n">product</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:1933,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>No luck on this one either, it doesn&rsquo;t recognise that the only key value can be 3 - although I&rsquo;m not too surprised about that.
Be sure that your key values are explicit enough for the handler to recognise.</p>

<h2>Primary key using IN condition</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="k">IN</span> <span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:1933,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>It will not recognise a single ID in an IN statement either, resulting in a full scan.</p>

<h2>Subquery on primary key</h2>

<p>Hive Query:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">AS</span> <span class="n">p1</span> <span class="k">WHERE</span> <span class="n">p1</span><span class="p">.</span><span class="n">product</span> <span class="k">IN</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">p2</span><span class="p">.</span><span class="n">product</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">AS</span> <span class="n">p2</span> <span class="k">WHERE</span> <span class="n">p2</span><span class="p">.</span><span class="n">product</span> <span class="o">=</span> <span class="mi">4</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>DynamoDB Request:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TableName&amp;rdquo;:&amp;ldquo;web-analytics-raw&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Limit&amp;rdquo;:1933,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;ReturnConsumedCapacity&amp;rdquo;:&amp;ldquo;TOTAL&amp;rdquo;,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;TotalSegments&amp;rdquo;:1,</span>
</span><span class='line'>   <span class="err">&amp;ldquo;Segment&amp;rdquo;:0</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Consumed capacity: 2.5</p>

<p>Surprisingly only one scan request was made as far as I could tell, so while unfortunately it wasn&rsquo;t able to issue
   this as two queries at least it didn&rsquo;t issue two scans.</p>

<h1>Conclusion</h1>

<p>Unfortunately it seems that neither global secondary indexes or local indexes are supported, however scenarios involving
a query on a single primary key are recognised pretty well. This makes it practical to use a primary key as a method
of partitioning your data to avoid EMR queries taking longer over time as the table grows.</p>

<p>With that in mind you may also be able to design queries which avoid a full scan but still achieve the same outcome.</p>

<p>For example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">5</span> <span class="k">OR</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Could be achieved with:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">tmptable</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">tmptable</span> <span class="p">(</span>
</span><span class='line'>  <span class="n">product</span> <span class="nb">bigint</span><span class="p">,</span>
</span><span class='line'>  <span class="n">sequence_number</span> <span class="n">string</span><span class="p">,</span>
</span><span class='line'>  <span class="k">host</span> <span class="n">string</span><span class="p">,</span>
</span><span class='line'>  <span class="n">time</span> <span class="nb">bigint</span>
</span><span class='line'><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">tmptable</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">tmptable</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">product_views</span> <span class="k">WHERE</span> <span class="n">product</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tmptable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Which would require two query requests instead of one scan.</p>

<p>It&rsquo;s also worth noting that filtering on the DynamoDB side is never used, although that isn&rsquo;t a huge issue seeing
  as throughput consumption is calculated before any filters are applied.</p>

<p>You can also use the EXPLAIN Hive command to give you some clue about how a query will be executed, however as far as
I&rsquo;m aware the raw DynamoDB request isn&rsquo;t exposed in either the EXPLAIN output or the query logs. I&rsquo;d be glad to know if there
is a more convenient way to view the raw DynamoDB request than inspecting the network traffic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Exporting and Analysing CloudWatch Logs With Data Pipeline and EMR]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/"/>
    <updated>2015-03-01T16:54:54+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr</id>
    <content type="html"><![CDATA[<p>If you followed <a href="/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Part 1</a>
you&rsquo;ll now have your CloudWatch logs sitting conveniently in S3 to be analysed. You could now download them
and search each file individually using grep or a similar tool, but it would be much nicer to be able to search
by field and construct complex queries with multiple conditions.</p>

<p>Thankfully you have <a href="http://aws.amazon.com/elasticmapreduce/">Elastic Map Reduce</a> (EMR) at your disposal, which can
help you analyse your logs straight from S3 using a nice UI (Hue) and with an SQL-like query language you&rsquo;re already
familiar with (Hive). EMR is typically employed to process terabytes of data, but it works well on relatively small
data-sets too and will easily scale up if you happen to have a huge amount of logs to process. Running an on-demand
EMR cluster for 6 hours also only costs less than $2.</p>

<p>This blog post will cover setting up an EMR cluster, logging into Hue, then using Hive to format and query the Apache
HTTP access logs exported from CloudWatch in Part 1.</p>

<!-- more -->


<h1>Creating your EMR cluster</h1>

<p>From the EMR console click &ldquo;Create cluster&rdquo;.</p>

<p><img src="/images/posts/cwlogexport/log_cluster.png"></p>

<p>Fill out the basic options such as cluster name, disable termination protection and enable logging and debugging.</p>

<p>Leave Tags, Software Configuration and File System Configuration as Default.</p>

<p><img src="/images/posts/cwlogexport/main_config.png"></p>

<p>For a minimal sized cluster select only a single master and core node. The c1.medium instance type is a good place
to start if you want the smallest cluster possible.</p>

<p>I&rsquo;d strongly recommend assigning an EC2 key pair so you can log in via SSH. If you don&rsquo;t already have a key pair
then you can add one in advance by following <a href="https://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-access-ssh.html">these instructions</a>.</p>

<p>The network, IAM and role configuration can stay as default unless you&rsquo;d prefer stricter security policies than default.</p>

<p><img src="/images/posts/cwlogexport/steps.png"></p>

<p>Leave the Steps as-is, but ensure Auto-terminate is set to <em>no</em> as we&rsquo;ll be using the cluster interactively and will terminate
it manually.</p>

<p>Finally, click <em>Create cluster</em>.</p>

<h1>Wait for your cluster to be provisioned</h1>

<p>It can take about 15 minutes for your cluster to be fully provisioned.</p>

<p><img src="/images/posts/cwlogexport/complete.png"></p>

<p>Once provisioned the status should change to <em>waiting</em>.</p>

<p><img src="/images/posts/cwlogexport/steps-complete.png"></p>

<p>The steps should also all have a Status of <em>complete</em>.</p>

<h1>Connecting to Hue web UI</h1>

<p>The Hue UI is accessible at <code>http://[your master public DNS]:8888</code>. For example in my case the URL is <code>http://ec2-54-152-224-205.compute-1.amazonaws.com:8888</code>.</p>

<p>By default the security groups prevent external access to the Hue UI. You have two options to enable access:</p>

<h2>Option 1: SSH tunneling</h2>

<p>The most secure method is to use SSH tunneling to access the web UI. Detailed instructions are available <a href="https://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-ssh-tunnel-local.html">here</a>.
This will require the key pair you specified when creating the cluster.</p>

<h2>Option 2: Opening up security group</h2>

<p>Another alternative is to open up the security group rules to allow access to your public IP. This is perhaps the
easiest but keep in mind there will be <strong>no encryption</strong> of your connection.</p>

<p><img src="/images/posts/cwlogexport/rule.png"></p>

<p>Go to the EC2 console and edit the inbound rules for the <em>ElasticMapReduce-master</em> security group. Add a rule to allow
 all traffic from your IP.</p>

<h2>Logging into Hue</h2>

<p><img src="/images/posts/cwlogexport/huelogin.png"></p>

<p>Open the Hue UI url in your web browser and follow the instructions to set a password and log in.</p>

<h1>Creating table for logs</h1>

<p>Once logged in dismiss the set-up prompt and select <em>Hive</em> under the <em>Query Editors</em> drop down.</p>

<p><img src="/images/posts/cwlogexport/table_query.png"></p>

<p>Enter the following query into the query editor:</p>

<p><figure class='code'><figcaption><span>query.sql </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">access_log_s3</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ip</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">time_local</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">method</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">uri</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>               <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">protocol</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>          <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">status</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>            <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">bytes_sent</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">referer</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>           <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">useragent</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>         <span class="n">STRING</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="k">ROW</span> <span class="n">FORMAT</span> <span class="n">SERDE</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">org</span><span class="p">.</span><span class="n">apache</span><span class="p">.</span><span class="n">hadoop</span><span class="p">.</span><span class="n">hive</span><span class="p">.</span><span class="n">serde2</span><span class="p">.</span><span class="n">RegexSerDe</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="k">WITH</span> <span class="n">SERDEPROPERTIES</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="k">input</span><span class="p">.</span><span class="n">regex</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">^</span><span class="p">(</span><span class="err">\</span><span class="n">S</span><span class="o">+</span><span class="p">)</span> <span class="err">\</span><span class="n">S</span><span class="o">+</span> <span class="err">\</span><span class="n">S</span><span class="o">+</span> <span class="err">\</span><span class="p">[([</span><span class="o">^</span><span class="err">\</span><span class="p">[]</span><span class="o">+</span><span class="p">)</span><span class="err">\</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;(</span><span class="err">\</span><span class="n">w</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="err">\</span><span class="n">S</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="err">\</span><span class="n">S</span><span class="o">+</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">(</span><span class="err">\</span><span class="n">d</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="err">\</span><span class="n">d</span><span class="o">+</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;([</span><span class="o">^&amp;</span><span class="n">rdquo</span><span class="p">;]</span><span class="o">+</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;([</span><span class="o">^&amp;</span><span class="n">ldquo</span><span class="p">;]</span><span class="o">+</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;.</span><span class="o">*&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">STORED</span> <span class="k">AS</span> <span class="n">TEXTFILE</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">s3</span><span class="p">:</span><span class="o">//</span><span class="n">logexport</span><span class="o">/</span><span class="n">apache</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Replace <code>s3://logexport/apache</code> with your own bucket path. If you have a different log format then you can customise
the regular expression and columns to suit.</p>

<p>Click Execute.</p>

<p><img src="/images/posts/cwlogexport/data.png"></p>

<p>If you refresh the table list in the left column you should now see your new table. You can click the preview icon
to see a sample of your formatted data.</p>

<h1>Querying logs</h1>

<p>You&rsquo;re now ready to begin analysing your logs! You can find a full reference on the Hive query language <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select">here</a>
, however it should be very familiar if you know basic SQL.</p>

<p>For example, if I run:</p>

<p><figure class='code'><figcaption><span>query.sql </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">access_log_s3</span> <span class="k">WHERE</span> <span class="n">uri</span> <span class="k">LIKE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">var</span><span class="o">=</span><span class="mi">80</span><span class="o">%&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">AND</span> <span class="n">time_local</span> <span class="k">LIKE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="mi">28</span><span class="o">/</span><span class="n">Feb</span><span class="o">/</span><span class="mi">2015</span><span class="p">:</span><span class="mi">07</span><span class="p">:</span><span class="mi">42</span><span class="p">:</span><span class="o">%&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I can see the returned logs under the results tab.</p>

<p><img src="/images/posts/cwlogexport/refined.png"></p>

<p>In my case it took around 60 seconds to process and return the query, however this will depend on how many logs you have,
the query you&rsquo;re running, and the instance types you&rsquo;re using.</p>

<p>From the results tab you can easily export your results as a CSV or create a new table to refine further.</p>

<h1>Cleaning up</h1>

<p><img src="/images/posts/cwlogexport/terminate.png"></p>

<p>Once you&rsquo;re finished simply return to the EMR console and terminate the cluster.</p>

<p>You may also want to delete the S3 bucket and Data Pipeline.</p>

<h1>Automating periodic analysis</h1>

<p>This blog post describes an ad-hoc scenario where you might want to occupationally perform manual analysis. However,
Data Pipeline is the perfect tool for automating periodic log analysis. You can leverage the <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-object-hiveactivity.html">Hive Activity</a>
to build a Pipeline which automatically exports the logs then runs then analyses them on a schedule.</p>

<h1>Part 1</h1>

<p><a href="/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Click here</a> to revisit Part 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Exporting and Analysing CloudWatch Logs With Data Pipeline and EMR]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/"/>
    <updated>2015-02-24T19:47:52+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve just discovered one of your instances has been <em>hacked</em>! A new instance is being launched to replace it,
 but you have no idea how the attacker got access in the first place and you need to stop it happening again. The clues
 are hidden somewhere in your HTTP access logs which are conveniently sitting in CloudWatch logs. Unfortunately accessing
 and analysing those logs from CloudWatch isn&rsquo;t as simple as you thought. The only refinement available is by ingestion
 time and there&rsquo;s no way you can trawl through days of logs by hand. You&rsquo;ll need to analyse the logs externally
 but that&rsquo;s a challenge too - there&rsquo;s no automated export to S3 and the GetLogEvents API action is limited to pages of 1MB
 and 10 requests per second. Once you get the logs out you have to figure out how to analyse them, what you&rsquo;re looking for
 is too complex for simple text searches and loading tens of GB of logs into an RDBMS would be tedious.</p>

<p>Fortunately you found this blog post! <a href="http://aws.amazon.com/elasticmapreduce/">Elastic Map Reduce (EMR)</a> allows you to
quickly and conveniently create a Hadoop cluster running Hive. It might seem like overkill to use Hadoop to process
just a few GB of logs once-off, but Hive provides a convenient SQL-like interface and works perfectly fine at small scale.
Plus, considering you pay by the hour the cost is almost negligible.</p>

<p>The only question is how to get your logs out of CloudWatch and into S3 for EMR to process, so I recently wrote a small
tool called <a href="https://github.com/Tim-B/cwlogs-s3">cwlogs-s3</a> to help with this process. Part 1 of this blog post will
cover how to export your logs to S3 using cwlogs-s3 and Data Pipeline, then Part 2 will cover how to analyse those
logs with Hive on EMR.</p>

<!-- more -->


<h1>Getting started</h1>

<p>The first step is to create an AWS Data Pipeline to run <a href="https://github.com/Tim-B/cwlogs-s3">cwlogs-s3</a>, which is a
command line utility written in Ruby and available as a gem.</p>

<p>You could of course run this gem manually on an EC2 instance or your own workstation, however <a href="http://aws.amazon.com/datapipeline/">AWS data pipeline</a>
provides a simple way to orchestrate creating an EC2 instance, installing the gem, running it, then terminating the instance
upon conclusion.</p>

<p>The other benefit of Data Pipeline is that it&rsquo;s hugely extensible, therefore you could easily convert this into
an automated log-processing routine that runs on a schedule.</p>

<h1>Creating destination S3 bucket</h1>

<p>Create an S3 bucket for the exported logs and the Data Pipeline logs. I&rsquo;ve called mine <code>cwlogs-destination</code> and inside
 I&rsquo;ve created two folders called <code>dplogs</code> and <code>exportedlogs</code>.</p>

<h1>Granting IAM access to resource role</h1>

<p>The IAM resource role requires read access to CloudWatch logs and read/write access to S3. By default the resource role
is called <code>DataPipelineDefaultResourceRole</code>. I&rsquo;ve attached the <code>AmazonS3FullAccess</code> and <code>CloudWatchLogsReadOnlyAccess</code>
managed policies to the default role in this example, however you can create a more specific policy (which might limit
access only to specific buckets or log groups) and attach it to a custom resource role if desired.</p>

<p><img src="/images/posts/cwlogexport/iamroles.png"></p>

<p><em>Note: If you haven&rsquo;t created a pipeline before the default resource role may not have been created. It should be created
 after the first pipeline you create.</em></p>

<h1>Creating pipeline definition</h1>

<p>Copy paste the following pipeline definition into a file called <code>pipeline.json</code> and save it on your workstation:</p>

<p><figure class='code'><figcaption><span>pipeline.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;objects&amp;rdquo;</span> <span class="err">:</span>  <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;ExportActivity&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;schedule&amp;rdquo;</span> <span class="err">:</span> <span class="err">{</span> <span class="err">&amp;ldquo;ref&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DefaultSchedule&amp;rdquo;</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Export</span> <span class="err">Logs&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;command&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;sudo</span> <span class="err">yum</span> <span class="err">-y</span> <span class="err">install</span> <span class="err">rubygems;</span> <span class="err">sudo</span> <span class="err">gem</span> <span class="err">install</span> <span class="err">cwlogs-s</span><span class="mi">3</span><span class="err">;</span> <span class="err">cwlogs-s</span><span class="mi">3</span> <span class="err">-g</span> <span class="err">&amp;lsquo;#</span><span class="p">{</span><span class="err">my_source_group</span><span class="p">}</span><span class="err">&amp;rsquo;</span>  <span class="err">-p</span> <span class="err">&amp;lsquo;#</span><span class="p">{</span><span class="err">my_export_period</span><span class="p">}</span><span class="err">&amp;rsquo;</span> <span class="err">-r</span> <span class="err">&amp;lsquo;#</span><span class="p">{</span><span class="err">my_region</span><span class="p">}</span><span class="err">&amp;rsquo;</span> <span class="err">-e</span> <span class="err">&amp;lsquo;#</span><span class="p">{</span><span class="err">my_export_ending</span><span class="p">}</span><span class="err">&amp;rsquo;</span> <span class="err">-s</span> <span class="err">&amp;lsquo;#</span><span class="p">{</span><span class="err">my_s3_path</span><span class="p">}</span><span class="err">&amp;rsquo;&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;runsOn&amp;rdquo;</span> <span class="err">:</span> <span class="p">{</span> <span class="err">&amp;ldquo;ref&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;ExportInstance&amp;rdquo;</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;type&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;ShellCommandActivity&amp;rdquo;</span>
</span><span class='line'>    <span class="err">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;ExportInstance&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;terminateAfter&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;1</span> <span class="err">hour&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;instanceType&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;t1.micro&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;schedule&amp;rdquo;</span> <span class="err">:</span> <span class="err">{</span> <span class="err">&amp;ldquo;ref&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DefaultSchedule&amp;rdquo;</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;EC</span><span class="mi">2</span><span class="err">-instance&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;role&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DataPipelineDefaultRole&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;type&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Ec</span><span class="mi">2</span><span class="err">Resource&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;resourceRole&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DataPipelineDefaultResourceRole&amp;rdquo;</span>
</span><span class='line'>    <span class="err">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DefaultSchedule&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Every</span> <span class="err">1</span> <span class="err">day&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;occurrences&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;1&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;startAt&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;FIRST_ACTIVATION_DATE_TIME&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;type&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Schedule&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;period&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;1</span> <span class="err">Hour&amp;rdquo;</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Default&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;scheduleType&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;cron&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;failureAndRerunMode&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;CASCADE&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;schedule&amp;rdquo;</span> <span class="err">:</span> <span class="err">{</span> <span class="err">&amp;ldquo;ref&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;DefaultSchedule&amp;rdquo;</span> <span class="p">}</span><span class="err">,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;Default&amp;rdquo;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">],</span>
</span><span class='line'>  <span class="err">&amp;ldquo;parameters&amp;rdquo;</span> <span class="err">:</span>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;my_source_group&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;description&amp;rdquo;:</span> <span class="err">&amp;ldquo;Source</span> <span class="err">Log</span> <span class="err">Group&amp;rdquo;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;my_export_period&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;description&amp;rdquo;:</span> <span class="err">&amp;ldquo;Period</span> <span class="err">to</span> <span class="err">export&amp;rdquo;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;my_export_ending&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;description&amp;rdquo;:</span> <span class="err">&amp;ldquo;End</span> <span class="err">of</span> <span class="err">export</span> <span class="err">period&amp;rdquo;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;my_s3_path&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;description&amp;rdquo;:</span> <span class="err">&amp;ldquo;Destination</span> <span class="err">S3</span> <span class="err">path</span> <span class="err">for</span> <span class="err">exported</span> <span class="err">logs&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;type&amp;rdquo;:</span> <span class="err">&amp;ldquo;AWS::S3::ObjectKey&amp;rdquo;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">&amp;ldquo;my_region&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;description&amp;rdquo;:</span> <span class="err">&amp;ldquo;Bucket</span> <span class="err">/</span> <span class="err">CloudWatch</span> <span class="err">region&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;default&amp;rdquo;:</span> <span class="err">&amp;ldquo;us-east-1&amp;rdquo;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span><span class="err">,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;values&amp;rdquo;</span> <span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h1>Creating Pipeline</h1>

<p>Go to the AWS Data Pipeline console and create a new pipeline.</p>

<p><img src="/images/posts/cwlogexport/dp1.png"></p>

<p>Enter a name for the pipeline and choose to import a definition by loading the <code>pipeline.json</code> file you created earlier.</p>

<p><img src="/images/posts/cwlogexport/dp2.png"></p>

<p>Fill out the parameters. You can browse to the folder within the S3 bucket you created earlier. The format of the
 period and end parameters can be any format supported by <a href="https://github.com/hpoydar/chronic_duration">chronic duration</a>
 and <a href="https://github.com/mojombo/chronic">chronic</a> respectively.</p>

<p><img src="/images/posts/cwlogexport/dp3.png"></p>

<p>Leave the schedule as default, select the other folder you created as the logging destination and leave the IAM roles
as default.</p>

<p>Finally, click &ldquo;Activate&rdquo;.</p>

<h1>Monitoring Execution</h1>

<p>Data Pipeline will now run through the process of spinning up a new EC2 instance, installing cwlogs-s3, running
it with the supplied parameters, then terminating the instance. You can follow the process by clicking the refresh
button at the top right of the pipeline view in the Data Pipeline console.</p>

<p><img src="/images/posts/cwlogexport/running.png"></p>

<p>The status should progress through steps such as <code>WAITING_FOR_RUNNER</code>, <code>RUNNING</code> and <code>FINISHED</code>.</p>

<p><img src="/images/posts/cwlogexport/finished.png"></p>

<p>Once the task has been finished you should also have the option to view logs such as Stdout and Stderr. This is useful
to debug any issues that might cause the task to fail.</p>

<h1>Viewing exported data</h1>

<p><img src="/images/posts/cwlogexport/outputs3.png"></p>

<p>If you browse the destination in the S3 console you should now see a series of .log files containing your exported
logs. The files each have a randomised prefix to improve S3 performance, however the suffix indicates the order
 in which they were exported.</p>

<h1>Part 2</h1>

<p><a href="/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Click here</a> to continue to
Part 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 2015 AWS Wish List]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/01/01/my-2015-aws-wish-list/"/>
    <updated>2015-01-01T22:53:23+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/01/01/my-2015-aws-wish-list</id>
    <content type="html"><![CDATA[<p>As a new year dawns it occurred to me how much AWS functionality I now use heavily wasn&rsquo;t available only a year ago.
 Almost every day I check the <a href="http://aws.amazon.com/blogs/aws/">AWS blog</a> to find some new feature is available. This
 got me thinking about the functionality I&rsquo;d like to see in 2015, so I put together a list of my top 5.</p>

<p>I&rsquo;m sure the engineers at AWS are already working on some (if not most) of these, but if not then hopefully someone sees
 this post and gets a great idea!</p>

<!-- more -->


<h1>#1 - EIPs for ELB</h1>

<p>Elastic load balancer (ELB) doesn&rsquo;t support static IPs, instead you must CNAME your domain to the hostname for your ELB or
 use the special alias record in Route53. I understand why they preferred to design it this way - it&rsquo;s much easier to load
 balance the load balancing instances via DNS rather than via network routing. This solution works fine in the majority of scenarios,
 but unfortunately it makes things much more difficult if you need to give out a static IP to your customers for them to use
 in their A records.</p>

<p>Being able to assign an Elastic IP (EIP) to an ELB would eliminate a huge barrier for a lot of people. Scaling could be addressed
 with anycast to provide a virtual IP which addresses multiple load balancing instances. This would also help ELB to compete
 against <a href="http://www.rackspace.com.au/cloud/load-balancers/compare">rackspace</a> and <a href="https://cloud.google.com/compute/docs/load-balancing/http/cross-region-example">Google Cloud</a>
 which both offer this feature.</p>

<h1>#2 - A managed scheduling / timer service</h1>

<p>Invoking global jobs on a schedule can be quite a hassle in distributed systems. On one hand you can&rsquo;t have a CRON job running
 on every instance because then you&rsquo;ll end up with multiple invocations, but on the other hand if you have just one instance
 that handles scheduling you need to ensure the job is triggered even if that instance fails or is replaced.</p>

<p>One solution is to use AWS Data Pipeline to start an instance and invoke a command that sends a message to SNS,
although starting an EC2 instance just to do this is quite expensive. Also, the minimum period is 15 minutes, and you don&rsquo;t have control
 down to the minute or second as to exactly when your task will be invoked.</p>

<p>A managed scheduling service that allows you to submit messages to an SNS topic would be great! SNS already supports
 message fan-out to queues and delivery retires so the only component missing is something to submit those messages
 at a specified time. Azure has a <a href="http://azure.microsoft.com/en-us/services/scheduler/">similar solution</a> already.</p>

<h1>#3 - <del>Search for CloudWatch logs</del></h1>

<p>CloudWatch logs provides a convenient way to manage logs across multiple instances without having to leave the AWS ecosystem.
 It&rsquo;s still a new product, but it feels like it hasn&rsquo;t yet achieved its full potential.</p>

<p>Currently you can store logs and create metrics based on certain patterns appearing in your logs, but there&rsquo;s no search
other than the ability to filter by time!
 You can&rsquo;t archive your logs to S3 for external processing either, and the GetLogEvents API function is limited to 10,000
 logs per request and can only be called 10 times/second.</p>

<p>These limitations mean most users will probably have to use a second log aggregation service to cater for ad-hoc
 log searches and extraction. However, a search function would make a huge difference and enable CloudWatch to compete
 with the likes of Logentries and Loggly. Even integration with CloudSearch would be enough for users
 who have a large enough log volume to justify a dedicated search instance.</p>

<p><strong>Update: <a href="http://aws.amazon.com/about-aws/whats-new/2015/06/amazon-cloudwatch-logs-search-and-console-updates/">Search has been added!</a></strong></p>

<h1>#4 - <del>HTTP endpoint triggers for Lambda functions</del></h1>

<p>It&rsquo;s easy to think of opportunities where the new Lambda service could help &ldquo;glue&rdquo; different systems together. Unfortunately
 we&rsquo;re currently limited by how a Lambda function can be invoked - it either has to be done manually via the AWS API
 or via S3, DynamoDB or Kinesis events.</p>

<p>Lambda would become significantly more useful if functions could be triggered asynchronously with a simple REST endpoint
 without authentication. Obviously a lack of authentication isn&rsquo;t ideal, but it&rsquo;d make it much easier to integrate
 with 3rd parties that support web-hook functionality. Imagine being able to trigger Lambda functions
 using a BitBucket commit hook, or a stored email notification from Mailgun.</p>

<p> <strong>Update: <a href="http://aws.amazon.com/about-aws/whats-new/2015/07/invoke-aws-lambda-functions-over-https/">You can now trigger Lambda functions over HTTPS using Amazon API Gateway</a></strong></p>

<h1>#5 - Zone tagging in Route53</h1>

<p>Resource tags can be used in IAM policies to restrict users to particular tags. This is useful when creating accounts
 that can only access EC2 instances tagged as belonging to a specific department for example.</p>

<p>Users who manage DNS on behalf of some of their customers via Route53 would appreciate giving their customers
 direct access via an IAM account to manage their zones directly. This would help to cut down on support costs
 associated with making DNS updates on behalf of the customer due to changes unrelated to the product they provide.</p>

<p>You can currently restrict IAM accounts to a list of zone IDs, but maintaining this list is impractical when some customers
 have dozens of zones and several users that change regularly. It would make things much easier if zones could be tagged
 with a particular customer, then accounts can be limited to zones tagged with that customer.</p>

<p><strong>Update: <a href="http://aws.amazon.com/about-aws/whats-new/2015/02/11/amazon-route-53-announces-aws-cloudtrail-integration-tagging-health-check-features/">You can now tag hosted zones, although you can&rsquo;t create IAM policies using them</a></strong></p>

<h1>Worth a mention</h1>

<p>Here are some other features I&rsquo;d love to see but didn&rsquo;t make it into my top 5.</p>

<p><strong>Rolling deployments for OpsWorks</strong> - ElasticBeanstalk and CodeDeploy both support rolling deployments, it&rsquo;s a shame
 OpsWorks is the odd one out!</p>

<p><strong>Trigger Lambda functions with SQS and SNS</strong> - Being able to process SQS and SNS messages with Lambda would be great too,
 although if you could trigger a Lambda function with a HTTP endpoint then you could subscribe that to SNS instead.</p>

<p> <strong>Update: <a href="http://docs.aws.amazon.com/sns/latest/dg/sns-lambda.html">You can now trigger Lambda functions via SNS</a></strong></p>

<p><strong>HTTP request routing via ELB</strong> - I can live without this, but many users would find it useful to route certain paths
 to different sets of back end instances. <a href="https://cloud.google.com/compute/docs/load-balancing/http/content-based-example">Google Cloud</a>
 supports this already.</p>

<p>So, what&rsquo;s on your wish list?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Per Application Metrics With CloudWatch Logs and OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks/"/>
    <updated>2014-12-21T10:53:24+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks</id>
    <content type="html"><![CDATA[<p><a href="http://aws.amazon.com/about-aws/whats-new/2014/07/10/introducing-amazon-cloudwatch-logs/">CloudWatch logs</a> is a cheap and
 easy to set up centralised logging solution. At the moment it lacks several valuable features such as a convenient way
 to search logs, however it does an <em>excellent</em> job at providing graphing and alerting on aggregated metrics pulled from
 ingested log data. An obvious application for this is to monitor HTTP server statistics to provide graphs of overall
 request rates, response sizes, and error rates.</p>

<p><a href="http://aws.amazon.com/opsworks/">OpsWorks</a> makes it easy to orchestrate a fleet of EC2 instances serving multiple applications
 (as oppose to <a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> which only hosts a single application). Apache is
 the default HTTP server for most OpsWorks layer types.</p>

<p>This post demonstrates how to setup CloudWatch logs for Apache access logs on OpsWorks, then create custom CloudWatch
 metrics for an individual OpsWorks application to graph the HTTP request rate.</p>

<!-- more -->


<h1>Installing the CloudWatch agent with Chef to monitor Apache logs</h1>

<p>The first step is to install the CloudWatch agentusing a custom recipe. These instructions are based off <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartChef.html">the AWS documentation</a>
 so <strong>follow those steps to configure your IAM instance role first</strong>.</p>

<p>Create the following files in your custom cookbooks repository, you can name the custom recipe anything you like but
 in this example I&rsquo;ve named it <code>myrecipe</code>.</p>

<p><figure class='code'><figcaption><span>myrecipe/recipes/logging.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">template</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">cwlogs</span><span class="o">.</span><span class="n">cfg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">cwlogs</span><span class="o">.</span><span class="n">cfg</span><span class="o">.</span><span class="n">erb</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">group</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;directory &amp;ldquo;/o</span><span class="n">pt</span><span class="o">/</span><span class="n">aws</span><span class="o">/</span><span class="n">cloudwatch</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;remote_file &amp;ldquo;/o</span><span class="n">pt</span><span class="o">/</span><span class="n">aws</span><span class="o">/</span><span class="n">cloudwatch</span><span class="o">/</span><span class="n">awslogs</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">setup</span><span class="o">.</span><span class="n">py</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//s</span><span class="mi">3</span><span class="o">.</span><span class="n">amazonaws</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">aws</span><span class="o">-</span><span class="n">cloudwatch</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">awslogs</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">setup</span><span class="o">.</span><span class="n">py</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="sr">  mode &amp;ldquo;0755&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">execute</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Install</span> <span class="no">CloudWatch</span> <span class="no">Logs</span> <span class="n">agent</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">aws</span><span class="o">/</span><span class="n">cloudwatch</span><span class="o">/</span><span class="n">awslogs</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="o">-</span><span class="n">n</span> <span class="o">-</span><span class="n">r</span> <span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/tmp/</span><span class="n">cwlogs</span><span class="o">.</span><span class="n">cfg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="nb">system</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pgrep</span> <span class="o">-</span><span class="n">f</span> <span class="n">aws</span><span class="o">-</span><span class="n">logs</span><span class="o">-</span><span class="n">agent</span><span class="o">-</span><span class="n">setup</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>myrecipe/templates/default/cwlogs.cfg.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">[general]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;Path to the AWSLogs agent&amp;rsquo;s state file. Agent uses this file to maintain&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;h1&gt;client side state across its executions.&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;state_file = /var/awslogs/state/agent-state&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;[&amp;lt;%= node[:opsworks][:stack][:name] </span><span class="err">%&gt;</span><span class="x">-http-access]</span>
</span><span class='line'><span class="x">datetime_format = [%Y-%m-%d %H:%M:%S]</span>
</span><span class='line'><span class="x">log_group_name = &amp;lt;%= node[:opsworks][:stack][:name].gsub(&amp;lsquo; &amp;rsquo;,&amp;lsquo;_&amp;rsquo;) </span><span class="err">%&gt;</span><span class="x">-http-access</span>
</span><span class='line'><span class="x">file = &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/*-access.log</span>
</span><span class='line'><span class="x">log_stream_name = &amp;lt;%= node[:opsworks][:instance][:hostname] </span><span class="err">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The significant line is <code>file = &lt;%= node[:apache][:log_dir] %&gt;/*-access.log</code> which
 sets the log location to the Apache HTTP access logs.</p>

<p>Next, add this recipe to the setup lifecycle event of your OpsWorks layer:</p>

<p><img src="/images/posts/cwlogsopsworks/logrecipe.png"></p>

<h1>Including application in Apache access logs</h1>

<p>The other change we need to make is to include the application name in the Apache access logs, otherwise we won&rsquo;t
 be able to filter by application when creating a logging metric in CloudWatch.</p>

<p>To do this you need to override the Apache vhost template in the OpsWorks cookbooks. The recipe containing this template
 will depend on the application type, for example it&rsquo;s located in <code>mod_php5_apache2/templates/default/web_app.conf.erb</code> or
<code>passenger_apache2/templates/default/web_app.conf.erb</code> for PHP and Ruby applications respectively.</p>

<p>In this example we&rsquo;ll assume a PHP application, so create the following file in your custom cookbooks repository:</p>

<p><figure class='code'><figcaption><span>mod_php5_apache2/templates/default/web_app.conf.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;VirtualHost *:80&gt;</span>
</span><span class='line'><span class="x">  ServerName &amp;lt;%= @params[:server_name] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;% if @params[:server_aliases] &amp;amp;&amp;amp; !@params[:server_aliases].empty? </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias &amp;lt;% @params[:server_aliases].each do |a| </span><span class="err">%&gt;</span><span class="x">&amp;lt;%= &amp;ldquo;#{a}&amp;rdquo; </span><span class="err">%&gt;</span><span class="x"> &amp;lt;% end </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot &amp;lt;%= @params[:docroot] </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  LogFormat &amp;ldquo;%h %l %u %t \&amp;rdquo;%r\&amp;ldquo; </span><span class="err">%&gt;</span><span class="x">s %b \&amp;rdquo;%{Referer}i\&amp;ldquo; \&amp;rdquo;%{User-agent}i\&amp;ldquo; \&amp;rdquo;&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">\&amp;ldquo;&amp;rdquo; combinedwithapp&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  LogLevel &amp;lt;%= node[:apache][:log_level] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-ganglia.log ganglia&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  FileETag none&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  RewriteEngine On</span>
</span><span class='line'><span class="x">  &amp;lt;% if node[:apache][:version] == &amp;lsquo;2.2&amp;rsquo; </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include &amp;lt;%= @params[:rewrite_config] </span><span class="err">%&gt;</span><span class="x">&lt;em&gt;</span>
</span><span class='line'><span class="x">  RewriteLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @application_name </span><span class="err">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  &amp;lt;% else </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional &amp;lt;%= @params[:rewrite_config] </span><span class="err">%&gt;</span><span class="x">&lt;/em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% @environment.each do |key, value| </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &amp;ldquo;&amp;lt;%= key </span><span class="err">%&gt;</span><span class="x">&amp;rdquo; &amp;ldquo;&amp;lt;%= value </span><span class="err">%&gt;</span><span class="x">&amp;rdquo;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% if @params[:mounted_at] </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^&amp;lt;%= @params[:mounted_at] </span><span class="err">%&gt;</span><span class="x">/(.*)$ &amp;lt;%= @params[:docroot] </span><span class="err">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% if node[:apache][:version] == &amp;lsquo;2.2&amp;rsquo; </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include &amp;lt;%= @params[:local_config] </span><span class="err">%&gt;</span><span class="x">&lt;em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% else </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional &amp;lt;%= @params[:local_config] </span><span class="err">%&gt;</span><span class="x">&lt;/em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;% if node[:deploy][@application_name][:ssl_support] </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;VirtualHost *:443&gt;</span>
</span><span class='line'><span class="x">  ServerName &amp;lt;%= @params[:server_name] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;% if @params[:server_aliases] &amp;amp;&amp;amp; !@params[:server_aliases].empty? </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias &amp;lt;% @params[:server_aliases].each do |a| </span><span class="err">%&gt;</span><span class="x">&amp;lt;%= &amp;ldquo;#{a}&amp;rdquo; </span><span class="err">%&gt;</span><span class="x"> &amp;lt;% end </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot &amp;lt;%= @params[:docroot] </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  SSLEngine on</span>
</span><span class='line'><span class="x">  SSLProxyEngine on</span>
</span><span class='line'><span class="x">  SSLCertificateFile &amp;lt;%= node[:apache][:dir] </span><span class="err">%&gt;</span><span class="x">/ssl/&amp;lt;%= @params[:server_name] </span><span class="err">%&gt;</span><span class="x">.crt</span>
</span><span class='line'><span class="x">  SSLCertificateKeyFile &amp;lt;%= node[:apache][:dir] </span><span class="err">%&gt;</span><span class="x">/ssl/&amp;lt;%= @params[:server_name] </span><span class="err">%&gt;</span><span class="x">.key</span>
</span><span class='line'><span class="x">  &amp;lt;% if @params[:ssl_certificate_ca] </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SSLCACertificateFile &amp;lt;%= node[:apache][:dir] </span><span class="err">%&gt;</span><span class="x">/ssl/&amp;lt;%= @params[:server_name] </span><span class="err">%&gt;</span><span class="x">.ca</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnvIf User-Agent &amp;ldquo;.&lt;em&gt;MSIE.&lt;/em&gt;&amp;rdquo; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  LogLevel &amp;lt;%= node[:apache][:log_level] </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-ssl-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @params[:name] </span><span class="err">%&gt;</span><span class="x">-ssl-ganglia.log ganglia&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  FileETag none&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  RewriteEngine On</span>
</span><span class='line'><span class="x">  &amp;lt;% if node[:apache][:version] == &amp;lsquo;2.2&amp;rsquo; </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include &amp;lt;%= @params[:rewrite_config] </span><span class="err">%&gt;</span><span class="x">-ssl&lt;em&gt;</span>
</span><span class='line'><span class="x">  RewriteLog &amp;lt;%= node[:apache][:log_dir] </span><span class="err">%&gt;</span><span class="x">/&amp;lt;%= @application_name </span><span class="err">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  &amp;lt;% else </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional &amp;lt;%= @params[:rewrite_config] </span><span class="err">%&gt;</span><span class="x">-ssl&lt;/em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% @environment.each do |key, value| </span><span class="err">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &amp;ldquo;&amp;lt;%= key </span><span class="err">%&gt;</span><span class="x">&amp;rdquo; &amp;ldquo;&amp;lt;%= value </span><span class="err">%&gt;</span><span class="x">&amp;rdquo;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% if @params[:mounted_at] </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^&amp;lt;%= @params[:mounted_at] </span><span class="err">%&gt;</span><span class="x">/(.*)$ &amp;lt;%= @params[:docroot] </span><span class="err">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;  &amp;lt;% if node[:apache][:version] == &amp;lsquo;2.2&amp;rsquo; </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include &amp;lt;%= @params[:local_config] </span><span class="err">%&gt;</span><span class="x">-ssl&lt;em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% else </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional &amp;lt;%= @params[:local_config] </span><span class="err">%&gt;</span><span class="x">-ssl&lt;/em&gt;</span>
</span><span class='line'><span class="x">  &amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;</span>
</span><span class='line'><span class="x">&amp;lt;% end </span><span class="err">-%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This configuration is based on the <a href="https://github.com/aws/opsworks-cookbooks/blob/release-chef-11.10/mod_php5_apache2/templates/default/web_app.conf.erb">default template</a> so
 it may be best to start with the latest template file on GitHub.</p>

<p>Note the following lines which are relevant:</p>

<p><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\" \"&lt;%= @params[:name] %&gt;\"" combinedwithapp</code></p>

<p>This is creating a new log format called <code>combinedweithapp</code>, it&rsquo;s the same as the <code>combined</code> format except the app name
 is appended to the end.</p>

<p><code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-access.log combinedwithapp</code>
<code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-ssl-access.log combinedwithapp</code></p>

<p>This is telling both the HTTP and HTTPS access logs to use the new custom format.</p>

<h1>Testing the logging</h1>

<p>If you now launch an instance, wait for it to come online then load the App a few times you should begin to see logs
 appearing in CloudWatch after a few minutes.</p>

<p><img src="/images/posts/cwlogsopsworks/logsappearing.png"></p>

<p>This indicates that the CloudWatch agent is working, you should also be able to see the app name. You&rsquo;ll notice
 that logs are nicely categorized by stack and instance too.</p>

<h1>Creating a metric to monitor HTTP requests by App</h1>

<p>How that we have Apache access logs being sent to CloudWatch including the App name we can setup a metric to monitor
 the number of requests made to this application.</p>

<p>From the &ldquo;Log Groups&rdquo; screen in CloudWatch, tick the appropriate log group (<code>cw-logs-test-http-access</code> in this example) and then
 click &ldquo;Create Metric Filter&rdquo; at the top.</p>

<p>Enter the following Filter Pattern:</p>

<p><code>[host, logName, user, timestamp, request, statusCode, size, referer, useragent, app=app1, ...]</code></p>

<p>Note that you should replace app1 with the name of the app you&rsquo;re interested in.</p>

<p><img src="/images/posts/cwlogsopsworks/metricfilterapp.png"></p>

<p>You can test your filter pattern, otherwise proceed by clicking &ldquo;Assign Metric&rdquo;.</p>

<p><img src="/images/posts/cwlogsopsworks/metric-name.png"></p>

<p>Give your new metric an appropriate namespace (group) and name. As we&rsquo;re only interested in the number of requests the
 &ldquo;Metric Value&rdquo; is 1 (1 per request).</p>

<h1>Viewing the results</h1>

<p>Once you&rsquo;ve created the metric you won&rsquo;t see data until more logs matching that criteria occur, so either generate some
 traffic on your app or wait for some to come in. There can be a delay of about 5 minutes for metrics data to appear.</p>

<p>After data has been recorded into the metric you should be able to find that metric either by searching the metrics list
 or from the &ldquo;Custom Metrics&rdquo; drop down which will appear after you refresh the page.</p>

<p><img src="/images/posts/cwlogsopsworks/request_graph.png"></p>

<p>Change the aggregation type from &ldquo;average&rdquo; to &ldquo;sum&rdquo; and you should now see a nice graph of the requests going to your app
 over time. You can change the interval to 1 minute to get the most detailed graph.</p>

<h1>Other metrics</h1>

<p>In this example we&rsquo;re only interested in the number of HTTP requests, but you can easily create additional metrics for things
 like 4xx errors or response size (to get an estimate of bandwidth usage by app).</p>

<p>To graph 4xx errors use a Filter Pattern like this (note the statusCode field):</p>

<p><code>[host, logName, user, timestamp, request, statusCode=4*, size, referer, useragent, app=app1, ...]</code></p>

<p>To graph response size enter <code>$size</code> instead of 1 as the &ldquo;Metric Value&rdquo; when creating the metric.</p>

<p>To monitor multiple apps simply create additional sets of your custom metrics, each with a different app filter.</p>
]]></content>
  </entry>
  
</feed>

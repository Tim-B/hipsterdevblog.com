<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Zeroc Ice | :HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/blog/categories/zeroc-ice/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2015-05-31T17:09:04+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building ZeroC Ice 3.5 Projects With Gradle and IntelliJ]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/04/21/building-zeroc-ice-projects-with-gradle-and-intellij/"/>
    <updated>2015-04-21T19:35:35+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/04/21/building-zeroc-ice-projects-with-gradle-and-intellij</id>
    <content type="html"><![CDATA[<p><a href="https://zeroc.com/">ZeroC Ice</a> is a distributed computing platform supporting many languages including Java. Building
an Ice project requires compiling &ldquo;slice&rdquo; data structure definitions into a compatible Java interface. Most often
it is recommended to use the <a href="https://zeroc.com/eclipse.html">Eclipse plugin</a>, however I prefer to use IntelliJ and
a build tool which is IDE agnostic. Official Gradle support <a href="https://doc.zeroc.com/display/Ice36/Gradle+Slice+Plug-in">is coming</a>
 in Ice 3.6, but that&rsquo;s still in beta. Fortunately it&rsquo;s quite easy to invoke te slice2java tool from Gradle and
 develop Ice 3.5 projects on Gradle and IntelliJ by extension.</p>

<!-- more -->


<h1>Project structure</h1>

<p>You should set up your project using the standard Gradle structure:</p>

<pre><code>src/main/java
src/main/slice
build.gradle
</code></pre>

<p>Put your Java sources in the <code>java</code> folder and your slice files in the <code>slice</code> folder.</p>

<h1>build.gradle</h1>

<p>Populate your <code>build.gradle</code> using this base:</p>

<p><figure class='code'><figcaption><span>build.gradle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">java</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;sourceSets {</span>
</span><span class='line'><span class="s">    main {</span>
</span><span class='line'><span class="s">        java {</span>
</span><span class='line'><span class="s">            srcDir &amp;lsquo;slice&amp;rsquo;</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenLocal</span><span class="o">()</span>
</span><span class='line'>    <span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'>    <span class="n">maven</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://repo.zeroc.com/nexus/content/repositories/releases&quot;</span><span class="o">&gt;</span><span class="nl">https:</span><span class="c1">//repo.zeroc.com/nexus/content/repositories/releases&lt;/a&gt;&amp;rsquo;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;dependencies {</span>
</span><span class='line'><span class="s">    compile &amp;lsquo;com.zeroc:ice:3.5.0&amp;rsquo;</span>
</span><span class='line'><span class="s">    compile &amp;lsquo;com.zeroc:icestorm:3.5.0&amp;rsquo;</span>
</span><span class='line'><span class="s">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">task</span> <span class="n">compileSlice</span><span class="o">(</span><span class="nl">type:</span> <span class="n">Exec</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">sliceDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">projectDir</span><span class="o">}</span><span class="s">/slice/</span><span class="n">main</span><span class="s">/java&amp;rdquo;)</span>
</span><span class='line'><span class="s">    sliceDir.mkdirs()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">commandLine</span> <span class="s1">&#39;slice2java&#39;</span><span class="o">,</span> <span class="s1">&#39;--output-dir&#39;</span><span class="o">,</span> <span class="s2">&quot;${projectDir}/slice/main/java&quot;</span><span class="o">,</span> <span class="s2">&quot;${projectDir}/src/main/slice/MySliceFile.ice&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">standardOutput</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ext</span><span class="o">.</span><span class="na">output</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span> <span class="n">standardOutput</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;gradle.projectsEvaluated {</span>
</span><span class='line'><span class="s">    compileJava.dependsOn(compileSlice)</span>
</span><span class='line'><span class="s">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">String</span> <span class="n">getRuntimeClasspath</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">runtimeClasspath</span><span class="o">.</span><span class="na">collect</span> <span class="o">{</span> <span class="n">it</span><span class="o">.</span><span class="na">absolutePath</span> <span class="o">}.</span><span class="na">join</span><span class="o">(&amp;</span><span class="n">lsquo</span><span class="o">;:&amp;</span><span class="n">rsquo</span><span class="o">;)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Replace <code>MySliceFile.ice</code> with the name of your slice file.</p>

<h1>Building the project</h1>

<p>You should now be able to run <code>gradle compileSlice</code> which will generate a new folder called <code>slice/main/java</code>,
compile the slice file and output the result to that new folder.</p>

<p><code>compileSlice</code> is also a dependency of <code>compileJava</code> so you only have to run <code>gradle build</code> which will compile the
slice files then your Java source including the generated Java from the slice compiler in one go.</p>

<p>It is assumed that <code>slice2java</code> is in your path, if the build fails with a message such as
<code>A problem occurred starting process 'command 'slice2java''</code> check that it&rsquo;s in your path by running <code>which slice2java</code>.</p>

<h2>Optional: Building distributable packages</h2>

<p>You can alsop use the Gradle <a href="http://gradle.org/docs/current/userguide/application_plugin.html">application plugin</a>
to generate distributable packages of your Ice application, including a bundled copy of <code>ice-3.5.0.jar</code>.</p>

<p>Update your <code>build.gradle</code>:</p>

<p><figure class='code'><figcaption><span>build.gradle </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">application</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// Include the base build.gradle content here&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mainClassName</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">com</span><span class="o">.</span><span class="na">mydomain</span><span class="o">.</span><span class="na">myproject</span><span class="o">.</span><span class="na">MyClass</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// If you have multiple other components /</span> <span class="n">entry</span> <span class="n">classes</span>
</span><span class='line'><span class="c1">// (eg. a client and a server that need to be invoked independently)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">task</span> <span class="n">createAllStartScripts</span><span class="o">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">{}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;def scripts = [&amp;lsquo;MyOtherClass1&amp;rsquo; : &amp;lsquo;com.mydomain.myproject.MyOtherClass1&amp;rsquo;,</span>
</span><span class='line'><span class="s">               &amp;lsquo;MyOtherClass2&amp;rsquo; : &amp;lsquo;com.mydomain.myproject.MyOtherClass2&amp;rsquo;]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">scripts</span><span class="o">.</span><span class="na">each</span><span class="o">()</span> <span class="o">{</span> <span class="n">scriptName</span><span class="o">,</span> <span class="n">className</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">t</span> <span class="o">=</span> <span class="n">tasks</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="nl">name:</span> <span class="n">scriptName</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">StartScript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;,</span> <span class="nl">type:</span> <span class="n">CreateStartScripts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mainClassName</span> <span class="o">=</span> <span class="n">className</span>
</span><span class='line'>        <span class="n">applicationName</span> <span class="o">=</span> <span class="n">scriptName</span>
</span><span class='line'>        <span class="n">outputDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">project</span><span class="o">.</span><span class="na">buildDir</span><span class="o">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="o">;</span><span class="n">scripts</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="o">;)</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="o">=</span> <span class="n">jar</span><span class="o">.</span><span class="na">outputs</span><span class="o">.</span><span class="na">files</span> <span class="o">+</span> <span class="n">project</span><span class="o">.</span><span class="na">configurations</span><span class="o">.</span><span class="na">runtime</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">applicationDistribution</span><span class="o">.</span><span class="na">into</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bin</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">from</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'>        <span class="n">fileMode</span> <span class="o">=</span> <span class="mi">0755</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">createAllStartScripts</span><span class="o">.</span><span class="na">dependsOn</span><span class="o">(</span><span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="o">}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;// If you want to include other files with your distributable&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">applicationDistribution</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">$</span><span class="o">{</span><span class="n">projectDir</span><span class="o">}</span><span class="s">/config&amp;rdquo;)) {</span>
</span><span class='line'><span class="s">    into &amp;ldquo;bin/</span><span class="n">config</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
</span><span class='line'><span class="o">}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;applicationDistribution.from(new File(&amp;ldquo;${projectDir}/</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">into</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">bin</span><span class="s">/data&amp;rdquo;</span>
</span><span class='line'><span class="s">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Substitute your own class names as applicable in the code above.</p>

<p>Build your distributable by running <code>gradle distZip</code>, you should find the output under <code>build/distributions/MyProject.zip</code>.</p>

<h1>Using IntelliJ</h1>

<p>You should now be able to import your Gradle project into IntelliJ like any other Gradle project: <code>File</code> > <code>New</code> >
<code>Project from Existing Sources...</code> > browse to and select <code>build.gradle</code>.</p>

<p>Create a new gradle run configuration for the <code>gradle build</code> task:</p>

<p><img src="/images/posts/icegradle/build.png"></p>

<p>Also add a run configuration to run your application:</p>

<p><img src="/images/posts/icegradle/run.png"></p>

<p>You should now be able to both build and run your application directly from IntelliJ.</p>

<h2>Caveat on OSX</h2>

<p>It&rsquo;s a <a href="http://apple.stackexchange.com/questions/51677/how-to-set-path-for-finder-launched-applications">well</a>
<a href="http://emmanuelbernard.com/blog/2012/05/09/setting-global-variables-intellij/">documented</a>
 <a href="http://stackoverflow.com/questions/15201763/intellij-does-not-recognize-path-">issue</a> that IntelliJ does not inherit
 the path variable of the user on OSX. This means that when
you run <code>gradle build</code> from IntelliJ it won&rsquo;t be able to find <code>slice2java</code> and you&rsquo;ll get an error like
<code>A problem occurred starting process 'command 'slice2java''</code>. The easiest solution is just to use an absolute path
in <code>commandLine 'slice2java'</code> such as <code>commandLine '/usr/bin/slice2java'</code>, alternatively you can explore some of the
solutions mentioned in the links above.</p>
]]></content>
  </entry>
  
</feed>

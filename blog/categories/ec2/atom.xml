<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ec2 | :HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/blog/categories/ec2/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2016-06-04T11:54:43-07:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Far Can You Go With HAProxy and a t2.micro]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/18/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro/"/>
    <updated>2014-12-18T15:56:13-08:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/18/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro</id>
    <content type="html"><![CDATA[<p>Load balancing is critical to any scalable and highly available cloud application. The obvious choice for load balancing
 on AWS is <a href="http://aws.amazon.com/elasticloadbalancing/">ELB</a>, but unfortunately if you require features such as a static
 IP or URL based request routing then ELB isn&rsquo;t an option.</p>

<p><a href="http://www.haproxy.org/">HAProxy</a> is a great solution that performs extremely well even on small EC2 instance types. It
 is also a supported layer type in <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-load.html">OpsWorks</a>
 which makes it the obvious choice for OpsWorks users.</p>

<p>It&rsquo;s well known that several large application servers can be served by just a single small HAProxy server, but what is
the definition of small? How about the smallest EC2 instance on offer - the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">t2.micro</a>?
 This blog post puts HAProxy on a t2.micro to the test using <a href="https://loader.io/">loader.io</a> to determine just how many requests/second it
 can handle and whether CPU or network is the limiting factor.</p>

<!-- more -->


<h1>Method</h1>

<p>To create a test environment I set up an OpsWorks stack with a HAProxy and PHP layer.
I then deployed the following file:</p>

<p><figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">usleep</span><span class="p">(</span><span class="mi">300000</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Lorem</span> <span class="nx">ipsum</span> <span class="nx">dolor</span> <span class="nx">sit</span> <span class="nx">amet</span><span class="p">,</span> <span class="nx">consectetur</span> <span class="o">&amp;</span><span class="nx">hellip</span><span class="p">;</span> <span class="p">[</span><span class="nx">continues</span> <span class="k">for</span> <span class="o">~</span><span class="mi">50</span><span class="nx">kb</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is intended to emulate a fairly typical application request from the perspective of the load balancer
(ie. takes about 300ms to generate and the resulting document is about 50kb in size). Having a fixed page generation
time is convenient as any increase in the overall response time can be assumed to be due to the load balancer.</p>

<p>I also created a <code>status.php</code> which does nothing but return a 200 response to serve as the health check.</p>

<p>I then launched the following instances:</p>

<ul>
<li>1 x t2.micro to the HAProxy layer</li>
<li>4 x c3.large to the PHP App Server layer</li>
</ul>


<p>At no time during my testing did the application servers show any signs of excessive load, however I wanted to ensure
 that there was ample excess capacity and that the load balancer would be the bottleneck in my tests.</p>

<p>The only changes I made to the standard OpsWorks configuration was to install NewRelic, and raise the <code>node[:haproxy][:maxcon_factor_php_app]</code> value to 50.</p>

<p>I used <a href="https://loader.io/">loader.io</a> to generate the load and produce these nice graphs.</p>

<h1>Results</h1>

<h2>100 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="/images/posts/haproxybench/100persecloader.png"></p>

<h3>NewRelic</h3>

<p><img src="/images/posts/haproxybench/100nrcpu.jpg"></p>

<p><img src="/images/posts/haproxybench/100nrnetwork.png"></p>

<p>As you can see, at 100 req/second CPU load is less than 2%, although combined network throughput is ~75Mb/s.
  No requests timeout and response times are stable.</p>

<h2>1000 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="/images/posts/haproxybench/1000loader.png"></p>

<p>At 1000 req/second performance has definitely degraded. 10521 requests timeout while 157726 succeed and there is
 significant fluctuation in response times.</p>

<h3>HAProxy stats</h3>

<p><img src="/images/posts/haproxybench/1000haproxystats.png"></p>

<p>The HAProxy stats suggests requests aren&rsquo;t being queued by HAProxy, and the application servers are barely at 5% CPU.</p>

<h3>NewRelic</h3>

<p><img src="/images/posts/haproxybench/1000nrcpu.jpg"></p>

<p><img src="/images/posts/haproxybench/1000nrnetwork.jpg"></p>

<p>This time CPU is higher, but still only ~7% - however combined network throughput is close to 40k packets/second and 400 MB/s.</p>

<p>Clearly network capacity is the limiting factor.</p>

<h2>Finding the limit</h2>

<p>Using the previous result it seems conservatively the outbound network capacity limit is about 180 Mb/s. If we assume each
request is about 50 kB the approximate limit should be <code>(180 * 1024 * 1024) / (50 * 1024 * 8) = 460 req/second</code>.</p>

<h3>460 req/second</h3>

<p><img src="/images/posts/haproxybench/460loader.png"></p>

<p>At 460 req/second response times are mostly a flat ~300 ms, except for two spikes. I attribute this to TCP congestion avoidance
 as the traffic approaches the limit and packets start to get dropped. After dropped packets are detected the clients reduce their
 transmission rate, but eventually the transmission rate stabilizes again just under the limit. Only 1739 requests timeout and 134918 succeed.</p>

<h3>400 req/second</h3>

<p><img src="/images/posts/haproxybench/loader400.png"></p>

<p>Testing again at 400 req/second which should be well within the limit we can see stable response times with no spikes or timeouts.</p>

<h1>A note about t2 instances and CPU credits</h1>

<p>t2-type instances have <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">variable CPU performance</a>, limited by CPU credits which allow the instance to have increased CPU
 usage for a limited period of time. The t2.micro instance type can use up to 10% CPU consistently without consuming CPU credits.</p>

<p>Ordinarily variable CPU performance wouldn&rsquo;t be desirable for a load balancer, however HAProxy is very efficient in terms
 of CPU and these tests show that CPU usage rarely exceeds 10% before being limited by network capacity.</p>

<p>Below is a graph of CPU credit usage and balance over the course of my tests:</p>

<p><img src="/images/posts/haproxybench/cpucredit.png"></p>

<p>As you can see the trend is generally positive, so if you&rsquo;re not running at the limit of your capacity the whole time
 you&rsquo;d probably never run out of CPU credits.</p>

<h1>What about small responses?</h1>

<p>Previously I was trying to emulate a relatively large response body, such as a full HTML page. But what if you&rsquo;re
 trying to load balance something like an API which only returns short JSON strings, would networking still be the limiting factor?</p>

<p>I also ran some tests using this scenario:</p>

<p><figure class='code'><figcaption><span>api.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;?&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">hello</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">world</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>When I tested this with 1000 req/sec HAProxy health checks began to fail on the app servers even though CPU
 usage was low, this caused response times to jump and fluctuate:</p>

<p><img src="/images/posts/haproxybench/haproxystats1ksmall.png"></p>

<p>Given that my aim is to benchmark HAProxy rather than the app servers I didn&rsquo;t bother to debug this and added two additional
 app servers instead.</p>

<p>After adding the servers I was still experiencing wild fluctuations and timeouts:</p>

<p><img src="/images/posts/haproxybench/1k6instances.png"></p>

<p>Having said that, at 460 req/second it does seem significantly more stable than the larger response size:</p>

<p><img src="/images/posts/haproxybench/460small.png"></p>

<p>It seems that the limit of the t2.micro is around 500 req/second even for small responses.</p>

<h1>What about a c3.large HAProxy instance?</h1>

<p>While the focus of this blog post is on the t2.micro, I couldn&rsquo;t help my curiosity and decided to try a c3.large HAProxy instance
 with 1000 req/second. As you can see there&rsquo;s no such problems:</p>

<p><img src="/images/posts/haproxybench/c3large1000.png"></p>

<p>I did see some timeouts at 1500 req/second, although I didn&rsquo;t bother to create a HVM instance with enhanced networking enabled.
 The networking performance of the c3.large is described as &ldquo;moderate&rdquo; as oppose to &ldquo;low&rdquo; in the case of the t2, so an increase of
 more than double between low and moderate without enhanced networking isn&rsquo;t bad.</p>

<h1>Conclusion</h1>

<p>You should be safe to run a t2.micro for your HAProxy instance if you&rsquo;re performing less than 400 req/second and 180 Mb/second.
 If you&rsquo;re likely to be running close to this limit most of the time you may want to consider running a larger t2 instance to avoid running
 out of CPU credits.</p>

<p>If you need to go larger then a c3.large should be good for 1k/second, although I suspect an m3.medium would probably perform similarly too.</p>

<p>In any case, you&rsquo;re probably going to run out of network capacity before you hit CPU limits regardless of what instance you choose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 3: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/24/part-3-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-24T17:43:36-08:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/24/part-3-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 3 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the CodeDeploy deployment, deploying it to the configured OpsWorks stack and demonstrating the results of the integration.
 <a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Setting bucket policy and uploading deployment package</h1>

<p>Now we&rsquo;re ready to deploy a package from CodeDeploy.</p>

<p>For the purposes of this example the package will contain two files:</p>

<p><figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appspec.yml
</span><span class='line'>app/index.php</span></code></pre></td></tr></table></div></figure></p>

<p>The <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AppSpec</a> specifies that the contents of the
 App directory should be copied to the location of the placeholder OpsWorks deployment.</p>

<p><figure class='code'><figcaption><span>appspec.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">os</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>     <span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/www/my_app/public</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>app/index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">CodeDeploy</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Zip this up and upload it to your S3 bucket where you&rsquo;ll store your deployment packages.</p>

<p>If you haven&rsquo;t already done so, you will also need to apply the S3 bucket policy provided <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-deploy-revision.html">here</a>
 to allow the CodeDeploy role access to objects in this bucket:</p>

<p><img src="/images/posts/opsworks_codedeploy/bucket_policy.png"></p>

<p>One important note is that you must also include the role ARN for your OpsWorks instances as above.</p>

<p>You can find the stack profile in the security settings of the layer:</p>

<p><img src="/images/posts/opsworks_codedeploy/instanceprofile.png"></p>

<p>Then get the role ARN from your IAM console:</p>

<p><img src="/images/posts/opsworks_codedeploy/iaminstanceprofile.png"></p>

<h1>Running CodeDeploy deployment</h1>

<p>We&rsquo;re now ready to deploy our application with CodeDeploy, head back to the CodeDeploy application you created earlier
 and create a new deployment from the zip you uploaded.</p>

<p><img src="/images/posts/opsworks_codedeploy/codedeploy_deployment.png"></p>

<p>Click &ldquo;Deploy Now&rdquo; and wait for the deployment to conclude.</p>

<p>Should your deployment fail, click &ldquo;View All Instances&rdquo; > &ldquo;View Events&rdquo; beside an instance and click &ldquo;View Logs&rdquo; beside the failed step.</p>

<h2>Viewing your application</h2>

<p>Your application should now successfully be deployed to your OpsWorks instances. If you view the application in your
 browser you should see your deployment.</p>

<p><img src="/images/posts/opsworks_codedeploy/complete.png"></p>

<h2>Caveats - Launching a new instance</h2>

<p>Unfortunately it seems CodeDeploy currently only supports automatic deployments for new instances when they&rsquo;re in
 an autoscaling group. OpsWorks only supports its own load and time based instance functionality rather than
 using autoscaling groups, and therefore you&rsquo;ll have to manually trigger a deployment after a new instance comes online
 and before you place it under your load-balancer. You may wish for your recipes to cause the load-balancer health
 check to fail by default, then have a separate recipe which enables the health check to pass which you can run manually
 once you&rsquo;ve run a deployment after a new instance has been launched.</p>

<p>Alternatively you could use your configure recipe to trigger a deployment automatically using the CodeDeploy API,
 however you would need to know which specific applications are relevant to the instance.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/23/part-2-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-23T17:43:29-08:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/23/part-2-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 2 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the OpsWorks Chef recipes to deploy your application via CodeDeploy.
 <a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Installing CodeDeploy agent via Chef</h1>

<p>Next we need to write a custom chef recipe to install the CodeDeploy agent and perform our desired configuration.</p>

<p>Checkout your cookbooks repository and create the following files:</p>

<p><figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Berksfile
</span><span class='line'>myrecipe/metadata.rb
</span><span class='line'>myrecipe/recipes/agent-install.rb
</span><span class='line'>myrecipe/recipes/vhost.rb
</span><span class='line'>myrecipe/templates/default/myapp_vhost.erb</span></code></pre></td></tr></table></div></figure></p>

<p>Populate these files with the following:</p>

<p><figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://supermarket.getchef.com&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//su</span><span class="n">permarket</span><span class="o">.</span><span class="n">getchef</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>(We won&rsquo;t be using <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/cookbooks-101-opsworks-berkshelf.html">Berkshelf</a>
 in this tutorial, however you&rsquo;ll probably want to create this file any way if you&rsquo;re planning to extend this tutorial
  with your own configuration)</p>

<p><figure class='code'><figcaption><span>myrecipe/metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span>    <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">myrecipe</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">recipe</span>  <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">myrecipe</span><span class="o">::</span><span class="n">agent</span><span class="o">-</span><span class="n">install</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Fetches</span><span class="p">,</span> <span class="n">installs</span><span class="p">,</span> <span class="ow">and</span> <span class="n">starts</span> <span class="n">the</span> <span class="no">AWS</span> <span class="no">CodeDeploy</span> <span class="n">host</span> <span class="n">agent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is the code which downloads, installs and starts the CodeDeploy agent service:</p>

<p><figure class='code'><figcaption><span>myrecipe/recipes/agent-install.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Chef::Config[:file_cache_path]}/codedeploy-install.sh&amp;rdquo; do</span>
</span><span class='line'>    <span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/install&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//s</span><span class="mi">3</span><span class="o">.</span><span class="n">amazonaws</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">aws</span><span class="o">-</span><span class="n">codedeploy</span><span class="o">-</span><span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">install</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="sr">    mode &amp;ldquo;0744&amp;rdquo;</span>
</span><span class='line'><span class="sr">    owner &amp;ldquo;root&amp;rdquo;</span>
</span><span class='line'><span class="sr">    group &amp;ldquo;root&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">execute</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">install_codedeploy_agent</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Chef::Config[:file_cache_path]}/codedeploy-install.sh auto&amp;rdquo;</span>
</span><span class='line'>  <span class="n">user</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;service &amp;ldquo;codedeploy-agent&amp;rdquo; do</span>
</span><span class='line'><span class="sr">    action [:enable, :start]</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This code creates a directory for the CodeDeploy to deploy to, creates the vhost and enables it.</p>

<p><figure class='code'><figcaption><span>myrecipe/recipes/vhost.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">srv</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">my_app</span><span class="o">/</span><span class="kp">public</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">deploy</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;directory &amp;lsquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">d</span><span class="o">/&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;template &amp;lsquo;myapp_vhost&amp;rsquo; do</span>
</span><span class='line'><span class="sr">    path  &amp;lsquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;link &amp;ldquo;/e</span><span class="n">tc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">my_app</span><span class="o">.</span><span class="n">conf</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This is a standard Apache vhost configuration based on the default OpsWorks template:
<figure class='code'><figcaption><span>myrecipe/templates/default/myapp_vhost.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> myapp.com
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/srv/www/my_app/public/</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">/srv/www/my_app/public/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.svn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.git&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">LogLevel</span> <span class="k">info</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/apache2/my_app-error.log</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-access.log</span> combined
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-ganglia.log</span> ganglia&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">FileETag</span> <span class="k">none</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/rewrite</span>*&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/local</span>*
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In this step you may also like to create additional recipes for other configuration tasks, such as installing dependencies
or configuring your HTTP server.</p>

<h1>Adding recipes and packages to layer via OpsWorks</h1>

<p>Once you&rsquo;ve committed and pushed your recipes, go to OpsWorks and add the agent recipe to the configure lifecycle event
of your application server layer. Also add <code>ruby2.0</code> and <code>awscli</code> to the OS packages.</p>

<p> <img src="/images/posts/opsworks_codedeploy/recipes.png"></p>

<h1>Creating placeholder deployment</h1>

<p>Because OpsWorks doesn&rsquo;t perform certain default configuration tasks (such as creating a www-data group) until
 a deployment occurs it&rsquo;s easiest to create a placeholder OpsWorks deployment with a holding page which will be replaced
 by CodeDeploy. You could of course skip this step and manually configure everything via custom recipes.</p>

<p>In this instance we&rsquo;ll create a new repository for the placeholder which contains nothing but an index.php file containing
 a placeholder message.</p>

<p><figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">undergoing</span> <span class="nx">maintenance</span><span class="p">,</span> <span class="nx">please</span> <span class="k">try</span> <span class="nx">reloading</span> <span class="nx">the</span> <span class="nx">page</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Create this deployment in OpsWorks:</p>

<p><img src="/images/posts/opsworks_codedeploy/opsworksdeploy.png"></p>

<h1>Starting an instance</h1>

<p>You can now start an instance in OpsWorks. It usually takes at least 20 minutes to boot and execute the setup and configure
 recipes. After this has complete your instance should have a status of online:</p>

<p><img src="/images/posts/opsworks_codedeploy/online.png"></p>

<p>You should also see the placeholder message when you visit the IP in a browser:</p>

<p><img src="/images/posts/opsworks_codedeploy/holding.png"></p>

<p>This should also have installed and started the CodeDeploy agent.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/22/integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-22T17:09:28-08:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/22/integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>Amazon <a href="http://aws.amazon.com/blogs/aws/code-management-and-deployment/">recently announced</a> a new deployment service
called <a href="http://aws.amazon.com/codedeploy/">CodeDeploy</a>. <a href="http://aws.amazon.com/opsworks/">OpsWorks</a> is another application
 management product which provides excellent configuration management via <a href="https://www.getchef.com/">Chef</a>, however it
lacks the advanced deployment functionality of CodeDeploy. It therefore makes sense to integrate these two products,
delegating the configuration management to OpsWorks and the deployment functionality to CodeDeploy.</p>

<p>This is part 1 of <a href="/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section provides an introduction to OpsWorks and CodeDeploy, and the basic configuration required to get started.</p>

<!-- more -->


<h2>Why not just use OpsWorks?</h2>

<p>OpsWorks is a great product, but it lacks several key deployment features such as the ability to run rolling
 deployments and cancel an in-flight deployment.</p>

<h2>Why not just use CodeDeploy?</h2>

<p>While CodeDeploy does support the execution of configuration scripts in lifecycle events, these could easily become
 difficult to maintain if your configuration is complex. Also, the configuration might not belong to any specific
 application, and if you&rsquo;re running multiple applications per instance it might make sense to configure certain
 shared services on a per-server basis rather than per-application. OpsWorks is an excellent solution to these issues
 as it supports Chef and per-instance setup and configuration lifecycle events.</p>

<h1>Getting started</h1>

<p>To get started you&rsquo;ll need to set up an OpsWorks stack with a custom cookbook repository. The stack also must be created
 in a region where CodeDeploy is supported, such as North Virginia. If you&rsquo;re using a VPC don&rsquo;t forget to configure your
  VPC to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">allow external connectivity</a>.</p>

<p>My stack configuration is as follows, as you can see I&rsquo;ll be using Ubuntu 14.04, but the steps should be similar on
 Amazon linux.</p>

<p><img src="/images/posts/opsworks_codedeploy/stack.png"></p>

<p>Also, create a layer for your application servers. For example I&rsquo;ve created a PHP App Server layer. Don&rsquo;t forget to
 enable &ldquo;Public IP addresses&rdquo; under the networking options.</p>

<p><img src="/images/posts/opsworks_codedeploy/layer.png"></p>

<p>In this example I&rsquo;m also going to deploy from S3, rather than GitHub. Therefore I&rsquo;ll assume you have an S3 bucket created
to host the zip deployment packages.</p>

<h1>Creating a CodeDeploy Service Role</h1>

<p>You&rsquo;ll need to create a service role for CodeDeploy before proceeding, although if you&rsquo;ve already followed the &ldquo;Sample
Deployment&rdquo; wizard then you will probably have created one at the following step:</p>

<p><img src="/images/posts/opsworks_codedeploy/policywizard.png"></p>

<p>If you need to create one manually then you can <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html">follow these steps</a>
 to first create a role with the following policy:</p>

<p><img src="/images/posts/opsworks_codedeploy/policy.png"></p>

<p>Then set the trust relationships:</p>

<p><img src="/images/posts/opsworks_codedeploy/trust.png"></p>

<h1>Creating CodeDeploy application</h1>

<p>Next go to the CodeDeploy console and create a new application using the &ldquo;Custom Deployment&rdquo; option.</p>

<p>In the application options you have to define which EC2 instance tags will be included in the deployment. Set the <code>
opsworks:stack</code> and <code>opsworks:layer:php-app</code> to the name of your stack and layer respectively.</p>

<p><img src="/images/posts/opsworks_codedeploy/codedeploy_app.png"></p>

<p>Select a Deployment Config (eg. <code>CodeDeployDefault.OneAtATime</code>), and set the Service Role ARN to the service
 role you created earlier.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic DNS Records Using Route53 on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53/"/>
    <updated>2014-06-23T01:28:23-07:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53</id>
    <content type="html"><![CDATA[<p>
    Lets say you have a load balanced web application managed with OpsWorks – your application traffic will be addressed
    to the load balancer, but sometimes it&#8217;s still handy to address your application nodes directly for testing
    purposes or perhaps so each node has a unique SNS endpoint for HTTP notifications. You could just  use their IP,
    but unless you use an EIP that IP address may change. You could create a DNS record, which would be easier to remember
    and allows the IP to change – but managing this manually would be a pain.
</p>




<p>
    Fortunately this process of managing DNS records can be automated using Chef, Route53 and the EC2 instance
    metadata functionality to obtain the public IP. Each instance will automatically create an A record for
    <code>[instance name].example.com</code> on setup using their OpsWorks instance name.
</p>




<!-- more -->




<h2>Getting started</h2>


<p>
    Firstly, I&#8217;ll assume you have a Route53 zone created – in my case the zone will be called <code>example.com</code>.
    You&#8217;ll also need a set of AWS access keys, I recommend creating an IAM user restricted to managing your hosted zone.
    You can use the following IAM user policy:
</p>


<p><figure class='code'><figcaption><span>IAM User Policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;Version&amp;rdquo;:</span> <span class="err">&amp;ldquo;2012-10-17&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;Statement&amp;rdquo;:</span> <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;Sid&amp;rdquo;:</span> <span class="err">&amp;ldquo;Stmt1403515694000&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;Effect&amp;rdquo;:</span> <span class="err">&amp;ldquo;Allow&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;Action&amp;rdquo;:</span> <span class="err">[</span>
</span><span class='line'>        <span class="err">&amp;ldquo;route53:ChangeResourceRecordSets&amp;rdquo;,</span>
</span><span class='line'>        <span class="err">&amp;ldquo;route53:GetHostedZone&amp;rdquo;,</span>
</span><span class='line'>        <span class="err">&amp;ldquo;route53:ListResourceRecordSets&amp;rdquo;</span>
</span><span class='line'>      <span class="err">],</span>
</span><span class='line'>      <span class="err">&amp;ldquo;Resource&amp;rdquo;:</span> <span class="err">[</span>
</span><span class='line'>        <span class="err">&amp;ldquo;arn:aws:route53:::hostedzone/&lt;insert</span> <span class="err">your</span> <span class="err">hosted</span> <span class="err">zone</span> <span class="err">ID&gt;&amp;rdquo;</span>
</span><span class='line'>      <span class="err">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
    Next add your AWS credentials and zone ID as custom JSON variables in your OpsWorks stack:
</p>


<p><figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;dns_zone_id&amp;rdquo;</span>      <span class="err">:</span> <span class="err">&amp;ldquo;&lt;insert</span> <span class="err">hosted</span> <span class="err">zone</span> <span class="err">ID&gt;&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;custom_access_key&amp;rdquo;:</span> <span class="err">&amp;ldquo;&lt;insert</span> <span class="err">access</span> <span class="err">key&gt;&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;custom_secret_key&amp;rdquo;:</span> <span class="err">&amp;ldquo;&lt;insert</span> <span class="err">secret</span> <span class="err">key&gt;&amp;rdquo;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
 Adding custom JSON to your stack is covered in more detail in
 <a target="_blank" href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">Retrieving Files From S3 Using Chef on OpsWorks</a>.
</p>


<p>
    Finally, add the <a target="_blank" href="http://community.opscode.com/cookbooks/route53">route53 cookbook</a>
    to your Berksfile. If you&#8217;re not using Berkshelf you&#8217;ll have to clone the whole cookbook into your custom cookbook
    repository.
</p>


<p><figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://api.berkshelf.com&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">api</span><span class="o">.</span><span class="n">berkshelf</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">cookbook</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">route53</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Creating your recipes</h2>


<p>
    Next, we need to create a custom cookbook and recipes – in this example the cookbook is called <code>dnsupdate</code>.
     Create the following file structure and files in your custom cookbook repository:
</p>


<p><figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnsupdate/metadata.rb
</span><span class='line'>dnsupdate/recipes/add.rb</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">dnsupdate</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">description</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Update</span> <span class="no">Route53</span> <span class="no">Zone</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Dilbert</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">license</span>     <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Apache</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">version</span>     <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;depends &amp;ldquo;route53&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>recipes/add.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">net</span><span class="o">/</span><span class="n">http</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">route53</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;route53_record &amp;ldquo;create a record&amp;rdquo; do</span>
</span><span class='line'><span class="sr">  name  node[:opsworks][:instance][:hostname] + &amp;lsquo;.example.com&amp;rsquo;</span>
</span><span class='line'><span class="sr">  value Net::HTTP.get(URI.parse(&amp;lsquo;&lt;a href=&quot;http:/</span><span class="o">/</span><span class="mi">169</span><span class="o">.</span><span class="mi">254</span><span class="o">.</span><span class="mi">169</span><span class="o">.</span><span class="mi">254</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">meta</span><span class="o">-</span><span class="n">data</span><span class="o">/</span><span class="kp">public</span><span class="o">-</span><span class="n">ipv4</span><span class="s2">&quot;&gt;http://169.254.169.254/latest/meta-data/public-ipv4&lt;/a&gt;&amp;rsquo;))</span>
</span><span class='line'><span class="s2">  type  &amp;ldquo;A&amp;rdquo;</span>
</span><span class='line'><span class="s2">  ttl   60</span>
</span><span class='line'><span class="s2">  zone_id               node[:dns_zone_id]</span>
</span><span class='line'><span class="s2">  aws_access_key_id     node[:custom_access_key]</span>
</span><span class='line'><span class="s2">  aws_secret_access_key node[:custom_secret_key]</span>
</span><span class='line'><span class="s2">  overwrite true</span>
</span><span class='line'><span class="s2">  action :create</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
    Substitute <code>.example.com</code> with your own domain. <code>Net::HTTP.get(URI.parse('http://169.254.169.254/latest/meta-data/public-ipv4'))</code>
    is using the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">instance data API</a> to obtain the public IP
      – use the IP above any instance.
</p>




<h2>Adding recipe to life cycle event</h2>


<p>
    Once you&#8217;ve committed and pushed the new recipe to your custom cookbook repository you&#8217;re ready to add the recipe
    to the configure life cycle event. First update your custom cookbooks, by going to your stack > Run Command > and
    selecting &#8216;Update Custom Cookbooks&#8217; from the command select box.
</p>


<p>
    Finally, navigate to a layer in OpsWorks > Edit > Recipes > add &#8216;dnsupdate::add&#8217; to the configure
    event and save.
</p>


<p><img src="/images/posts/route53_dns/add_recipe.png"></p>

<p>
    Now when the run the configure event you should see a new DNS A record being added in Route53!
</p>

]]></content>
  </entry>
  
</feed>

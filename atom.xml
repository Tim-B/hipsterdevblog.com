<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[:HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2015-03-01T19:20:09+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part 2: Exporting and Analysing CloudWatch Logs With Data Pipeline and EMR]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/"/>
    <updated>2015-03-01T16:54:54+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr</id>
    <content type="html"><![CDATA[<p>If you followed <a href="http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Part 1</a>
you&rsquo;ll now have your CloudWatch logs sitting conveniently in S3 to be analysed. You could now download them
and search each file individually using grep or a similar tool, but it would be much nicer to be able to search
by field and construct complex queries with multiple conditions.</p>

<p>Thankfully you have <a href="http://aws.amazon.com/elasticmapreduce/">Elastic Map Reduce</a> (EMR) at your disposal, which can
help you analyse your logs straight from S3 using a nice UI (Hue) and with an SQL-like query language you&rsquo;re already
familiar with (Hive). EMR is typically employed to process terabytes of data, but it works well on relatively small
data-sets too and will easily scale up if you happen to have a huge amount of logs to process. Running an on-demand
EMR cluster for 6 hours also only costs less than $2.</p>

<p>This blog post will cover setting up an EMR cluster, logging into Hue, then using Hive to format and query the Apache
HTTP access logs exported from CloudWatch in Part 1.</p>

<!-- more -->


<h1>Creating your EMR cluster</h1>

<p>From the EMR console click &ldquo;Create cluster&rdquo;.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/log_cluster.png"></p>

<p>Fill out the basic options such as cluster name, disable termination protection and enable logging and debugging.</p>

<p>Leave Tags, Software Configuration and File System Configuration as Default.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/main_config.png"></p>

<p>For a minimal sized cluster select only a single master and core node. The c1.medium instance type is a good place
to start if you want the smallest cluster possible.</p>

<p>I&rsquo;d strongly recommend assigning an EC2 key pair so you can log in via SSH. If you don&rsquo;t already have a key pair
then you can add one in advance by following <a href="https://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-plan-access-ssh.html">these instructions</a>.</p>

<p>The network, IAM and role configuration can stay as default unless you&rsquo;d prefer stricter security policies than default.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/steps.png"></p>

<p>Leave the Steps as-is, but ensure Auto-terminate is set to <em>no</em> as we&rsquo;ll be using the cluster interactively and will terminate
it manually.</p>

<p>Finally, click <em>Create cluster</em>.</p>

<h1>Wait for your cluster to be provisioned</h1>

<p>It can take about 15 minutes for your cluster to be fully provisioned.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/complete.png"></p>

<p>Once provisioned the status should change to <em>waiting</em>.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/steps-complete.png"></p>

<p>The steps should also all have a Status of <em>complete</em>.</p>

<h1>Connecting to Hue web UI</h1>

<p>The Hue UI is accessible at <code>http://[your master public DNS]:8888</code>. For example in my case the URL is <code>http://ec2-54-152-224-205.compute-1.amazonaws.com:8888</code>.</p>

<p>By default the security groups prevent external access to the Hue UI. You have two options to enable access:</p>

<h2>Option 1: SSH tunneling</h2>

<p>The most secure method is to use SSH tunneling to access the web UI. Detailed instructions are available <a href="https://docs.aws.amazon.com/ElasticMapReduce/latest/DeveloperGuide/emr-ssh-tunnel-local.html">here</a>.
This will require the key pair you specified when creating the cluster.</p>

<h2>Option 2: Opening up security group</h2>

<p>Another alternative is to open up the security group rules to allow access to your public IP. This is perhaps the
easiest but keep in mind there will be <strong>no encryption</strong> of your connection.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/rule.png"></p>

<p>Go to the EC2 console and edit the inbound rules for the <em>ElasticMapReduce-master</em> security group. Add a rule to allow
 all traffic from your IP.</p>

<h2>Logging into Hue</h2>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/huelogin.png"></p>

<p>Open the Hue UI url in your web browser and follow the instructions to set a password and log in.</p>

<h1>Creating table for logs</h1>

<p>Once logged in dismiss the set-up prompt and select <em>Hive</em> under the <em>Query Editors</em> drop down.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/table_query.png"></p>

<p>Enter the following query into the query editor:</p>

<figure class='code'><figcaption><span>query.sql </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">access_log_s3</span> <span class="p">(</span>
</span><span class='line'>        <span class="o">`</span><span class="n">ip</span><span class="o">`</span>                <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">time_local</span><span class="o">`</span>        <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="k">method</span><span class="o">`</span>            <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">uri</span><span class="o">`</span>               <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">protocol</span><span class="o">`</span>          <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">status</span><span class="o">`</span>            <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">bytes_sent</span><span class="o">`</span>        <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">referer</span><span class="o">`</span>           <span class="n">STRING</span><span class="p">,</span>
</span><span class='line'>        <span class="o">`</span><span class="n">useragent</span><span class="o">`</span>         <span class="n">STRING</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="k">ROW</span> <span class="n">FORMAT</span> <span class="n">SERDE</span> <span class="s1">&#39;org.apache.hadoop.hive.serde2.RegexSerDe&#39;</span>
</span><span class='line'>    <span class="k">WITH</span> <span class="n">SERDEPROPERTIES</span> <span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;input.regex&#39;</span><span class="o">=</span><span class="s1">&#39;^(\\S+) \\S+ \\S+ \\[([^\\[]+)\\] &quot;(\\w+) (\\S+) (\\S+)&quot; (\\d+) (\\d+) &quot;([^&quot;]+)&quot; &quot;([^&quot;]+)&quot;.*&#39;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">STORED</span> <span class="k">AS</span> <span class="n">TEXTFILE</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;s3://logexport/apache&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace <code>s3://logexport/apache</code> with your own bucket path. If you have a different log format then you can customise
the regular expression and columns to suit.</p>

<p>Click Execute.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/data.png"></p>

<p>If you refresh the table list in the left column you should now see your new table. You can click the preview icon
to see a sample of your formatted data.</p>

<h1>Querying logs</h1>

<p>You&rsquo;re now ready to begin analysing your logs! You can find a full reference on the Hive query language <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select">here</a>
, however it should be very familiar if you know basic SQL.</p>

<p>For example, if I run:</p>

<figure class='code'><figcaption><span>query.sql </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">access_log_s3</span> <span class="k">WHERE</span> <span class="n">uri</span> <span class="k">LIKE</span> <span class="ss">&quot;%var=80%&quot;</span> <span class="k">AND</span> <span class="n">time_local</span> <span class="k">LIKE</span> <span class="ss">&quot;%28/Feb/2015:07:42:%&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can see the returned logs under the results tab.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/refined.png"></p>

<p>In my case it took around 60 seconds to process and return the query, however this will depend on how many logs you have,
the query you&rsquo;re running, and the instance types you&rsquo;re using.</p>

<p>From the results tab you can easily export your results as a CSV or create a new table to refine further.</p>

<h1>Cleaning up</h1>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/terminate.png"></p>

<p>Once you&rsquo;re finished simply return to the EMR console and terminate the cluster.</p>

<p>You may also want to delete the S3 bucket and Data Pipeline.</p>

<h1>Automating periodic analysis</h1>

<p>This blog post describes an ad-hoc scenario where you might want to occupationally perform manual analysis. However,
Data Pipeline is the perfect tool for automating periodic log analysis. You can leverage the <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-object-hiveactivity.html">Hive Activity</a>
to build a Pipeline which automatically exports the logs then runs then analyses them on a schedule.</p>

<h1>Part 1</h1>

<p><a href="http://hipsterdevblog.com/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Click here</a> to revisit Part 1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Exporting and Analysing CloudWatch Logs With Data Pipeline and EMR]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/"/>
    <updated>2015-02-24T19:47:52+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/02/24/part-1-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve just discovered one of your instances has been <em>hacked</em>! A new instance is being launched to replace it,
 but you have no idea how the attacker got access in the first place and you need to stop it happening again. The clues
 are hidden somewhere in your HTTP access logs which are conveniently sitting in CloudWatch logs. Unfortunately accessing
 and analysing those logs from CloudWatch isn&rsquo;t as simple as you thought. The only refinement available is by ingestion
 time and there&rsquo;s no way you can trawl through days of logs by hand. You&rsquo;ll need to analyse the logs externally
 but that&rsquo;s a challenge too - there&rsquo;s no automated export to S3 and the GetLogEvents API action is limited to pages of 1MB
 and 10 requests per second. Once you get the logs out you have to figure out how to analyse them, what you&rsquo;re looking for
 is too complex for simple text searches and loading tens of GB of logs into an RDBMS would be tedious.</p>

<p>Fortunately you found this blog post! <a href="http://aws.amazon.com/elasticmapreduce/">Elastic Map Reduce (EMR)</a> allows you to
quickly and conveniently create a Hadoop cluster running Hive. It might seem like overkill to use Hadoop to process
just a few GB of logs once-off, but Hive provides a convenient SQL-like interface and works perfectly fine at small scale.
Plus, considering you pay by the hour the cost is almost negligible.</p>

<p>The only question is how to get your logs out of CloudWatch and into S3 for EMR to process, so I recently wrote a small
tool called <a href="https://github.com/Tim-B/cwlogs-s3">cwlogs-s3</a> to help with this process. Part 1 of this blog post will
cover how to export your logs to S3 using cwlogs-s3 and Data Pipeline, then Part 2 will cover how to analyse those
logs with Hive on EMR.</p>

<!-- more -->


<h1>Getting started</h1>

<p>The first step is to create an AWS Data Pipeline to run <a href="https://github.com/Tim-B/cwlogs-s3">cwlogs-s3</a>, which is a
command line utility written in Ruby and available as a gem.</p>

<p>You could of course run this gem manually on an EC2 instance or your own workstation, however <a href="http://aws.amazon.com/datapipeline/">AWS data pipeline</a>
provides a simple way to orchestrate creating an EC2 instance, installing the gem, running it, then terminating the instance
upon conclusion.</p>

<p>The other benefit of Data Pipeline is that it&rsquo;s hugely extensible, therefore you could easily convert this into
an automated log-processing routine that runs on a schedule.</p>

<h1>Creating destination S3 bucket</h1>

<p>Create an S3 bucket for the exported logs and the Data Pipeline logs. I&rsquo;ve called mine <code>cwlogs-destination</code> and inside
 I&rsquo;ve created two folders called <code>dplogs</code> and <code>exportedlogs</code>.</p>

<h1>Granting IAM access to resource role</h1>

<p>The IAM resource role requires read access to CloudWatch logs and read/write access to S3. By default the resource role
is called <code>DataPipelineDefaultResourceRole</code>. I&rsquo;ve attached the <code>AmazonS3FullAccess</code> and <code>CloudWatchLogsReadOnlyAccess</code>
managed policies to the default role in this example, however you can create a more specific policy (which might limit
access only to specific buckets or log groups) and attach it to a custom resource role if desired.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/iamroles.png"></p>

<p><em>Note: If you haven&rsquo;t created a pipeline before the default resource role may not have been created. It should be created
 after the first pipeline you create.</em></p>

<h1>Creating pipeline definition</h1>

<p>Copy paste the following pipeline definition into a file called <code>pipeline.json</code> and save it on your workstation:</p>

<figure class='code'><figcaption><span>pipeline.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;objects&quot;</span> <span class="p">:</span>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;ExportActivity&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;schedule&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;DefaultSchedule&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Export Logs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;command&quot;</span> <span class="p">:</span> <span class="s2">&quot;sudo yum -y install rubygems; sudo gem install cwlogs-s3; cwlogs-s3 -g &#39;#{my_source_group}&#39;  -p &#39;#{my_export_period}&#39; -r &#39;#{my_region}&#39; -e &#39;#{my_export_ending}&#39; -s &#39;#{my_s3_path}&#39;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;runsOn&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;ExportInstance&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;ShellCommandActivity&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;ExportInstance&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;terminateAfter&quot;</span> <span class="p">:</span> <span class="s2">&quot;1 hour&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;instanceType&quot;</span> <span class="p">:</span> <span class="s2">&quot;t1.micro&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;schedule&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;DefaultSchedule&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;EC2-instance&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;role&quot;</span> <span class="p">:</span> <span class="s2">&quot;DataPipelineDefaultRole&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;Ec2Resource&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;resourceRole&quot;</span> <span class="p">:</span> <span class="s2">&quot;DataPipelineDefaultResourceRole&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;DefaultSchedule&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Every 1 day&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;occurrences&quot;</span> <span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;startAt&quot;</span> <span class="p">:</span> <span class="s2">&quot;FIRST_ACTIVATION_DATE_TIME&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;Schedule&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;period&quot;</span> <span class="p">:</span> <span class="s2">&quot;1 Hour&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span> <span class="p">:</span> <span class="s2">&quot;Default&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;scheduleType&quot;</span> <span class="p">:</span> <span class="s2">&quot;cron&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;failureAndRerunMode&quot;</span> <span class="p">:</span> <span class="s2">&quot;CASCADE&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;schedule&quot;</span> <span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;ref&quot;</span> <span class="p">:</span> <span class="s2">&quot;DefaultSchedule&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Default&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;parameters&quot;</span> <span class="p">:</span>  <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;my_source_group&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Source Log Group&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;my_export_period&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Period to export&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;my_export_ending&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;End of export period&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;my_s3_path&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Destination S3 path for exported logs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;AWS::S3::ObjectKey&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;my_region&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Bucket / CloudWatch region&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;default&quot;</span><span class="p">:</span> <span class="s2">&quot;us-east-1&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;values&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Creating Pipeline</h1>

<p>Go to the AWS Data Pipeline console and create a new pipeline.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/dp1.png"></p>

<p>Enter a name for the pipeline and choose to import a definition by loading the <code>pipeline.json</code> file you created earlier.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/dp2.png"></p>

<p>Fill out the parameters. You can browse to the folder within the S3 bucket you created earlier. The format of the
 period and end parameters can be any format supported by <a href="https://github.com/hpoydar/chronic_duration">chronic duration</a>
 and <a href="https://github.com/mojombo/chronic">chronic</a> respectively.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/dp3.png"></p>

<p>Leave the schedule as default, select the other folder you created as the logging destination and leave the IAM roles
as default.</p>

<p>Finally, click &ldquo;Activate&rdquo;.</p>

<h1>Monitoring Execution</h1>

<p>Data Pipeline will now run through the process of spinning up a new EC2 instance, installing cwlogs-s3, running
it with the supplied parameters, then terminating the instance. You can follow the process by clicking the refresh
button at the top right of the pipeline view in the Data Pipeline console.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/running.png"></p>

<p>The status should progress through steps such as <code>WAITING_FOR_RUNNER</code>, <code>RUNNING</code> and <code>FINISHED</code>.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/finished.png"></p>

<p>Once the task has been finished you should also have the option to view logs such as Stdout and Stderr. This is useful
to debug any issues that might cause the task to fail.</p>

<h1>Viewing exported data</h1>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogexport/outputs3.png"></p>

<p>If you browse the destination in the S3 console you should now see a series of .log files containing your exported
logs. The files each have a randomised prefix to improve S3 performance, however the suffix indicates the order
 in which they were exported.</p>

<h1>Part 2</h1>

<p><a href="http://hipsterdevblog.com/blog/2015/03/01/part-2-exporting-and-analysing-cloudwatch-logs-with-data-pipeline-and-emr/">Click here</a> to continue to
Part 2.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated HAProxy Failover on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/01/23/automated-haproxy-failover-on-opsworks/"/>
    <updated>2015-01-23T11:27:10+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/01/23/automated-haproxy-failover-on-opsworks</id>
    <content type="html"><![CDATA[<p>Without a doubt ELB is the simplest load balancing solution on AWS, however it may not be suitable for all users
 given it doesn&rsquo;t support features such as a static IP. Fortunately OpsWorks makes it only marginally more complicated
 to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-load.html">set up HAProxy</a> as an alternative.</p>

<p>The AWS ecosystem encourages you to implement redundancy across availability zones and to avoid a single point of
failure (SPOF). HAProxy will give you many additional features over ELB, however it is difficult to achieve cross-zone redundancy
 and automated failover as supported natively by ELB. DNS round-robbin can help balance load across multiple HAProxy instances
 to achieve scalability, however this solution does not help to achieve high availability.</p>

<p>This blog post will demonstrate how to implement automated failover using a self-monitoring pair of HAProxy instances in an
 active/standby configuration. When a failure is detected the healthy standby will automatically take control of the
 elastic IP (EIP) assigned to the pair and ensure the service can continue to function. A notification will also be triggered
 via SNS to alert you that a failover has taken place.</p>

<!-- more -->


<h1>Getting started</h1>

<p>I&rsquo;ll assume you&rsquo;re starting with a working OpsWorks stack including both an application server and HAProxy layer. I recommend
 disabling automatic assignment of an EIP in the HAProxy layer settings (make sure public address assignment is enabled though)
 then <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/resources-attach.html#resources-attach-eip">manually register</a> a single EIP
 with your stack and assign it to one of your HAProxy instances. I&rsquo;ll also assume you have a custom cookbook repository setup.
 Also, I&rsquo;ll assume you have a pre-existing SNS topic for failover notifications to be published to.</p>

<h1>Chef recipe</h1>

<p>Create the following files within a custom cookbook:</p>

<figure class='code'><figcaption><span>haproxyfailover/recipes/setup.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">service</span> <span class="s2">&quot;monit&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:status</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:restart</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:reload</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;/etc/failtome.sh&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;failtome.sh.erb&#39;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;/etc/monit.d/haproxywatch.monitrc&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;haproxywatch.monitrc.erb&#39;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0440</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:reload</span><span class="p">,</span> <span class="s2">&quot;service[monit]&quot;</span><span class="p">,</span> <span class="ss">:immediately</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>haproxyfailover/templates/default/failtome.sh.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check current instance IP externally</span>
</span><span class='line'><span class="nv">OUT</span><span class="o">=</span><span class="k">$(</span> curl -qSfsw <span class="s1">&#39;\n&#39;</span> http://checkip.amazonaws.com <span class="k">)</span> 2&gt;/dev/null
</span><span class='line'><span class="nv">RET</span><span class="o">=</span><span class="nv">$?</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check that current IP isn&#39;t target IP and that request didn&#39;t fail</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$RET&quot;</span> <span class="o">=</span> <span class="s1">&#39;0&#39;</span> -a <span class="s2">&quot;$OUT&quot;</span> !<span class="o">=</span> <span class="s1">&#39;&lt;%= node[:stack][:primary_ip] %&gt;&#39;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>
</span><span class='line'> <span class="c"># Swap EIP</span>
</span><span class='line'> aws --region &lt;%<span class="o">=</span> node<span class="o">[</span>:opsworks<span class="o">][</span>:instance<span class="o">][</span>:region<span class="o">]</span> %&gt; opsworks associate-elastic-ip <span class="se">\</span>
</span><span class='line'>  --elastic-ip &lt;%<span class="o">=</span> node<span class="o">[</span>:stack<span class="o">][</span>:primary_ip<span class="o">]</span> %&gt; <span class="se">\</span>
</span><span class='line'>  --instance-id &lt;%<span class="o">=</span> node<span class="o">[</span>:opsworks<span class="o">][</span>:instance<span class="o">][</span>:id<span class="o">]</span> %&gt;
</span><span class='line'>
</span><span class='line'> <span class="c"># Send notification</span>
</span><span class='line'> aws --region &lt;%<span class="o">=</span> node<span class="o">[</span>:opsworks<span class="o">][</span>:instance<span class="o">][</span>:region<span class="o">]</span> %&gt; sns publish <span class="se">\</span>
</span><span class='line'>  --topic-arn &lt;%<span class="o">=</span> node<span class="o">[</span>:stack<span class="o">][</span>:failover_topic<span class="o">]</span> %&gt; <span class="se">\</span>
</span><span class='line'>  --subject <span class="s2">&quot;HAProxy failover notification&quot;</span> <span class="se">\</span>
</span><span class='line'>  --message <span class="se">\</span>
</span><span class='line'>  <span class="s2">&quot;Instance &lt;%= node[:opsworks][:instance][:id] %&gt; took over &lt;%= node[:stack][:primary_ip] %&gt;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>haproxyfailover/templates/default/haproxywatch.monitrc.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">check host </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:primary_ip</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"> with address </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:primary_ip</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">    if failed</span>
</span><span class='line'><span class="x">        port 80</span>
</span><span class='line'><span class="x">        protocol HTTP</span>
</span><span class='line'><span class="x">        request /</span>
</span><span class='line'><span class="x">        timeout 30 seconds</span>
</span><span class='line'><span class="x">        for 3 cycles</span>
</span><span class='line'><span class="x">        then exec &quot;/etc/failtome.sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add the <code>haproxyfailover::setup</code> recipe to the setup lifecycle event of your HAProxy layer.</p>

<h1>IAM permissions</h1>

<p>Next you need to add additional policies to the EC2 IAM role used by your HAProxy instances. There&rsquo;s more details on
 finding your instance role in one of my <a href="http://hipsterdevblog.com/blog/2015/01/03/revisited-retrieving-files-from-s3-using-chef-on-opsworks/">previous posts</a>.</p>

<figure class='code'><figcaption><span>remap_eip </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1421894206000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;opsworks:AssociateElasticIp&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:opsworks:*:*:stack/&lt;my stack ID&gt;/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sns_alert </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1421894344000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;sns:Publish&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;&lt;my SNS ARN&gt;&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to replace <code>&lt;my stack ID&gt;</code> and <code>&lt;my SNS ARN&gt;</code> with your own values.</p>

<h1>Editing custom stack JSON</h1>

<p>Edit your stack settings and add the following to your custom JSON.</p>

<figure class='code'><figcaption><span>custom_json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;stack&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;primary_ip&quot;</span><span class="p">:</span><span class="s2">&quot;&lt;my EIP&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;failover_topic&quot;</span><span class="p">:</span><span class="s2">&quot;&lt;my SNS ARN&gt;&quot;</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to replace <code>&lt;my EIP&gt;</code> and <code>&lt;my SNS ARN&gt;</code> with your own values. Afterwards your custom JSON
 should look something like this:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxyfailover/customjson.png"></p>

<h1>Testing failover</h1>

<p>After running the setup event again we&rsquo;re now ready to test our failover. You&rsquo;ll see that 54.173.141.243 is
 assigned to neptune initially:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxyfailover/stage1.png"></p>

<p>After stopping neptune 54.173.141.243 is still assigned to it because the failover hasn&rsquo;t triggered yet:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxyfailover/stage2.png"></p>

<p>Once the failover triggers 54.173.141.243 is now assigned to saturn:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxyfailover/stage3.png"></p>

<p>Also the following notification is received:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxyfailover/stage4.png"></p>

<p>Saturn will retain the IP even if neptune is brought back online, unless it is manually reassigned or saturn fails.</p>

<h1>Discussion</h1>

<p><strong>Use of monit</strong></p>

<p><a href="http://mmonit.com/monit/">monit</a> is used on each instance to check that the primary IP is online. The
 OpsWorks agent itself uses monit and therefore it doesn&rsquo;t need to be installed on the instance. In the default OpsWorks
 configuration monit runs every 60 seconds. monit has a built in email alerting function, however in my opinion
 SNS is more manageable as alert recipients can easily be updated via the AWS console.</p>

<p><strong>Failover delay</strong></p>

<p>The monit configuration above specifies <code>for 3 cycles</code>, meaning that a failover won&rsquo;t be triggered unless
 3 consecutive monit runs fail. Therefore a failover could take about 4 minutes. This is an acceptable trade-off in most
 scenarios as a failover should be rare and you&rsquo;d rather avoid failing over unnecessarily for an issue that resolves itself
 within a minute or two. You can however remove the <code>for 3 cycles</code> line to failover immediately if you&rsquo;d prefer.</p>

<p><strong>Checking external IP</strong></p>

<p>To avoid the active instance attempting to failover to itself it first checks
 its IP against <code>http://checkip.amazonaws.com</code> when a failover occurs. An instance will only attempt to take over if the
 external IP returned isn&rsquo;t the primary IP. This also serves to verify the instance taking over has external connectivity,
 otherwise it might attempt to take over the IP when its own connectivity is causing the health check to fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisited: Retrieving Files From S3 Using Chef on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/01/03/revisited-retrieving-files-from-s3-using-chef-on-opsworks/"/>
    <updated>2015-01-03T09:13:42+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/01/03/revisited-retrieving-files-from-s3-using-chef-on-opsworks</id>
    <content type="html"><![CDATA[<p>One of my earliest and most popular posts is <a href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">Retrieving Files From S3 Using Chef on OpsWorks</a>.
 That posts uses the <a href="https://github.com/opscode-cookbooks/aws">Opscode AWS cookbook</a> which in turn uses the <a href="https://github.com/rightscale/right_aws">right_aws</a>
 gem. While this method is fine - particularly if you&rsquo;re not using OpsWorks - there are some situations where it&rsquo;s not ideal.</p>

<p>Recently I&rsquo;ve started using the aws-sdk gem directly which is bundled with the OpsWorks agent. The version at the time of
 writing is 1.53.0.</p>

<p>The advantages of this are:</p>

<ul>
<li>Support for <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html">IAM instance roles</a>,
meaning you don&rsquo;t have to pass AWS credentials via your custom JSON.</li>
<li>No dependencies on external cookbooks.</li>
<li>Will ordinarily be run at the compile stage, therefore you could download a JSON file, parse it, then use it to
generate resources if you wanted.</li>
</ul>


<p>The disadvantages are:</p>

<ul>
<li>It&rsquo;s not entirely clear, but my feeling is that the gems included with the OpsWorks agent aren&rsquo;t necessarily
part of the API &ldquo;contract&rdquo; provided by OpsWorks for cookbook developers. Therefore there is no guarantee that AWS
won&rsquo;t change the version or even remove it entirely without notice. I think it&rsquo;s unlikely that they&rsquo;ll remove the
aws-sdk gem or move to a version with compatibility breaking changes any time soon, but it&rsquo;s possible.</li>
<li>Less &ldquo;chef-like&rdquo; solution, although you could write your own chef resource to wrap it</li>
<li>If you&rsquo;re not using OpsWorks then the aws-sdk will create another dependency</li>
</ul>


<p>This blog post provides an example of how to use the bundled aws-sdk gem to download a file from S3 using IAM instance
 roles on OpsWorks.</p>

<!-- more -->


<h1>The IAM role</h1>

<p>Before starting you&rsquo;ll need to grant permissions to access your S3 bucket to the IAM role used by your instances. You can find
 and edit EC2 instance roles under Identity &amp; Access Management > Roles. The default role will probably be called something
 like <code>aws-opsworks-ec2-role</code>.</p>

<p>If you need to find the role it unfortunately isn&rsquo;t listed in OpsWorks on the instance view page, but you can either
 find it in the instance properties within the EC2 console:</p>

<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_revisited/ec2_role.png"></p>

<p>Or in the security tab of the layer settings:</p>

<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_revisited/layer_security.png"></p>

<p>Add a new policy to this role granting permissions to access your desired S3 bucket, for example:</p>

<figure class='code'><figcaption><span>s3_access_policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;s3:Get*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;s3:List*&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt0123456789&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::my-bucket/*&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to replace <code>my-bucket</code> with your bucket name. This will grant access to all the Get and List prefixed operations
 for all objects in the bucket, but you can use a more specific policy if desired.</p>

<h1>The recipe</h1>

<p>I won&rsquo;t go into the details of creating a custom cookbook, S3 bucket or adding recipes to lifecycle events as these steps
 were covered in my <a href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">earlier post</a>. Given that
 we won&rsquo;t be using the OpsCode AWS cookbook you can skip adding that to your Berskfile.</p>

<figure class='code'><figcaption><span>mycookbook/recipes/myrecipe.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Set bucket and object name</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">buckets</span><span class="o">[</span><span class="s1">&#39;my-bucket&#39;</span><span class="o">].</span><span class="n">objects</span><span class="o">[</span><span class="s1">&#39;my/object.txt&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Read content to variable</span>
</span><span class='line'><span class="n">file_content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Log output (optional)</span>
</span><span class='line'><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">file_content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write content to file</span>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;/tmp/myobject.txt&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s1">&#39;0755&#39;</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">file_content</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you run <code>mycookbook::myrecipe</code> you should find <code>/tmp/myobject.txt</code> is populated with the content of <code>my/object.txt</code>
 in the <code>my-bucket</code> bucket.</p>

<p>Note that as I mentioned earlier the aws-sdk version at the time of writing is 1.53.0, therefore remember to refer to the
<strong><a href="http://docs.aws.amazon.com/AWSRubySDK/latest/frames.html">SDK version 1 docs</a></strong> rather than the version 2 docs which will
 use the <code>Aws.</code> namespace in examples (note the capitalization).</p>

<h1>Reading and parsing a JSON file to use in a recipe</h1>

<p>Here&rsquo;s an example which downloads a JSON file, parses it then uses it to create resources.</p>

<figure class='code'><figcaption><span>fruits.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;fruit&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;apples&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;oranges&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;bananas&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>mycookbook/recipes/myrecipe.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Set bucket and object name</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">buckets</span><span class="o">[</span><span class="s1">&#39;test-site-config&#39;</span><span class="o">].</span><span class="n">objects</span><span class="o">[</span><span class="s1">&#39;fruits.json&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Read content to variable</span>
</span><span class='line'><span class="n">file_content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Log output (optional)</span>
</span><span class='line'><span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">file_content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">fruits</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">file_content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">fruits</span><span class="o">[</span><span class="s1">&#39;fruit&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">fruit</span><span class="o">|</span>
</span><span class='line'>  <span class="n">log</span> <span class="s2">&quot;I have </span><span class="si">#{</span><span class="n">fruit</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">level</span> <span class="ss">:info</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In your OpsWorks run logs you should see something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[2015-01-03T06:18:10+00:00] INFO: Processing log[I have apples] action write (mycookbook::myrecipe line 17)
</span><span class='line'>[2015-01-03T06:18:10+00:00] INFO: I have apples
</span><span class='line'>[2015-01-03T06:18:10+00:00] INFO: Processing log[I have oranges] action write (mycookbook::myrecipe line 17)
</span><span class='line'>[2015-01-03T06:18:10+00:00] INFO: I have oranges
</span><span class='line'>[2015-01-03T06:18:10+00:00] INFO: Processing log[I have bananas] action write (mycookbook::myrecipe line 17)
</span><span class='line'>[2015-01-03T06:18:10+00:00] INFO: I have bananas</span></code></pre></td></tr></table></div></figure>


<h1>Compile vs. Converge time</h1>

<p>Chef runs in two stages, the compile stage then the converge stage. In the first recipe the S3 code is run at compile
 time because it is not part of a resource, but actually writing it to a file
 using the file resource takes place at converge time.</p>

<p>Therefore in the following scenario:</p>

<figure class='code'><figcaption><span>mycookbook/recipes/myrecipe.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s3</span> <span class="o">=</span> <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">s3</span><span class="o">.</span><span class="n">buckets</span><span class="o">[</span><span class="s1">&#39;my-bucket&#39;</span><span class="o">].</span><span class="n">objects</span><span class="o">[</span><span class="s1">&#39;my/object.txt&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">file_content</span> <span class="o">=</span> <span class="n">obj</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'><span class="n">file</span> <span class="s1">&#39;/tmp/myobject.txt&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="n">file_content</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">exists</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">file?</span><span class="p">(</span><span class="s1">&#39;/tmp/myobject.txt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span> <span class="s2">&quot;File exists: </span><span class="si">#{</span><span class="n">exists</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">level</span> <span class="ss">:info</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The log will report <code>File exists: false</code>, as the file resource hasn&rsquo;t been executed by the time <code>File.file?</code> is called.</p>

<p>The consequences of this should generally be insignificant given that usually you&rsquo;d want the S3 file to be downloaded first,
 however if you need to delay code to converge time for any reason you can simply wrap it in a <a href="https://docs.chef.io/resource_ruby_block.html">ruby_block resource</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 2015 AWS Wish List]]></title>
    <link href="http://hipsterdevblog.com/blog/2015/01/01/my-2015-aws-wish-list/"/>
    <updated>2015-01-01T22:53:23+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2015/01/01/my-2015-aws-wish-list</id>
    <content type="html"><![CDATA[<p>As a new year dawns it occurred to me how much AWS functionality I now use heavily wasn&rsquo;t available only a year ago.
 Almost every day I check the <a href="http://aws.amazon.com/blogs/aws/">AWS blog</a> to find some new feature is available. This
 got me thinking about the functionality I&rsquo;d like to see in 2015, so I put together a list of my top 5.</p>

<p>I&rsquo;m sure the engineers at AWS are already working on some (if not most) of these, but if not then hopefully someone sees
 this post and gets a great idea!</p>

<!-- more -->


<h1>#1 - EIPs for ELB</h1>

<p>Elastic load balancer (ELB) doesn&rsquo;t support static IPs, instead you must CNAME your domain to the hostname for your ELB or
 use the special alias record in Route53. I understand why they preferred to design it this way - it&rsquo;s much easier to load
 balance the load balancing instances via DNS rather than via network routing. This solution works fine in the majority of scenarios,
 but unfortunately it makes things much more difficult if you need to give out a static IP to your customers for them to use
 in their A records.</p>

<p>Being able to assign an Elastic IP (EIP) to an ELB would eliminate a huge barrier for a lot of people. Scaling could be addressed
 with anycast to provide a virtual IP which addresses multiple load balancing instances. This would also help ELB to compete
 against <a href="http://www.rackspace.com.au/cloud/load-balancers/compare">rackspace</a> and <a href="https://cloud.google.com/compute/docs/load-balancing/http/cross-region-example">Google Cloud</a>
 which both offer this feature.</p>

<h1>#2 - A managed scheduling / timer service</h1>

<p>Invoking global jobs on a schedule can be quite a hassle in distributed systems. On one hand you can&rsquo;t have a CRON job running
 on every instance because then you&rsquo;ll end up with multiple invocations, but on the other hand if you have just one instance
 that handles scheduling you need to ensure the job is triggered even if that instance fails or is replaced.</p>

<p>One solution is to use AWS Data Pipeline to start an instance and invoke a command that sends a message to SNS,
although starting an EC2 instance just to do this is quite expensive. Also, the minimum period is 15 minutes, and you don&rsquo;t have control
 down to the minute or second as to exactly when your task will be invoked.</p>

<p>A managed scheduling service that allows you to submit messages to an SNS topic would be great! SNS already supports
 message fan-out to queues and delivery retires so the only component missing is something to submit those messages
 at a specified time. Azure has a <a href="http://azure.microsoft.com/en-us/services/scheduler/">similar solution</a> already.</p>

<h1>#3 - Search for CloudWatch logs</h1>

<p>CloudWatch logs provides a convenient way to manage logs across multiple instances without having to leave the AWS ecosystem.
 It&rsquo;s still a new product, but it feels like it hasn&rsquo;t yet achieved its full potential.</p>

<p>Currently you can store logs and create metrics based on certain patterns appearing in your logs, but there&rsquo;s no search
other than the ability to filter by time!
 You can&rsquo;t archive your logs to S3 for external processing either, and the GetLogEvents API function is limited to 10,000
 logs per request and can only be called 10 times/second.</p>

<p>These limitations mean most users will probably have to use a second log aggregation service to cater for ad-hoc
 log searches and extraction. However, a search function would make a huge difference and enable CloudWatch to compete
 with the likes of Logentries and Loggly. Even integration with CloudSearch would be enough for users
 who have a large enough log volume to justify a dedicated search instance.</p>

<h1>#4 - HTTP endpoint triggers for Lambda functions</h1>

<p>It&rsquo;s easy to think of opportunities where the new Lambda service could help &ldquo;glue&rdquo; different systems together. Unfortunately
 we&rsquo;re currently limited by how a Lambda function can be invoked - it either has to be done manually via the AWS API
 or via S3, DynamoDB or Kinesis events.</p>

<p>Lambda would become significantly more useful if functions could be triggered asynchronously with a simple REST endpoint
 without authentication. Obviously a lack of authentication isn&rsquo;t ideal, but it&rsquo;d make it much easier to integrate
 with 3rd parties that support web-hook functionality. Imagine being able to trigger Lambda functions
 using a BitBucket commit hook, or a stored email notification from Mailgun.</p>

<h1>#5 - Zone tagging in Route53</h1>

<p>Resource tags can be used in IAM policies to restrict users to particular tags. This is useful when creating accounts
 that can only access EC2 instances tagged as belonging to a specific department for example.</p>

<p>Users who manage DNS on behalf of some of their customers via Route53 would appreciate giving their customers
 direct access via an IAM account to manage their zones directly. This would help to cut down on support costs
 associated with making DNS updates on behalf of the customer due to changes unrelated to the product they provide.</p>

<p>You can currently restrict IAM accounts to a list of zone IDs, but maintaining this list is impractical when some customers
 have dozens of zones and several users that change regularly. It would make things much easier if zones could be tagged
 with a particular customer, then accounts can be limited to zones tagged with that customer.</p>

<h1>Worth a mention</h1>

<p>Here are some other features I&rsquo;d love to see but didn&rsquo;t make it into my top 5.</p>

<p><strong>Rolling deployments for OpsWorks</strong> - ElasticBeanstalk and CodeDeploy both support rolling deployments, it&rsquo;s a shame
 OpsWorks is the odd one out!</p>

<p><strong>Trigger Lambda functions with SQS and SNS</strong> - Being able to process SQS and SNS messages with Lambda would be great too,
 although if you could trigger a Lambda function with a HTTP endpoint then you could subscribe that to SNS instead.</p>

<p><strong>HTTP request routing via ELB</strong> - I can live without this, but many users would find it useful to route certain paths
 to different sets of back end instances. <a href="https://cloud.google.com/compute/docs/load-balancing/http/content-based-example">Google Cloud</a>
 supports this already.</p>

<p>So, what&rsquo;s on your wish list?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Per Application Metrics With CloudWatch Logs and OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks/"/>
    <updated>2014-12-21T10:53:24+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks</id>
    <content type="html"><![CDATA[<p><a href="http://aws.amazon.com/about-aws/whats-new/2014/07/10/introducing-amazon-cloudwatch-logs/">CloudWatch logs</a> is a cheap and
 easy to set up centralised logging solution. At the moment it lacks several valuable features such as a convenient way
 to search logs, however it does an <em>excellent</em> job at providing graphing and alerting on aggregated metrics pulled from
 ingested log data. An obvious application for this is to monitor HTTP server statistics to provide graphs of overall
 request rates, response sizes, and error rates.</p>

<p><a href="http://aws.amazon.com/opsworks/">OpsWorks</a> makes it easy to orchestrate a fleet of EC2 instances serving multiple applications
 (as oppose to <a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> which only hosts a single application). Apache is
 the default HTTP server for most OpsWorks layer types.</p>

<p>This post demonstrates how to setup CloudWatch logs for Apache access logs on OpsWorks, then create custom CloudWatch
 metrics for an individual OpsWorks application to graph the HTTP request rate.</p>

<!-- more -->


<h1>Installing the CloudWatch agent with Chef to monitor Apache logs</h1>

<p>The first step is to install the CloudWatch agentusing a custom recipe. These instructions are based off <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartChef.html">the AWS documentation</a>
 so <strong>follow those steps to configure your IAM instance role first</strong>.</p>

<p>Create the following files in your custom cookbooks repository, you can name the custom recipe anything you like but
 in this example I&rsquo;ve named it <code>myrecipe</code>.</p>

<figure class='code'><figcaption><span>myrecipe/recipes/logging.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">template</span> <span class="s2">&quot;/tmp/cwlogs.cfg&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;cwlogs.cfg.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;/opt/aws/cloudwatch&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/opt/aws/cloudwatch/awslogs-agent-setup.py&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0755&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;Install CloudWatch Logs agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/opt/aws/cloudwatch/awslogs-agent-setup.py -n -r us-east-1 -c /tmp/cwlogs.cfg&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="nb">system</span> <span class="s2">&quot;pgrep -f aws-logs-agent-setup&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>myrecipe/templates/default/cwlogs.cfg.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">[general]</span>
</span><span class='line'><span class="x"># Path to the AWSLogs agent&#39;s state file. Agent uses this file to maintain</span>
</span><span class='line'><span class="x"># client side state across its executions.</span>
</span><span class='line'><span class="x">state_file = /var/awslogs/state/agent-state</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">[</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-http-access]</span>
</span><span class='line'><span class="x">datetime_format = [%Y-%m-%d %H:%M:%S]</span>
</span><span class='line'><span class="x">log_group_name = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:name</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">-http-access</span>
</span><span class='line'><span class="x">file = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/*-access.log</span>
</span><span class='line'><span class="x">log_stream_name = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:instance</span><span class="o">][</span><span class="ss">:hostname</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The significant line is <code>file = &lt;%= node[:apache][:log_dir] %&gt;/*-access.log</code> which
 sets the log location to the Apache HTTP access logs.</p>

<p>Next, add this recipe to the setup lifecycle event of your OpsWorks layer:</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/logrecipe.png"></p>

<h1>Including application in Apache access logs</h1>

<p>The other change we need to make is to include the application name in the Apache access logs, otherwise we won&rsquo;t
 be able to filter by application when creating a logging metric in CloudWatch.</p>

<p>To do this you need to override the Apache vhost template in the OpsWorks cookbooks. The recipe containing this template
 will depend on the application type, for example it&rsquo;s located in <code>mod_php5_apache2/templates/default/web_app.conf.erb</code> or
<code>passenger_apache2/templates/default/web_app.conf.erb</code> for PHP and Ruby applications respectively.</p>

<p>In this example we&rsquo;ll assume a PHP application, so create the following file in your custom cookbooks repository:</p>

<figure class='code'><figcaption><span>mod_php5_apache2/templates/default/web_app.conf.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;VirtualHost *:80&gt;</span>
</span><span class='line'><span class="x">  ServerName </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">empty?</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias </span><span class="cp">&lt;%</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="cp">%&gt;&lt;%=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span> <span class="cp">%&gt;</span><span class="x"> </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogFormat &quot;%h %l %u %t \&quot;%r\&quot; </span><span class="err">%&gt;</span><span class="x">s %b \&quot;%{Referer}i\&quot; \&quot;%{User-agent}i\&quot; \&quot;</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">\&quot;&quot; combinedwithapp</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogLevel </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_level</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ganglia.log ganglia</span>
</span><span class='line'>
</span><span class='line'><span class="x">  FileETag none</span>
</span><span class='line'>
</span><span class='line'><span class="x">  RewriteEngine On</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  RewriteLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@application_name</span> <span class="cp">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@environment</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &quot;</span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="x">&quot; &quot;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="x">&quot;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/(.*)$ </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:deploy</span><span class="o">][</span><span class="vi">@application_name</span><span class="o">][</span><span class="ss">:ssl_support</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;VirtualHost *:443&gt;</span>
</span><span class='line'><span class="x">  ServerName </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">empty?</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias </span><span class="cp">&lt;%</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="cp">%&gt;&lt;%=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span> <span class="cp">%&gt;</span><span class="x"> </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  SSLEngine on</span>
</span><span class='line'><span class="x">  SSLProxyEngine on</span>
</span><span class='line'><span class="x">  SSLCertificateFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.crt</span>
</span><span class='line'><span class="x">  SSLCertificateKeyFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.key</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:ssl_certificate_ca</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SSLCACertificateFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.ca</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnvIf User-Agent &quot;.*MSIE.*&quot; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogLevel </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_level</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl-ganglia.log ganglia</span>
</span><span class='line'>
</span><span class='line'><span class="x">  FileETag none</span>
</span><span class='line'>
</span><span class='line'><span class="x">  RewriteEngine On</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  RewriteLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@application_name</span> <span class="cp">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@environment</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &quot;</span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="x">&quot; &quot;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="x">&quot;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/(.*)$ </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration is based on the <a href="https://github.com/aws/opsworks-cookbooks/blob/release-chef-11.10/mod_php5_apache2/templates/default/web_app.conf.erb">default template</a> so
 it may be best to start with the latest template file on GitHub.</p>

<p>Note the following lines which are relevant:</p>

<p><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\" \"&lt;%= @params[:name] %&gt;\"" combinedwithapp</code></p>

<p>This is creating a new log format called <code>combinedweithapp</code>, it&rsquo;s the same as the <code>combined</code> format except the app name
 is appended to the end.</p>

<p><code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-access.log combinedwithapp</code>
<code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-ssl-access.log combinedwithapp</code></p>

<p>This is telling both the HTTP and HTTPS access logs to use the new custom format.</p>

<h1>Testing the logging</h1>

<p>If you now launch an instance, wait for it to come online then load the App a few times you should begin to see logs
 appearing in CloudWatch after a few minutes.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/logsappearing.png"></p>

<p>This indicates that the CloudWatch agent is working, you should also be able to see the app name. You&rsquo;ll notice
 that logs are nicely categorized by stack and instance too.</p>

<h1>Creating a metric to monitor HTTP requests by App</h1>

<p>How that we have Apache access logs being sent to CloudWatch including the App name we can setup a metric to monitor
 the number of requests made to this application.</p>

<p>From the &ldquo;Log Groups&rdquo; screen in CloudWatch, tick the appropriate log group (<code>cw-logs-test-http-access</code> in this example) and then
 click &ldquo;Create Metric Filter&rdquo; at the top.</p>

<p>Enter the following Filter Pattern:</p>

<p><code>[host, logName, user, timestamp, request, statusCode, size, referer, useragent, app=app1, ...]</code></p>

<p>Note that you should replace app1 with the name of the app you&rsquo;re interested in.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/metricfilterapp.png"></p>

<p>You can test your filter pattern, otherwise proceed by clicking &ldquo;Assign Metric&rdquo;.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/metric-name.png"></p>

<p>Give your new metric an appropriate namespace (group) and name. As we&rsquo;re only interested in the number of requests the
 &ldquo;Metric Value&rdquo; is 1 (1 per request).</p>

<h1>Viewing the results</h1>

<p>Once you&rsquo;ve created the metric you won&rsquo;t see data until more logs matching that criteria occur, so either generate some
 traffic on your app or wait for some to come in. There can be a delay of about 5 minutes for metrics data to appear.</p>

<p>After data has been recorded into the metric you should be able to find that metric either by searching the metrics list
 or from the &ldquo;Custom Metrics&rdquo; drop down which will appear after you refresh the page.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/request_graph.png"></p>

<p>Change the aggregation type from &ldquo;average&rdquo; to &ldquo;sum&rdquo; and you should now see a nice graph of the requests going to your app
 over time. You can change the interval to 1 minute to get the most detailed graph.</p>

<h1>Other metrics</h1>

<p>In this example we&rsquo;re only interested in the number of HTTP requests, but you can easily create additional metrics for things
 like 4xx errors or response size (to get an estimate of bandwidth usage by app).</p>

<p>To graph 4xx errors use a Filter Pattern like this (note the statusCode field):</p>

<p><code>[host, logName, user, timestamp, request, statusCode=4*, size, referer, useragent, app=app1, ...]</code></p>

<p>To graph response size enter <code>$size</code> instead of 1 as the &ldquo;Metric Value&rdquo; when creating the metric.</p>

<p>To monitor multiple apps simply create additional sets of your custom metrics, each with a different app filter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Far Can You Go With HAProxy and a t2.micro]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/19/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro/"/>
    <updated>2014-12-19T09:56:13+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/19/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro</id>
    <content type="html"><![CDATA[<p>Load balancing is critical to any scalable and highly available cloud application. The obvious choice for load balancing
 on AWS is <a href="http://aws.amazon.com/elasticloadbalancing/">ELB</a>, but unfortunately if you require features such as a static
 IP or URL based request routing then ELB isn&rsquo;t an option.</p>

<p><a href="http://www.haproxy.org/">HAProxy</a> is a great solution that performs extremely well even on small EC2 instance types. It
 is also a supported layer type in <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-load.html">OpsWorks</a>
 which makes it the obvious choice for OpsWorks users.</p>

<p>It&rsquo;s well known that several large application servers can be served by just a single small HAProxy server, but what is
the definition of small? How about the smallest EC2 instance on offer - the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">t2.micro</a>?
 This blog post puts HAProxy on a t2.micro to the test using <a href="https://loader.io/">loader.io</a> to determine just how many requests/second it
 can handle and whether CPU or network is the limiting factor.</p>

<!-- more -->


<h1>Method</h1>

<p>To create a test environment I set up an OpsWorks stack with a HAProxy and PHP layer.
I then deployed the following file:</p>

<figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">usleep</span><span class="p">(</span><span class="mi">300000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">Lorem ipsum dolor sit amet, consectetur ... [continues for ~50kb]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is intended to emulate a fairly typical application request from the perspective of the load balancer
(ie. takes about 300ms to generate and the resulting document is about 50kb in size). Having a fixed page generation
time is convenient as any increase in the overall response time can be assumed to be due to the load balancer.</p>

<p>I also created a <code>status.php</code> which does nothing but return a 200 response to serve as the health check.</p>

<p>I then launched the following instances:</p>

<ul>
<li>1 x t2.micro to the HAProxy layer</li>
<li>4 x c3.large to the PHP App Server layer</li>
</ul>


<p>At no time during my testing did the application servers show any signs of excessive load, however I wanted to ensure
 that there was ample excess capacity and that the load balancer would be the bottleneck in my tests.</p>

<p>The only changes I made to the standard OpsWorks configuration was to install NewRelic, and raise the <code>node[:haproxy][:maxcon_factor_php_app]</code> value to 50.</p>

<p>I used <a href="https://loader.io/">loader.io</a> to generate the load and produce these nice graphs.</p>

<h1>Results</h1>

<h2>100 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100persecloader.png"></p>

<h3>NewRelic</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100nrcpu.jpg"></p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100nrnetwork.png"></p>

<p>As you can see, at 100 req/second CPU load is less than 2%, although combined network throughput is ~75Mb/s.
  No requests timeout and response times are stable.</p>

<h2>1000 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000loader.png"></p>

<p>At 1000 req/second performance has definitely degraded. 10521 requests timeout while 157726 succeed and there is
 significant fluctuation in response times.</p>

<h3>HAProxy stats</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000haproxystats.png"></p>

<p>The HAProxy stats suggests requests aren&rsquo;t being queued by HAProxy, and the application servers are barely at 5% CPU.</p>

<h3>NewRelic</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000nrcpu.jpg"></p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000nrnetwork.jpg"></p>

<p>This time CPU is higher, but still only ~7% - however combined network throughput is close to 40k packets/second and 400 MB/s.</p>

<p>Clearly network capacity is the limiting factor.</p>

<h2>Finding the limit</h2>

<p>Using the previous result it seems conservatively the outbound network capacity limit is about 180 Mb/s. If we assume each
request is about 50 kB the approximate limit should be <code>(180 * 1024 * 1024) / (50 * 1024 * 8) = 460 req/second</code>.</p>

<h3>460 req/second</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/460loader.png"></p>

<p>At 460 req/second response times are mostly a flat ~300 ms, except for two spikes. I attribute this to TCP congestion avoidance
 as the traffic approaches the limit and packets start to get dropped. After dropped packets are detected the clients reduce their
 transmission rate, but eventually the transmission rate stabilizes again just under the limit. Only 1739 requests timeout and 134918 succeed.</p>

<h3>400 req/second</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/loader400.png"></p>

<p>Testing again at 400 req/second which should be well within the limit we can see stable response times with no spikes or timeouts.</p>

<h1>A note about t2 instances and CPU credits</h1>

<p>t2-type instances have <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">variable CPU performance</a>, limited by CPU credits which allow the instance to have increased CPU
 usage for a limited period of time. The t2.micro instance type can use up to 10% CPU consistently without consuming CPU credits.</p>

<p>Ordinarily variable CPU performance wouldn&rsquo;t be desirable for a load balancer, however HAProxy is very efficient in terms
 of CPU and these tests show that CPU usage rarely exceeds 10% before being limited by network capacity.</p>

<p>Below is a graph of CPU credit usage and balance over the course of my tests:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/cpucredit.png"></p>

<p>As you can see the trend is generally positive, so if you&rsquo;re not running at the limit of your capacity the whole time
 you&rsquo;d probably never run out of CPU credits.</p>

<h1>What about small responses?</h1>

<p>Previously I was trying to emulate a relatively large response body, such as a full HTML page. But what if you&rsquo;re
 trying to load balance something like an API which only returns short JSON strings, would networking still be the limiting factor?</p>

<p>I also ran some tests using this scenario:</p>

<figure class='code'><figcaption><span>api.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">{&quot;hello&quot;: &quot;world&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I tested this with 1000 req/sec HAProxy health checks began to fail on the app servers even though CPU
 usage was low, this caused response times to jump and fluctuate:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/haproxystats1ksmall.png"></p>

<p>Given that my aim is to benchmark HAProxy rather than the app servers I didn&rsquo;t bother to debug this and added two additional
 app servers instead.</p>

<p>After adding the servers I was still experiencing wild fluctuations and timeouts:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1k6instances.png"></p>

<p>Having said that, at 460 req/second it does seem significantly more stable than the larger response size:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/460small.png"></p>

<p>It seems that the limit of the t2.micro is around 500 req/second even for small responses.</p>

<h1>What about a c3.large HAProxy instance?</h1>

<p>While the focus of this blog post is on the t2.micro, I couldn&rsquo;t help my curiosity and decided to try a c3.large HAProxy instance
 with 1000 req/second. As you can see there&rsquo;s no such problems:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/c3large1000.png"></p>

<p>I did see some timeouts at 1500 req/second, although I didn&rsquo;t bother to create a HVM instance with enhanced networking enabled.
 The networking performance of the c3.large is described as &ldquo;moderate&rdquo; as oppose to &ldquo;low&rdquo; in the case of the t2, so an increase of
 more than double between low and moderate without enhanced networking isn&rsquo;t bad.</p>

<h1>Conclusion</h1>

<p>You should be safe to run a t2.micro for your HAProxy instance if you&rsquo;re performing less than 400 req/second and 180 Mb/second.
 If you&rsquo;re likely to be running close to this limit most of the time you may want to consider running a larger t2 instance to avoid running
 out of CPU credits.</p>

<p>If you need to go larger then a c3.large should be good for 1k/second, although I suspect an m3.medium would probably perform similarly too.</p>

<p>In any case, you&rsquo;re probably going to run out of network capacity before you hit CPU limits regardless of what instance you choose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Functions for AWS Lambda Using NPM and Grunt]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/07/writing-functions-for-aws-lambda-using-npm-and-grunt/"/>
    <updated>2014-12-07T11:51:16+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/07/writing-functions-for-aws-lambda-using-npm-and-grunt</id>
    <content type="html"><![CDATA[<p>AWS <a href="http://aws.amazon.com/blogs/aws/run-code-cloud/">recently announced</a> a new compute product called <a href="http://aws.amazon.com/lambda/">Lambda</a>
 allowing users to run Node.js functions on full managed infrastructure while paying only for the actual compute time
 used.</p>

<p><a href="https://www.npmjs.org/">NPM</a> is the primary package manager for Node.js, and while Lambda does not provide explicit
 NPM support it is possible to bundle NPM packages with your function to leverage 3rd party modules.</p>

<p><a href="http://gruntjs.com/">Grunt</a> is a task runner for JavaScript, allowing easy automation of project tasks such as building
 and packaging. Recently I <a href="https://github.com/Tim-B/grunt-aws-lambda">released a Grunt plugin</a> to assist in testing Lambda
 functions and packaging functions including NPM dependencies.</p>

<p>This blog post provides an example of how to use NPM, Grunt and the grunt-aws-lambda plugin to create a Lambda function
 which will scrape a web page and save a list of links within that page to S3 using the cheerio NPM package.</p>

<!-- more -->


<h1>Before starting</h1>

<p>It is assumed that you have Node.js (and NPM) installed on your system. Also, you should have <code>grunt-cli</code> installed
 globally.</p>

<p>This guide also assumes you have AWS credentials configured on your system. These will be used to both test the function
 and upload it to Lambda. The easiest way to install the <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS CLI</a> and run <a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">aws configure</a>.
 Afterwards make sure ~/.aws/credentials is populated.</p>

<p>For more information on the required AWS IAM permissions <a href="https://github.com/Tim-B/grunt-aws-lambda#aws-permissions">read here</a>, you will also need whatever permissions are required to invoke your function (eg. access to S3 buckets).</p>

<h1>Creating your project</h1>

<p>First, create a directory for your project and run <code>npm init</code>. After following the prompts you should end up with a
 package.json, open this file and edit values as necessary. Also add <code>grunt</code> and <code>grunt-aws-lambda</code> to the devDependencies.
 Don&rsquo;t forget to update the version numbers if new releases are made in the future.</p>

<p>Your package.json should looks something like the following.</p>

<figure class='code'><figcaption><span>package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;link-scraper&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Scrapes a page and saves links in a HTML page to S3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.*&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;grunt-aws-lambda&quot;</span><span class="p">:</span> <span class="s2">&quot;0.3.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;BSD&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a Gruntfile.js with the following:</p>

<figure class='code'><figcaption><span>Gruntfile.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">grunt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-aws-lambda&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">lambda_invoke</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">lambda_deploy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">function</span><span class="o">:</span> <span class="s1">&#39;link-scraper&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">lambda_package</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;deploy&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lambda_package&#39;</span><span class="p">,</span> <span class="s1">&#39;lambda_deploy&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create an index.js, .npmignore and event.json with the following:</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;webpage = &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;link-scraper complete.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.npmignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event.json
</span><span class='line'>Gruntfile.js
</span><span class='line'>dist
</span><span class='line'>*.iml</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>event.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;webpage&quot;</span><span class="p">:</span> <span class="s2">&quot;http://en.wikipedia.org/wiki/Main_Page&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>npm install</code></p>

<p>Then run <code>grunt lambda_invoke</code>, you should receive the following output:</p>

<figure class='code'><figcaption><span>lambda_invoke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_invoke:default" (lambda_invoke) task
</span><span class='line'>
</span><span class='line'>webpage = http://en.wikipedia.org/wiki/Main_Page
</span><span class='line'>
</span><span class='line'>Message
</span><span class='line'>-------
</span><span class='line'>link-scraper complete.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Congratulations, you&rsquo;ve created a Lambda function and executed it locally!</p>

<h1>Using NPM packages with AWS Lambda</h1>

<p>For most nontrivial functions you&rsquo;re going to want to leverage 3rd party libraries. The grunt plugin makes using NPM packages
 with Lambda easy.</p>

<p>In this example we&rsquo;re going to use the following NPM packages:</p>

<ul>
<li><a href="https://www.npmjs.org/package/request">request</a> - Make a HTTP request to download the target page</li>
<li><a href="https://www.npmjs.org/package/cheerio">cheerio</a> - Query the DOM of the page we download</li>
<li><a href="https://www.npmjs.org/package/moment">moment</a> - Format the current time</li>
<li><a href="https://www.npmjs.org/package/mustache">mustache</a> - Generate our HTML page using a template file</li>
<li><a href="https://www.npmjs.org/package/aws-sdk">aws-sdk</a> - Access the AWS API to upload the page to S3</li>
</ul>


<p>As the aws-sdk is already available in the Lambda environment we&rsquo;re only going to include it in the devDependencies, the
 rest belong in the regular dependencies.</p>

<p>Update your package.json file with the following:</p>

<figure class='code'><figcaption><span>package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">...</span>
</span><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cheerio&quot;</span><span class="p">:</span> <span class="s2">&quot;0.18.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;2.49.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mustache&quot;</span><span class="p">:</span> <span class="s2">&quot;0.8.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;moment&quot;</span><span class="p">:</span> <span class="s2">&quot;2.8.4&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;devDependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-aws-lambda&quot;</span><span class="p">:</span> <span class="s2">&quot;0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;aws-sdk&quot;</span><span class="p">:</span> <span class="s2">&quot;2.0.23&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;bundledDependencies&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;cheerio&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;request&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mustache&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;moment&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note that you must include any packages which are to be included in the Lambda package within the bundledDependencies list</strong>.</p>

<p>Now run <code>npm install</code> again to install these new packages.</p>

<h1>Developing a Lambda function using NPM packages</h1>

<p>Now we can actually develop the Lambda function in index.js, below is an example of a Lambda function to download
 the page provided in the webpage attribute of the event, extract all the links, convert them to absolute URLs, then
 generate a list of these links from a mustache template and upload it to S3.</p>

<p>Update your index.js with the following, don&rsquo;t forget to replace <code>mybucket</code> with your actual destination bucket:</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cheerio&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">apiVersions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">s3</span><span class="o">:</span> <span class="s1">&#39;2006-03-01&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// other service API versions</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">anchor</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">anchor</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">anchor</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">href</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">abs</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span> <span class="nx">href</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">text</span> <span class="o">=</span> <span class="nx">abs</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">new_item</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">text</span><span class="o">:</span> <span class="nx">text</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">url</span><span class="o">:</span> <span class="nx">abs</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">links</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">new_item</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">links</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">new_item</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">links</span><span class="o">:</span> <span class="nx">links</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">page</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">time</span><span class="o">:</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMMM Do YYYY, h:mm:ss a&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">view</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">s3_params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;mybucket&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">Key</span><span class="o">:</span> <span class="s1">&#39;links.html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">ContentType</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">Body</span><span class="o">:</span> <span class="nx">output</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">(</span><span class="nx">s3_params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>                <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;link-scraper complete.&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also create template.html which will be used to generate the page:</p>

<figure class='code'><figcaption><span>template.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>List of links on {{page}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>List of links on {{page}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {{#links}}
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{{url}}}&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>{{text}}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    {{/links}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>    Generated {{time}}
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run <code>grunt lambda_invoke</code> again the task should output:</p>

<figure class='code'><figcaption><span>lambda_invoke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_invoke:default" (lambda_invoke) task
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Message
</span><span class='line'>-------
</span><span class='line'>link-scraper complete.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Then, if we look in our target bucket there should be a file called links.html, if you view it in your browser you should see something like:</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/linkspage.png"></p>

<h1>Deploying to Lambda</h1>

<p>Before running the deploy task in grunt, go to the Lambda section of the AWS console and create a function which matches
 the name in the lambda_deploy section of your Gruntfile. In the example above the function name is <code>link-scraper</code>.</p>

<p>When creating the function select the &ldquo;Hello World&rdquo; template, as the code will be overwritten when we deploy a zip.</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/lambda-list.png"></p>

<p>If you&rsquo;ve added a deploy task to your Gruntfile as above you can now run <code>grunt deploy</code>, otherwise run both the lambda_package and lambda_deploy tasks with
 <code>grunt lambda_package lambda_deploy</code>.</p>

<p>After running that you should see something like:</p>

<figure class='code'><figcaption><span>lambda_deploy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_package:default" (lambda_package) task
</span><span class='line'>link-scraper@1.0.0 ../../../../../../tmp/1417936030856.854/node_modules/link-scraper
</span><span class='line'>Created package at dist/link-scraper_1-0-0_2014-11-7-17-7-10.zip
</span><span class='line'>
</span><span class='line'>Running "lambda_deploy:default" (lambda_deploy) task
</span><span class='line'>Uploading...
</span><span class='line'>Package deployed.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Now if you go to the AWS console you should be able to successfully invoke the uploaded task:</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/test_console.png"></p>

<p>After running you should see the date at the bottom of the generated links.html has been updated.</p>

<p>If for whatever reason you need to access the zip package which was uploaded you can find it under the dist directory of
 your project.</p>

<p>Congratulations, you&rsquo;ve now successfully deployed a Lambda function using NPM packages and Grunt! In future you can
 invoke this function manually, via another application using the SDK, or you could modify it to respond to one of the supported
 Lambda events such as an S3 Put event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 3: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-25T11:43:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 3 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the CodeDeploy deployment, deploying it to the configured OpsWorks stack and demonstrating the results of the integration.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Setting bucket policy and uploading deployment package</h1>

<p>Now we&rsquo;re ready to deploy a package from CodeDeploy.</p>

<p>For the purposes of this example the package will contain two files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appspec.yml
</span><span class='line'>app/index.php</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AppSpec</a> specifies that the contents of the
 App directory should be copied to the location of the placeholder OpsWorks deployment.</p>

<figure class='code'><figcaption><span>appspec.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">os</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>     <span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/www/my_app/public</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">CodeDeploy</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zip this up and upload it to your S3 bucket where you&rsquo;ll store your deployment packages.</p>

<p>If you haven&rsquo;t already done so, you will also need to apply the S3 bucket policy provided <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-deploy-revision.html">here</a>
 to allow the CodeDeploy role access to objects in this bucket:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/bucket_policy.png"></p>

<p>One important note is that you must also include the role ARN for your OpsWorks instances as above.</p>

<p>You can find the stack profile in the security settings of the layer:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/instanceprofile.png"></p>

<p>Then get the role ARN from your IAM console:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/iaminstanceprofile.png"></p>

<h1>Running CodeDeploy deployment</h1>

<p>We&rsquo;re now ready to deploy our application with CodeDeploy, head back to the CodeDeploy application you created earlier
 and create a new deployment from the zip you uploaded.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_deployment.png"></p>

<p>Click &ldquo;Deploy Now&rdquo; and wait for the deployment to conclude.</p>

<p>Should your deployment fail, click &ldquo;View All Instances&rdquo; > &ldquo;View Events&rdquo; beside an instance and click &ldquo;View Logs&rdquo; beside the failed step.</p>

<h2>Viewing your application</h2>

<p>Your application should now successfully be deployed to your OpsWorks instances. If you view the application in your
 browser you should see your deployment.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/complete.png"></p>

<h2>Caveats - Launching a new instance</h2>

<p>Unfortunately it seems CodeDeploy currently only supports automatic deployments for new instances when they&rsquo;re in
 an autoscaling group. OpsWorks only supports its own load and time based instance functionality rather than
 using autoscaling groups, and therefore you&rsquo;ll have to manually trigger a deployment after a new instance comes online
 and before you place it under your load-balancer. You may wish for your recipes to cause the load-balancer health
 check to fail by default, then have a separate recipe which enables the health check to pass which you can run manually
 once you&rsquo;ve run a deployment after a new instance has been launched.</p>

<p>Alternatively you could use your configure recipe to trigger a deployment automatically using the CodeDeploy API,
 however you would need to know which specific applications are relevant to the instance.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-24T11:43:29+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 2 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the OpsWorks Chef recipes to deploy your application via CodeDeploy.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Installing CodeDeploy agent via Chef</h1>

<p>Next we need to write a custom chef recipe to install the CodeDeploy agent and perform our desired configuration.</p>

<p>Checkout your cookbooks repository and create the following files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Berksfile
</span><span class='line'>myrecipe/metadata.rb
</span><span class='line'>myrecipe/recipes/agent-install.rb
</span><span class='line'>myrecipe/recipes/vhost.rb
</span><span class='line'>myrecipe/templates/default/myapp_vhost.erb</span></code></pre></td></tr></table></div></figure>


<p>Populate these files with the following:</p>

<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://supermarket.getchef.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(We won&rsquo;t be using <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/cookbooks-101-opsworks-berkshelf.html">Berkshelf</a>
 in this tutorial, however you&rsquo;ll probably want to create this file any way if you&rsquo;re planning to extend this tutorial
  with your own configuration)</p>

<figure class='code'><figcaption><span>myrecipe/metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="s1">&#39;myrecipe&#39;</span>
</span><span class='line'><span class="n">recipe</span> <span class="s1">&#39;myrecipe::agent-install&#39;</span><span class="p">,</span> <span class="s1">&#39;Fetches, installs, and starts the AWS CodeDeploy host agent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the code which downloads, installs and starts the CodeDeploy agent service:</p>

<figure class='code'><figcaption><span>myrecipe/recipes/agent-install.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/install&quot;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="s2">&quot;0744&quot;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;install_codedeploy_agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh auto&quot;</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;codedeploy-agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code creates a directory for the CodeDeploy to deploy to, creates the vhost and enables it.</p>

<figure class='code'><figcaption><span>myrecipe/recipes/vhost.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="s1">&#39;/srv/www/my_app/public/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;www-data&#39;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf.d/&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;myapp_vhost&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">path</span>  <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf&#39;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">link</span> <span class="s2">&quot;/etc/apache2/sites-enabled/my_app.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="s2">&quot;/etc/apache2/sites-available/my_app.conf&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a standard Apache vhost configuration based on the default OpsWorks template:</p>

<figure class='code'><figcaption><span>myrecipe/templates/default/myapp_vhost.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> myapp.com
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/srv/www/my_app/public/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">/srv/www/my_app/public/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.svn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.git&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">LogLevel</span> <span class="k">info</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/apache2/my_app-error.log</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-access.log</span> combined
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-ganglia.log</span> ganglia
</span><span class='line'>
</span><span class='line'>  <span class="nb">FileETag</span> <span class="k">none</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/rewrite</span>*
</span><span class='line'>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/local</span>*
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this step you may also like to create additional recipes for other configuration tasks, such as installing dependencies
or configuring your HTTP server.</p>

<h1>Adding recipes and packages to layer via OpsWorks</h1>

<p>Once you&rsquo;ve committed and pushed your recipes, go to OpsWorks and add the agent recipe to the configure lifecycle event
of your application server layer. Also add <code>ruby2.0</code> and <code>awscli</code> to the OS packages.</p>

<p> <img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/recipes.png"></p>

<h1>Creating placeholder deployment</h1>

<p>Because OpsWorks doesn&rsquo;t perform certain default configuration tasks (such as creating a www-data group) until
 a deployment occurs it&rsquo;s easiest to create a placeholder OpsWorks deployment with a holding page which will be replaced
 by CodeDeploy. You could of course skip this step and manually configure everything via custom recipes.</p>

<p>In this instance we&rsquo;ll create a new repository for the placeholder which contains nothing but an index.php file containing
 a placeholder message.</p>

<figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">undergoing</span> <span class="nx">maintenance</span><span class="p">,</span> <span class="nx">please</span> <span class="k">try</span> <span class="nx">reloading</span> <span class="nx">the</span> <span class="nx">page</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create this deployment in OpsWorks:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/opsworksdeploy.png"></p>

<h1>Starting an instance</h1>

<p>You can now start an instance in OpsWorks. It usually takes at least 20 minutes to boot and execute the setup and configure
 recipes. After this has complete your instance should have a status of online:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/online.png"></p>

<p>You should also see the placeholder message when you visit the IP in a browser:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/holding.png"></p>

<p>This should also have installed and started the CodeDeploy agent.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-23T11:09:28+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>Amazon <a href="http://aws.amazon.com/blogs/aws/code-management-and-deployment/">recently announced</a> a new deployment service
called <a href="http://aws.amazon.com/codedeploy/">CodeDeploy</a>. <a href="http://aws.amazon.com/opsworks/">OpsWorks</a> is another application
 management product which provides excellent configuration management via <a href="https://www.getchef.com/">Chef</a>, however it
lacks the advanced deployment functionality of CodeDeploy. It therefore makes sense to integrate these two products,
delegating the configuration management to OpsWorks and the deployment functionality to CodeDeploy.</p>

<p>This is part 1 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section provides an introduction to OpsWorks and CodeDeploy, and the basic configuration required to get started.</p>

<!-- more -->


<h2>Why not just use OpsWorks?</h2>

<p>OpsWorks is a great product, but it lacks several key deployment features such as the ability to run rolling
 deployments and cancel an in-flight deployment.</p>

<h2>Why not just use CodeDeploy?</h2>

<p>While CodeDeploy does support the execution of configuration scripts in lifecycle events, these could easily become
 difficult to maintain if your configuration is complex. Also, the configuration might not belong to any specific
 application, and if you&rsquo;re running multiple applications per instance it might make sense to configure certain
 shared services on a per-server basis rather than per-application. OpsWorks is an excellent solution to these issues
 as it supports Chef and per-instance setup and configuration lifecycle events.</p>

<h1>Getting started</h1>

<p>To get started you&rsquo;ll need to set up an OpsWorks stack with a custom cookbook repository. The stack also must be created
 in a region where CodeDeploy is supported, such as North Virginia. If you&rsquo;re using a VPC don&rsquo;t forget to configure your
  VPC to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">allow external connectivity</a>.</p>

<p>My stack configuration is as follows, as you can see I&rsquo;ll be using Ubuntu 14.04, but the steps should be similar on
 Amazon linux.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/stack.png"></p>

<p>Also, create a layer for your application servers. For example I&rsquo;ve created a PHP App Server layer. Don&rsquo;t forget to
 enable &ldquo;Public IP addresses&rdquo; under the networking options.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/layer.png"></p>

<p>In this example I&rsquo;m also going to deploy from S3, rather than GitHub. Therefore I&rsquo;ll assume you have an S3 bucket created
to host the zip deployment packages.</p>

<h1>Creating a CodeDeploy Service Role</h1>

<p>You&rsquo;ll need to create a service role for CodeDeploy before proceeding, although if you&rsquo;ve already followed the &ldquo;Sample
Deployment&rdquo; wizard then you will probably have created one at the following step:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policywizard.png"></p>

<p>If you need to create one manually then you can <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html">follow these steps</a>
 to first create a role with the following policy:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policy.png"></p>

<p>Then set the trust relationships:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/trust.png"></p>

<h1>Creating CodeDeploy application</h1>

<p>Next go to the CodeDeploy console and create a new application using the &ldquo;Custom Deployment&rdquo; option.</p>

<p>In the application options you have to define which EC2 instance tags will be included in the deployment. Set the <code>
opsworks:stack</code> and <code>opsworks:layer:php-app</code> to the name of your stack and layer respectively.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_app.png"></p>

<p>Select a Deployment Config (eg. <code>CodeDeployDefault.OneAtATime</code>), and set the Service Role ARN to the service
 role you created earlier.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> - Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> - OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> - Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NY Taxi Data Visualized]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized/"/>
    <updated>2014-06-27T11:58:54+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized</id>
    <content type="html"><![CDATA[<p>Recently a massive dataset of <a href="http://chriswhong.com/open-data/foil_nyc_taxi/">NYC Taxi Data</a> was made public. There are torrents available but at 19gb the data can be quite unwieldy to manage on a home machine. /r/BigQuery have <a href="http://www.reddit.com/r/bigquery/comments/28ialf/173_million_2013_nyc_taxi_rides_shared_on_bigquery/">uploaded</a> the dataset to Google&rsquo;s BigQuery service.</p>

<p>BQ provides a simple way to get insights out of this dataset without tearing through your internet usage or waiting for your home machine to query 173 million records. For example on reddit they have already discovered some <a href="https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1">anonymization issues</a>.</p>

<p>I&rsquo;ve taken some of the popular Queries and charted them.</p>

<!-- more -->


<h2>Histogram of tips as a % of fare.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart16f573026d1' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart16f573026d1()
    });
    function drawchart16f573026d1(){  
      var opts = {
 "dom": "chart16f573026d1",
"width":    800,
"height":    400,
"x": "tip_pct",
"y": "trips",
"type": "multiBarChart",
"id": "chart16f573026d1" 
},
        data = [
 {
 "tip_pct": "0%",
"trips": 3227816 
},
{
 "tip_pct": "1%",
"trips": 78606 
},
{
 "tip_pct": "2%",
"trips": 57945 
},
{
 "tip_pct": "3%",
"trips": 75351 
},
{
 "tip_pct": "4%",
"trips": 199571 
},
{
 "tip_pct": "5%",
"trips": 394763 
},
{
 "tip_pct": "6%",
"trips": 732748 
},
{
 "tip_pct": "7%",
"trips": 1001344 
},
{
 "tip_pct": "8%",
"trips": 1395657 
},
{
 "tip_pct": "9%",
"trips": 1516062 
},
{
 "tip_pct": "10%",
"trips": 2296492 
},
{
 "tip_pct": "11%",
"trips": 2813566 
},
{
 "tip_pct": "12%",
"trips": 2020426 
},
{
 "tip_pct": "13%",
"trips": 3641555 
},
{
 "tip_pct": "14%",
"trips": 2638662 
},
{
 "tip_pct": "15%",
"trips": 2659690 
},
{
 "tip_pct": "16%",
"trips": 1182530 
},
{
 "tip_pct": "17%",
"trips": 2604529 
},
{
 "tip_pct": "18%",
"trips": 2105279 
},
{
 "tip_pct": "19%",
"trips": 1140029 
},
{
 "tip_pct": "20%",
"trips": 14690183 
},
{
 "tip_pct": "21%",
"trips": 16606601 
},
{
 "tip_pct": "22%",
"trips": 9957665 
},
{
 "tip_pct": "23%",
"trips": 4688858 
},
{
 "tip_pct": "24%",
"trips": 2721643 
},
{
 "tip_pct": "25%",
"trips": 4876902 
},
{
 "tip_pct": "26%",
"trips": 3453940 
},
{
 "tip_pct": "27%",
"trips": 2587272 
},
{
 "tip_pct": "28%",
"trips": 1356344 
},
{
 "tip_pct": "29%",
"trips": 1217443 
},
{
 "tip_pct": "30%",
"trips": 1729572 
},
{
 "tip_pct": "31%",
"trips": 1186658 
},
{
 "tip_pct": "32%",
"trips": 1011215 
},
{
 "tip_pct": "33%",
"trips": 969247 
},
{
 "tip_pct": "34%",
"trips": 341499 
},
{
 "tip_pct": "35%",
"trips": 307730 
},
{
 "tip_pct": "36%",
"trips": 300208 
},
{
 "tip_pct": "37%",
"trips": 89795 
},
{
 "tip_pct": "38%",
"trips": 171289 
},
{
 "tip_pct": "39%",
"trips": 41494 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="n">ROUND</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span> <span class="o">/</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="n">tip_pct</span><span class="p">,</span>
</span><span class='line'>  <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">trips</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span> <span class="k">and</span> <span class="nb">float</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Speed Over Hour.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart7708516d29c5' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart7708516d29c5()
    });
    function drawchart7708516d29c5(){  
      var opts = {
 "dom": "chart7708516d29c5",
"width":    800,
"height":    400,
"x": "hour",
"y": "speed",
"type": "lineChart",
"id": "chart7708516d29c5" 
},
        data = [
 {
 "hour": 0,
"speed":             16 
},
{
 "hour": 1,
"speed":             17 
},
{
 "hour": 2,
"speed":             17 
},
{
 "hour": 3,
"speed":             18 
},
{
 "hour": 4,
"speed":             20 
},
{
 "hour": 5,
"speed":             22 
},
{
 "hour": 6,
"speed":             18 
},
{
 "hour": 7,
"speed":             14 
},
{
 "hour": 8,
"speed":             12 
},
{
 "hour": 9,
"speed":             11 
},
{
 "hour": 10,
"speed":             12 
},
{
 "hour": 11,
"speed":             11 
},
{
 "hour": 12,
"speed":             11 
},
{
 "hour": 13,
"speed":             11 
},
{
 "hour": 14,
"speed":             11 
},
{
 "hour": 15,
"speed":             11 
},
{
 "hour": 16,
"speed":             12 
},
{
 "hour": 17,
"speed":             12 
},
{
 "hour": 18,
"speed":             12 
},
{
 "hour": 19,
"speed":             12 
},
{
 "hour": 20,
"speed":             14 
},
{
 "hour": 21,
"speed":             14 
},
{
 "hour": 22,
"speed":             15 
},
{
 "hour": 23,
"speed":             15 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">HOUR</span><span class="p">(</span><span class="k">TIMESTAMP</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">))</span> <span class="k">as</span> <span class="n">hour</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ROUND</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span><span class="o">/</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">))</span> <span class="k">AS</span> <span class="n">speed</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_data</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>  <span class="nb">INTEGER</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">AND</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">90</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Tip Over Month.</h2>

<div>


  <body >
    
    <div id = 'chart77081e63288d' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart77081e63288d()
    });
    function drawchart77081e63288d(){  
      var opts = {
 "dom": "chart77081e63288d",
"width":    800,
"height":    400,
"x": "month",
"y": "avg_tip",
"type": "lineChart",
"id": "chart77081e63288d" 
},
        data = [
 {
 "avg_tip":           2.41,
"month": 1 
},
{
 "avg_tip":            2.4,
"month": 2 
},
{
 "avg_tip":           2.46,
"month": 3 
},
{
 "avg_tip":            2.5,
"month": 4 
},
{
 "avg_tip":           2.55,
"month": 5 
},
{
 "avg_tip":           2.56,
"month": 6 
},
{
 "avg_tip":            2.5,
"month": 7 
},
{
 "avg_tip":           2.53,
"month": 8 
},
{
 "avg_tip":           2.58,
"month": 9 
},
{
 "avg_tip":           2.59,
"month": 10 
},
{
 "avg_tip":           2.55,
"month": 11 
},
{
 "avg_tip":           2.63,
"month": 12 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span> <span class="n">avg_tip</span><span class="p">,</span>
</span><span class='line'>  <span class="n">REGEXP_EXTRACT</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">,</span> <span class="ss">&quot;2013-([0-9]*)&quot;</span><span class="p">)</span> <span class="k">month</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">2</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF's in Ruby]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby/"/>
    <updated>2014-06-25T21:18:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby</id>
    <content type="html"><![CDATA[<p>Avoid using PDF&rsquo;s in your application. There are no great solutions to PDF generation in general, and Ruby does not have any perfect options. If you really need PDF&rsquo;s, this is the landscape of options, and my suggestion.</p>

<!-- more -->


<h2>HTML to PDF</h2>

<p>PDF generation in Ruby, and in general, comes down to libraries that turn HTML + CSS into PDF&rsquo;s, and libraries that abstract the PDF standard into programmatic creation of documents.</p>

<p>The gold standard of HTML to PDF is <a href="http://www.princexml.com/">PrinceXML</a>. By all accounts this is a great product, used by big corporates and universities. However if the XML in the title didn&rsquo;t give it away, this is very much an &lsquo;enterprise&rsquo; product, starting at $3800 for a single license!</p>

<p>The open source alternative is <a href="http://wkhtmltopdf.org/">wkhtmltopdf</a>. Two gems that leverage this library are <a href="https://github.com/pdfkit/pdfkit">PDFKit</a> and <a href="https://github.com/mileszs/wicked_pdf">Wicked PDF</a>.</p>

<p>At first these libraries seem great, code in what you know, leverage existing controllers and even views. Ultimately though its a fairly bad abstraction, and PDF rendering can be slow and unreliable. This is not a problem unique to Ruby and I suspect it&rsquo;s why PrinceXML can still get away with their pricing.</p>

<p>The Ruby alternative is <a href="http://prawnpdf.org/api-docs/">Prawn</a>, a gem with a DSL for building documents.</p>

<h2>Go the raw Prawn</h2>

<p>Prawn does have a learning curve, but it performs well, doesn&rsquo;t rely on external binaries and gives full access to layout and paging. The prawn DSL is described fairly well in the <a href="http://prawnpdf.org/manual.pdf">manual</a> (generated of course in Prawn). Be careful using code examples on Github and older blog posts, Prawn has had some major API changes over time and a lot of old code examples floating around wont work.</p>

<p>For example Prawn has template functionality, that lets you use an existing PDF as a template. However when template PDF&rsquo;s are too large this feature crashes silently rendering a blank PDF.</p>

<p>If you stick to the methods used in the manual and learn the DSL Prawn is a flexible and reliable solution. The Prawn way of building documents makes a lot of sense and the simplicity of having no external requirements makes integrating into all kinds of Ruby projects easy.</p>

<h2>General PDF Weirdness</h2>

<p>Some things to watch out for</p>

<ul>
<li>Merging PDF&rsquo;s - there are absolutely no Ruby gems capable of doing this reliably, shelling out to something like <a href="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/">PDFtk</a> does work but is far from ideal.</li>
<li>Google Chrome PDF Viewer Issue - This is a really odd issue that I eventually found in a google support ticket. The PDF viewer in chrome cant copy any text containing a line ending in &lsquo;-&rsquo; (and possibly some other characters). This issue doesn&rsquo;t exist in any other PDF viewer and is unlikely to effect most applications, but its a good example of the fun world of PDF&rsquo;s!</li>
<li>Editing existing PDF&rsquo;s - don&rsquo;t even try, as mentioned previously Prawn claims to do this but it doesn&rsquo;t work very well</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic DNS Records Using Route53 on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53/"/>
    <updated>2014-06-23T18:28:23+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53</id>
    <content type="html"><![CDATA[<p>
    Lets say you have a load balanced web application managed with OpsWorks – your application traffic will be addressed
    to the load balancer, but sometimes it&#8217;s still handy to address your application nodes directly for testing
    purposes or perhaps so each node has a unique SNS endpoint for HTTP notifications. You could just  use their IP,
    but unless you use an EIP that IP address may change. You could create a DNS record, which would be easier to remember
    and allows the IP to change – but managing this manually would be a pain.
</p>




<p>
    Fortunately this process of managing DNS records can be automated using Chef, Route53 and the EC2 instance
    metadata functionality to obtain the public IP. Each instance will automatically create an A record for
    <code>[instance name].example.com</code> on setup using their OpsWorks instance name.
</p>




<!-- more -->




<h2>Getting started</h2>


<p>
    Firstly, I&#8217;ll assume you have a Route53 zone created – in my case the zone will be called <code>example.com</code>.
    You&#8217;ll also need a set of AWS access keys, I recommend creating an IAM user restricted to managing your hosted zone.
    You can use the following IAM user policy:
</p>


<figure class='code'><figcaption><span>IAM User Policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403515694000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;route53:ChangeResourceRecordSets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:GetHostedZone&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:ListResourceRecordSets&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:route53:::hostedzone/&lt;insert your hosted zone ID&gt;&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Next add your AWS credentials and zone ID as custom JSON variables in your OpsWorks stack:
</p>


<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;dns_zone_id&quot;</span>      <span class="p">:</span> <span class="s2">&quot;&lt;insert hosted zone ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
 Adding custom JSON to your stack is covered in more detail in
 <a target="_blank" href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">Retrieving Files From S3 Using Chef on OpsWorks</a>.
</p>


<p>
    Finally, add the <a target="_blank" href="http://community.opscode.com/cookbooks/route53">route53 cookbook</a>
    to your Berksfile. If you&#8217;re not using Berkshelf you&#8217;ll have to clone the whole cookbook into your custom cookbook
    repository.
</p>




<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://api.berkshelf.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;route53&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 0.3.4&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating your recipes</h2>


<p>
    Next, we need to create a custom cookbook and recipes – in this example the cookbook is called <code>dnsupdate</code>.
     Create the following file structure and files in your custom cookbook repository:
</p>




<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnsupdate/metadata.rb
</span><span class='line'>dnsupdate/recipes/add.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;dnsupdate&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Update Route53 Zone&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;route53&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>recipes/add.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;route53&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">route53_record</span> <span class="s2">&quot;create a record&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span>  <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:instance</span><span class="o">][</span><span class="ss">:hostname</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;.example.com&#39;</span>
</span><span class='line'>  <span class="n">value</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;http://169.254.169.254/latest/meta-data/public-ipv4&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">type</span>  <span class="s2">&quot;A&quot;</span>
</span><span class='line'>  <span class="n">ttl</span>   <span class="mi">60</span>
</span><span class='line'>  <span class="n">zone_id</span>               <span class="n">node</span><span class="o">[</span><span class="ss">:dns_zone_id</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span>     <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">overwrite</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Substitute <code>.example.com</code> with your own domain. <code>Net::HTTP.get(URI.parse('http://169.254.169.254/latest/meta-data/public-ipv4'))</code>
    is using the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">instance data API</a> to obtain the public IP
      – use the IP above any instance.
</p>




<h2>Adding recipe to life cycle event</h2>


<p>
    Once you&#8217;ve committed and pushed the new recipe to your custom cookbook repository you&#8217;re ready to add the recipe
    to the configure life cycle event. First update your custom cookbooks, by going to your stack > Run Command > and
    selecting &#8216;Update Custom Cookbooks&#8217; from the command select box.
</p>


<p>
    Finally, navigate to a layer in OpsWorks > Edit > Recipes > add &#8216;dnsupdate::add&#8217; to the configure
    event and save.
</p>


<p><img src="http://hipsterdevblog.com/images/posts/route53_dns/add_recipe.png"></p>

<p>
    Now when the run the configure event you should see a new DNS A record being added in Route53!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Processing Images Using S3 and Redirection Rules]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules/"/>
    <updated>2014-06-22T19:14:44+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules</id>
    <content type="html"><![CDATA[<p>
    In a system dealing with user generated images it&#8217;s common to have to resize images before they can be served to the web.
    Storing and serving large quantities of user generated images can also be a challenge – that is unless you&#8217;re using
    AWS S3. A typical implementation using S3 to store and serve images requires images to be resized into every required
    size and saved to S3 upon being uploaded. An unfortunate limitation of this technique is that you must know all
     required sizes at the time the image is uploaded – something that may not be constant, consistent or known in some
     (particularly legacy) applications.
</p>


<p>
     One solution is to automatically resize images the first time they&#8217;re requested
     using dimensions provided in the image URL, this way the application requesting the image can choose an appropriate
     size. While S3 doesn&#8217;t provide functionality to transparently proxy image misses to your image processor, it is
     possible to use S3 <a target="_blank" href="http://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html">S3
     routing rules</a> to achieve a similar function.
</p>


<!-- more -->


<h2>Overview</h2>


<p>
    Using routing rules it&#8217;s possible to return a 302 redirect whenever a 404 error occurs, this 302 redirect can then
    take the user to your EC2 instance which resizes the image, serves it to them then saves the resized copy back to
     the original bucket so future visitors won&#8217;t be redirected.
</p>


<p><img class="left" src="http://hipsterdevblog.com/images/posts/s3_lazy_process/s3_route.png"></p>

<h2>Implementation</h2>


<p>
    First, it&#8217;s assumed that you have a bucket setup to serve its content publicly on one domain and your processing
    server on another. Both domains must use the same URL structure for images aside from the host name, so for example
     <code>images.domain.com/widgets/myimage_600_400.jpg</code> and <code>process.domain.com/widgets/myimage_600_400.jpg</code>
     should both work (assuming <code>images.mydomain.com</code> is the bucket and <code>process.mydomain.com</code> is the processor).
</p>


<p>
    When receiving a request <code>process.mydomain.com</code> should resize the image (most likely after obtaining the
    image from another private bucket for originals), serve that image to the visitor then save it back to
    the <code>images.mydomain.com</code> bucket.
</p>


<p>
    Next – go to the bucket in the S3 console, go to the bucket properties and enter the following routing rules
    in the &#8216;Enable website hosting&#8217; accordion menu:
</p>


<figure class='code'><figcaption><span>Routing rules </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RoutingRules&gt;</span>
</span><span class='line'>    <span class="nt">&lt;RoutingRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Condition&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpErrorCodeReturnedEquals&gt;</span>404<span class="nt">&lt;/HttpErrorCodeReturnedEquals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Condition&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Redirect&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HostName&gt;</span>process.domain.com<span class="nt">&lt;/HostName&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpRedirectCode&gt;</span>302<span class="nt">&lt;/HttpRedirectCode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Redirect&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/RoutingRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/RoutingRules&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://hipsterdevblog.com/images/posts/s3_lazy_process/bucket_config.png"></p>

<p>
    You now have lazy image processing!
</p>


<h2>Enter CloudFront</h2>


<p>
    S3 is a reasonably effective CDN (in the sense that it offloads serving images), but it&#8217;s not geographically
    distributed and if you&#8217;re serving images to visitors across the globe you may wish to also implement CloudFront.
    Unfortunately you can&#8217;t simply setup CloudFront to use the <code>images.mydomain.com</code> bucket as an origin because
     CloudFront will cache the 302 redirects for a minimum of 60 minutes – meaning your image processor might process the same image many times.
</p>


<p>
    One solution is to put a second CloudFront distribution in front of <code>process.domain.com</code> and set the S3
    redirect to use that CloudFront endpoint rather than the processor directly. In this scenario the first region to receive
     a request will pass through the first CloudFront distribution, the S3 bucket, the second CloudFront distribution
     and then hit the processor. The second request from that same region should then hit the second CloudFront distribution
     as will every other request from this region until the 302 redirect expires.
     Users making requests from other regions after the first request won&#8217;t have the 302 redirect in the cache for their region
     so they should hit the file in the S3 bucket which will then get cached in their region.
</p>


<h2>Caveats</h2>


<p>
    While this approach is certainly effective in some scenarios it&#8217;s not exactly <em>elegant</em>.
    Be sure to first consider whether CloudFront alone or
    resizing images in advance would work better in your situation. It&#8217;s also worth keeping in mind that all genuine
    404 requests (that is for images which don&#8217;t exist at all) will get passed to your server and won&#8217;t be offloaded to S3.
</p>


<p>
    Be careful when lazy processing images in general – if you don&#8217;t implement some form of rate limiting you may
      end up being vulnerable to a Denial of Service attack if someone were to try and request thousands of images in
      different sizes.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrieving Files From S3 Using Chef on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/"/>
    <updated>2014-06-22T17:44:02+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks</id>
    <content type="html"><![CDATA[<p><p>
<strong>You may also be interested in my new post <a href="http://hipsterdevblog.com/blog/2015/01/03/revisited-retrieving-files-from-s3-using-chef-on-opsworks/">Revisited: Retrieving Files From S3 Using Chef on OpsWorks</a>
 which includes support for IAM instance roles.</strong>
<p></p>

<p><p>
    Say you wanted to manage some configuration file in your OpsWorks stack – typically you&rsquo;d create a custom Chef recipe,
    make your configuration file a template and store it within your custom cookbook repository. This approach works well
    in most instances, but what if the file is something not suited to version control such as a large binary file or
    perhaps a programmatically generated artifact of your system?
</p>
<p>
    In these cases you may prefer to store the file in an S3 bucket and automatically download a copy of the file
    as part of a custom recipe. In my case I wanted to have a dynamically generated (by a separate system)
    vhost configuration file which could be deployed to a stack using a simple recipe.
</p>
<!-- more -->
<h2>Adding AWS cookbook via Berkshelf</h2></p>

<p><p>
    The first thing you&rsquo;ll need to do is add the OpsCode <a target="_blank" href="http://community.opscode.com/cookbooks/aws">AWS
    cookbook</a> to your Berkfile. Note that Berkshelf is only supported on Chef 11.10 or higher on OpsWorks, so if your
    OpsWorks stack has an older version selected you&rsquo;ll have to either upgrade or include the whole AWS cookbook in your
    custom cookbook repository.
</p>
<p>
    If you don&rsquo;t already have a Berkfile you&rsquo;ll need to create one in your custom cookbook repository, otherwise simply
    add the AWS cookbook. Your Berkfile should look something like this:
</p>
<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;<a href="https://api.berkshelf.com&amp;quot;">https://api.berkshelf.com&amp;quot;</a></span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;aws&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 2.2.2&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h2>Creating an S3 bucket and a user which can access it</h2>
<p>
    You can probably figure out how to create a bucket on your own. In my case I have a bucket called &lsquo;test-site-config&rsquo;
    and a file in there called &lsquo;vhost.map&rsquo; which I want to download via Chef.
</p>
 <img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/bucket.png">
<p>
    Next you&rsquo;ll need some AWS credentials for Chef to use while downloading the file. You can use your root account
    but I&rsquo;d strongly suggest using an IAM user limited to your bucket instead. If you create a new IAM user you can
    use the following policy which will only permit reading objects from the specified S3 bucket (obviously replace
    &lsquo;test-site-config&rsquo; with your own bucket name:
</p>
<figure class='code'><figcaption><span>IAM policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403407152000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;s3:GetObject&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::test-site-config/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h2>Passing AWS credentials via custom JSON</h2>
<p>
    Now navigate to your stack in the OpsWorks console, click &lsquo;Stack Settings&rsquo; then &lsquo;Edit&rsquo; and modify the Custom JSON
    field to include variables for your access and secret key. If you already have custom JSON values then you&rsquo;ll
    need to merge the new values with your existing JSON, otherwise you can use the code below:
</p>
<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/edit_stack.png"></p>

<p><h2>Creating your custom recipe</h2>
<p>
    In this instance I&rsquo;ll create a new recipe called &lsquo;deployfile&rsquo; which does nothing but download my file and save it to the specified
    location, however you could just as easily include this code within an existing recipe.
</p>
<p>
    Create the following file structure and use the code below in your custom cookbook repository:
</p>
<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deployfile/metadata.rb
</span><span class='line'>deployfile/recipes/default.rb</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;deployfile&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Deploy File From S3&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;aws&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>recipes/default.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;aws&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_s3_file</span> <span class="s2">&quot;/etc/apache2/vhost.map&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bucket</span> <span class="s2">&quot;test-site-config&quot;</span>
</span><span class='line'>  <span class="n">remote_path</span> <span class="s2">&quot;vhost.map&quot;</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
    Substitute <code>/etc/apache2/vhost.map</code> with the destination on your nodes, the bucket name and the remote
    path as required. You can also use other attributes belonging to the <a target="_blank" href="http://docs.opscode.com/resource_file.html">Chef
    file resource</a>.
</p></p>

<p><h2>Updating stack and executing recipe</h2>
<p>Once the code above has been committed and pushed back to your repository you&rsquo;re finally ready to execute the recipe.</p></p>

<p><p>Go to your stack and click &lsquo;Run Command&rsquo;, select &lsquo;Update Custom Cookbooks&rsquo;:</p>
<img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/update_cookbook.png">
<p>Once OpsWorks has finished updating your custom cookbooks go back to &lsquo;Run Command&rsquo; and select &lsquo;Execute Recipes&rsquo;.
Enter the name of your recipe into the &lsquo;Recipes to execute&rsquo; field:</p>
<img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/deploy_file.png">
<p>Alternatively you can add your recipe to a layer life-cycle event (such as setup) and execute that life-cycle event
instead</p>
<p>Once that recipe has finished executing the file downloaded from S3 should now be present on your system!</p></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[:HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2014-12-21T14:36:28+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Monitoring Per Application Metrics With CloudWatch Logs and OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks/"/>
    <updated>2014-12-21T10:53:24+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/21/monitoring-per-application-metrics-with-cloudwatch-logs-and-opsworks</id>
    <content type="html"><![CDATA[<p><a href="http://aws.amazon.com/about-aws/whats-new/2014/07/10/introducing-amazon-cloudwatch-logs/">CloudWatch logs</a> is a cheap and
 easy to set up centralised logging solution. At the moment it lacks several valuable features such as a convenient way
 to search logs, however it does an <em>excellent</em> job at providing graphing and alerting on aggregated metrics pulled from
 ingested log data. An obvious application for this is to monitor HTTP server statistics to provide graphs of overall
 request rates, response sizes, and error rates.</p>

<p><a href="http://aws.amazon.com/opsworks/">OpsWorks</a> makes it easy to orchestrate a fleet of EC2 instances serving multiple applications
 (as oppose to <a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a> which only hosts a single application). Apache is
 the default HTTP server for most OpsWorks layer types.</p>

<p>This post demonstrates how to setup CloudWatch logs for Apache access logs on OpsWorks, then create custom CloudWatch
 metrics for an individual OpsWorks application to graph the HTTP request rate.</p>

<!-- more -->


<h1>Installing the CloudWatch agent with Chef to monitor Apache logs</h1>

<p>The first step is to install the CloudWatch agentusing a custom recipe. These instructions are based off <a href="http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/QuickStartChef.html">the AWS documentation</a>
 so <strong>follow those steps to configure your IAM instance role first</strong>.</p>

<p>Create the following files in your custom cookbooks repository, you can name the custom recipe anything you like but
 in this example I&rsquo;ve named it <code>myrecipe</code>.</p>

<figure class='code'><figcaption><span>myrecipe/recipes/logging.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">template</span> <span class="s2">&quot;/tmp/cwlogs.cfg&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;cwlogs.cfg.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;/opt/aws/cloudwatch&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/opt/aws/cloudwatch/awslogs-agent-setup.py&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s2">&quot;0755&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;Install CloudWatch Logs agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;/opt/aws/cloudwatch/awslogs-agent-setup.py -n -r us-east-1 -c /tmp/cwlogs.cfg&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="nb">system</span> <span class="s2">&quot;pgrep -f aws-logs-agent-setup&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>myrecipe/templates/default/cwlogs.cfg.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">[general]</span>
</span><span class='line'><span class="x"># Path to the AWSLogs agent&#39;s state file. Agent uses this file to maintain</span>
</span><span class='line'><span class="x"># client side state across its executions.</span>
</span><span class='line'><span class="x">state_file = /var/awslogs/state/agent-state</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="x">[</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-http-access]</span>
</span><span class='line'><span class="x">datetime_format = [%Y-%m-%d %H:%M:%S]</span>
</span><span class='line'><span class="x">log_group_name = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:stack</span><span class="o">][</span><span class="ss">:name</span><span class="o">].</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span><span class="s1">&#39;_&#39;</span><span class="p">)</span> <span class="cp">%&gt;</span><span class="x">-http-access</span>
</span><span class='line'><span class="x">file = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/*-access.log</span>
</span><span class='line'><span class="x">log_stream_name = </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:instance</span><span class="o">][</span><span class="ss">:hostname</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The significant line is <code>file = &lt;%= node[:apache][:log_dir] %&gt;/*-access.log</code> which
 sets the log location to the Apache HTTP access logs.</p>

<p>Next, add this recipe to the setup lifecycle event of your OpsWorks layer:</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/logrecipe.png"></p>

<h1>Including application in Apache access logs</h1>

<p>The other change we need to make is to include the application name in the Apache access logs, otherwise we won&rsquo;t
 be able to filter by application when creating a logging metric in CloudWatch.</p>

<p>To do this you need to override the Apache vhost template in the OpsWorks cookbooks. The recipe containing this template
 will depend on the application type, for example it&rsquo;s located in <code>mod_php5_apache2/templates/default/web_app.conf.erb</code> or
<code>passenger_apache2/templates/default/web_app.conf.erb</code> for PHP and Ruby applications respectively.</p>

<p>In this example we&rsquo;ll assume a PHP application, so create the following file in your custom cookbooks repository:</p>

<figure class='code'><figcaption><span>mod_php5_apache2/templates/default/web_app.conf.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;VirtualHost *:80&gt;</span>
</span><span class='line'><span class="x">  ServerName </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">empty?</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias </span><span class="cp">&lt;%</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="cp">%&gt;&lt;%=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span> <span class="cp">%&gt;</span><span class="x"> </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogFormat &quot;%h %l %u %t \&quot;%r\&quot; </span><span class="err">%&gt;</span><span class="x">s %b \&quot;%{Referer}i\&quot; \&quot;%{User-agent}i\&quot; \&quot;</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">\&quot;&quot; combinedwithapp</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogLevel </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_level</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ganglia.log ganglia</span>
</span><span class='line'>
</span><span class='line'><span class="x">  FileETag none</span>
</span><span class='line'>
</span><span class='line'><span class="x">  RewriteEngine On</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  RewriteLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@application_name</span> <span class="cp">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@environment</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &quot;</span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="x">&quot; &quot;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="x">&quot;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/(.*)$ </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:deploy</span><span class="o">][</span><span class="vi">@application_name</span><span class="o">][</span><span class="ss">:ssl_support</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;VirtualHost *:443&gt;</span>
</span><span class='line'><span class="x">  ServerName </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">empty?</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ServerAlias </span><span class="cp">&lt;%</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_aliases</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="cp">%&gt;&lt;%=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">&quot;</span> <span class="cp">%&gt;</span><span class="x"> </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  DocumentRoot </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  SSLEngine on</span>
</span><span class='line'><span class="x">  SSLProxyEngine on</span>
</span><span class='line'><span class="x">  SSLCertificateFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.crt</span>
</span><span class='line'><span class="x">  SSLCertificateKeyFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.key</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:ssl_certificate_ca</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SSLCACertificateFile </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/ssl/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:server_name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.ca</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnvIf User-Agent &quot;.*MSIE.*&quot; nokeepalive ssl-unclean-shutdown downgrade-1.0 force-response-1.0</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">&gt;</span>
</span><span class='line'><span class="x">    Options FollowSymLinks</span>
</span><span class='line'><span class="x">    AllowOverride All</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Allow from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.svn&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  &lt;Directory ~ &quot;\.git&quot;&gt;</span>
</span><span class='line'><span class="x">    Order allow,deny</span>
</span><span class='line'><span class="x">    Deny from all</span>
</span><span class='line'><span class="x">  &lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  LogLevel </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_level</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  ErrorLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-error.log</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl-access.log combinedwithapp</span>
</span><span class='line'><span class="x">  CustomLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl-ganglia.log ganglia</span>
</span><span class='line'>
</span><span class='line'><span class="x">  FileETag none</span>
</span><span class='line'>
</span><span class='line'><span class="x">  RewriteEngine On</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  RewriteLog </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:log_dir</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/</span><span class="cp">&lt;%=</span> <span class="vi">@application_name</span> <span class="cp">%&gt;</span><span class="x">-rewrite.log</span>
</span><span class='line'><span class="x">  RewriteLogLevel 0</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:rewrite_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="vi">@environment</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  SetEnv &quot;</span><span class="cp">&lt;%=</span> <span class="n">key</span> <span class="cp">%&gt;</span><span class="x">&quot; &quot;</span><span class="cp">&lt;%=</span> <span class="n">value</span> <span class="cp">%&gt;</span><span class="x">&quot;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  AliasMatch ^</span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:mounted_at</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/(.*)$ </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:docroot</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">$1</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">node</span><span class="o">[</span><span class="ss">:apache</span><span class="o">][</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;2.2&#39;</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  Include </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">else</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  IncludeOptional </span><span class="cp">&lt;%=</span> <span class="vi">@params</span><span class="o">[</span><span class="ss">:local_config</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">-ssl*</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/VirtualHost&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">-%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This configuration is based on the <a href="https://github.com/aws/opsworks-cookbooks/blob/release-chef-11.10/mod_php5_apache2/templates/default/web_app.conf.erb">default template</a> so
 it may be best to start with the latest template file on GitHub.</p>

<p>Note the following lines which are relevant:</p>

<p><code>LogFormat "%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-agent}i\" \"&lt;%= @params[:name] %&gt;\"" combinedwithapp</code></p>

<p>This is creating a new log format called <code>combinedweithapp</code>, it&rsquo;s the same as the <code>combined</code> format except the app name
 is appended to the end.</p>

<p><code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-access.log combinedwithapp</code>
<code>CustomLog &lt;%= node[:apache][:log_dir] %&gt;/&lt;%= @params[:name] %&gt;-ssl-access.log combinedwithapp</code></p>

<p>This is telling both the HTTP and HTTPS access logs to use the new custom format.</p>

<h1>Testing the logging</h1>

<p>If you now launch an instance, wait for it to come online then load the App a few times you should begin to see logs
 appearing in CloudWatch after a few minutes.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/logsappearing.png"></p>

<p>This indicates that the CloudWatch agent is working, you should also be able to see the app name. You&rsquo;ll notice
 that logs are nicely categorized by stack and instance too.</p>

<h1>Creating a metric to monitor HTTP requests by App</h1>

<p>How that we have Apache access logs being sent to CloudWatch including the App name we can setup a metric to monitor
 the number of requests made to this application.</p>

<p>From the &ldquo;Log Groups&rdquo; screen in CloudWatch, tick the appropriate log group (<code>cw-logs-test-http-access</code> in this example) and then
 click &ldquo;Create Metric Filter&rdquo; at the top.</p>

<p>Enter the following Filter Pattern:</p>

<p><code>[host, logName, user, timestamp, request, statusCode, size, referer, useragent, app=app1, ...]</code></p>

<p>Note that you should replace app1 with the name of the app you&rsquo;re interested in.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/metricfilterapp.png"></p>

<p>You can test your filter pattern, otherwise proceed by clicking &ldquo;Assign Metric&rdquo;.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/metric-name.png"></p>

<p>Give your new metric an appropriate namespace (group) and name. As we&rsquo;re only interested in the number of requests the
 &ldquo;Metric Value&rdquo; is 1 (1 per request).</p>

<h1>Viewing the results</h1>

<p>Once you&rsquo;ve created the metric you won&rsquo;t see data until more logs matching that criteria occur, so either generate some
 traffic on your app or wait for some to come in. There can be a delay of about 5 minutes for metrics data to appear.</p>

<p>After data has been recorded into the metric you should be able to find that metric either by searching the metrics list
 or from the &ldquo;Custom Metrics&rdquo; drop down which will appear after you refresh the page.</p>

<p><img src="http://hipsterdevblog.com/images/posts/cwlogsopsworks/request_graph.png"></p>

<p>Change the aggregation type from &ldquo;average&rdquo; to &ldquo;sum&rdquo; and you should now see a nice graph of the requests going to your app
 over time. You can change the interval to 1 minute to get the most detailed graph.</p>

<h1>Other metrics</h1>

<p>In this example we&rsquo;re only interested in the number of HTTP requests, but you can easily create additional metrics for things
 like 4xx errors or response size (to get an estimate of bandwidth usage by app).</p>

<p>To graph 4xx errors use a Filter Pattern like this (note the statusCode field):</p>

<p><code>[host, logName, user, timestamp, request, statusCode=4*, size, referer, useragent, app=app1, ...]</code></p>

<p>To graph response size enter <code>$size</code> instead of 1 as the &ldquo;Metric Value&rdquo; when creating the metric.</p>

<p>To monitor multiple apps simply create additional sets of your custom metrics, each with a different app filter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Far Can You Go With HAProxy and a t2.micro]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/19/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro/"/>
    <updated>2014-12-19T09:56:13+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/19/how-far-can-you-go-with-haproxy-and-a-t2-dot-micro</id>
    <content type="html"><![CDATA[<p>Load balancing is critical to any scalable and highly available cloud application. The obvious choice for load balancing
 on AWS is <a href="http://aws.amazon.com/elasticloadbalancing/">ELB</a>, but unfortunately if you require features such as a static
 IP or URL based request routing then ELB isn&rsquo;t an option.</p>

<p><a href="http://www.haproxy.org/">HAProxy</a> is a great solution that performs extremely well even on small EC2 instance types. It
 is also a supported layer type in <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workinglayers-load.html">OpsWorks</a>
 which makes it the obvious choice for OpsWorks users.</p>

<p>It&rsquo;s well known that several large application servers can be served by just a single small HAProxy server, but what is
the definition of small? How about the smallest EC2 instance on offer &ndash; the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">t2.micro</a>?
 This blog post puts HAProxy on a t2.micro to the test using <a href="https://loader.io/">loader.io</a> to determine just how many requests/second it
 can handle and whether CPU or network is the limiting factor.</p>

<!-- more -->


<h1>Method</h1>

<p>To create a test environment I set up an OpsWorks stack with a HAProxy and PHP layer.
I then deployed the following file:</p>

<figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">usleep</span><span class="p">(</span><span class="mi">300000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">Lorem ipsum dolor sit amet, consectetur ... [continues for ~50kb]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is intended to emulate a fairly typical application request from the perspective of the load balancer
(ie. takes about 300ms to generate and the resulting document is about 50kb in size). Having a fixed page generation
time is convenient as any increase in the overall response time can be assumed to be due to the load balancer.</p>

<p>I also created a <code>status.php</code> which does nothing but return a 200 response to serve as the health check.</p>

<p>I then launched the following instances:</p>

<ul>
<li>1 x t2.micro to the HAProxy layer</li>
<li>4 x c3.large to the PHP App Server layer</li>
</ul>


<p>At no time during my testing did the application servers show any signs of excessive load, however I wanted to ensure
 that there was ample excess capacity and that the load balancer would be the bottleneck in my tests.</p>

<p>The only changes I made to the standard OpsWorks configuration was to install NewRelic, and raise the <code>node[:haproxy][:maxcon_factor_php_app]</code> value to 50.</p>

<p>I used <a href="https://loader.io/">loader.io</a> to generate the load and produce these nice graphs.</p>

<h1>Results</h1>

<h2>100 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100persecloader.png"></p>

<h3>NewRelic</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100nrcpu.jpg"></p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/100nrnetwork.png"></p>

<p>As you can see, at 100 req/second CPU load is less than 2%, although combined network throughput is ~75Mb/s.
  No requests timeout and response times are stable.</p>

<h2>1000 req/sec over 5 minutes</h2>

<h3>Loader.io</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000loader.png"></p>

<p>At 1000 req/second performance has definitely degraded. 10521 requests timeout while 157726 succeed and there is
 significant fluctuation in response times.</p>

<h3>HAProxy stats</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000haproxystats.png"></p>

<p>The HAProxy stats suggests requests aren&rsquo;t being queued by HAProxy, and the application servers are barely at 5% CPU.</p>

<h3>NewRelic</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000nrcpu.jpg"></p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1000nrnetwork.jpg"></p>

<p>This time CPU is higher, but still only ~7% &ndash; however combined network throughput is close to 40k packets/second and 400 MB/s.</p>

<p>Clearly network capacity is the limiting factor.</p>

<h2>Finding the limit</h2>

<p>Using the previous result it seems conservatively the outbound network capacity limit is about 180 Mb/s. If we assume each
request is about 50 kB the approximate limit should be <code>(180 * 1024 * 1024) / (50 * 1024 * 8) = 460 req/second</code>.</p>

<h3>460 req/second</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/460loader.png"></p>

<p>At 460 req/second response times are mostly a flat ~300 ms, except for two spikes. I attribute this to TCP congestion avoidance
 as the traffic approaches the limit and packets start to get dropped. After dropped packets are detected the clients reduce their
 transmission rate, but eventually the transmission rate stabilizes again just under the limit. Only 1739 requests timeout and 134918 succeed.</p>

<h3>400 req/second</h3>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/loader400.png"></p>

<p>Testing again at 400 req/second which should be well within the limit we can see stable response times with no spikes or timeouts.</p>

<h1>A note about t2 instances and CPU credits</h1>

<p>t2-type instances have <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/t2-instances.html">variable CPU performance</a>, limited by CPU credits which allow the instance to have increased CPU
 usage for a limited period of time. The t2.micro instance type can use up to 10% CPU consistently without consuming CPU credits.</p>

<p>Ordinarily variable CPU performance wouldn&rsquo;t be desirable for a load balancer, however HAProxy is very efficient in terms
 of CPU and these tests show that CPU usage rarely exceeds 10% before being limited by network capacity.</p>

<p>Below is a graph of CPU credit usage and balance over the course of my tests:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/cpucredit.png"></p>

<p>As you can see the trend is generally positive, so if you&rsquo;re not running at the limit of your capacity the whole time
 you&rsquo;d probably never run out of CPU credits.</p>

<h1>What about small responses?</h1>

<p>Previously I was trying to emulate a relatively large response body, such as a full HTML page. But what if you&rsquo;re
 trying to load balance something like an API which only returns short JSON strings, would networking still be the limiting factor?</p>

<p>I also ran some tests using this scenario:</p>

<figure class='code'><figcaption><span>api.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="nb">usleep</span><span class="p">(</span><span class="mi">100000</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">{&quot;hello&quot;: &quot;world&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I tested this with 1000 req/sec HAProxy health checks began to fail on the app servers even though CPU
 usage was low, this caused response times to jump and fluctuate:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/haproxystats1ksmall.png"></p>

<p>Given that my aim is to benchmark HAProxy rather than the app servers I didn&rsquo;t bother to debug this and added two additional
 app servers instead.</p>

<p>After adding the servers I was still experiencing wild fluctuations and timeouts:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/1k6instances.png"></p>

<p>Having said that, at 460 req/second it does seem significantly more stable than the larger response size:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/460small.png"></p>

<p>It seems that the limit of the t2.micro is around 500 req/second even for small responses.</p>

<h1>What about a c3.large HAProxy instance?</h1>

<p>While the focus of this blog post is on the t2.micro, I couldn&rsquo;t help my curiosity and decided to try a c3.large HAProxy instance
 with 1000 req/second. As you can see there&rsquo;s no such problems:</p>

<p><img src="http://hipsterdevblog.com/images/posts/haproxybench/c3large1000.png"></p>

<p>I did see some timeouts at 1500 req/second, although I didn&rsquo;t bother to create a HVM instance with enhanced networking enabled.
 The networking performance of the c3.large is described as &ldquo;moderate&rdquo; as oppose to &ldquo;low&rdquo; in the case of the t2, so an increase of
 more than double between low and moderate without enhanced networking isn&rsquo;t bad.</p>

<h1>Conclusion</h1>

<p>You should be safe to run a t2.micro for your HAProxy instance if you&rsquo;re performing less than 400 req/second and 180 Mb/second.
 If you&rsquo;re likely to be running close to this limit most of the time you may want to consider running a larger t2 instance to avoid running
 out of CPU credits.</p>

<p>If you need to go larger then a c3.large should be good for 1k/second, although I suspect an m3.medium would probably perform similarly too.</p>

<p>In any case, you&rsquo;re probably going to run out of network capacity before you hit CPU limits regardless of what instance you choose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Functions for AWS Lambda Using NPM and Grunt]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/12/07/writing-functions-for-aws-lambda-using-npm-and-grunt/"/>
    <updated>2014-12-07T11:51:16+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/12/07/writing-functions-for-aws-lambda-using-npm-and-grunt</id>
    <content type="html"><![CDATA[<p>AWS <a href="http://aws.amazon.com/blogs/aws/run-code-cloud/">recently announced</a> a new compute product called <a href="http://aws.amazon.com/lambda/">Lambda</a>
 allowing users to run Node.js functions on full managed infrastructure while paying only for the actual compute time
 used.</p>

<p><a href="https://www.npmjs.org/">NPM</a> is the primary package manager for Node.js, and while Lambda does not provide explicit
 NPM support it is possible to bundle NPM packages with your function to leverage 3rd party modules.</p>

<p><a href="http://gruntjs.com/">Grunt</a> is a task runner for JavaScript, allowing easy automation of project tasks such as building
 and packaging. Recently I <a href="https://github.com/Tim-B/grunt-aws-lambda">released a Grunt plugin</a> to assist in testing Lambda
 functions and packaging functions including NPM dependencies.</p>

<p>This blog post provides an example of how to use NPM, Grunt and the grunt-aws-lambda plugin to create a Lambda function
 which will scrape a web page and save a list of links within that page to S3 using the cheerio NPM package.</p>

<!-- more -->


<h1>Before starting</h1>

<p>It is assumed that you have Node.js (and NPM) installed on your system. Also, you should have <code>grunt-cli</code> installed
 globally.</p>

<p>This guide also assumes you have AWS credentials configured on your system. These will be used to both test the function
 and upload it to Lambda. The easiest way to install the <a href="http://docs.aws.amazon.com/cli/latest/userguide/installing.html">AWS CLI</a> and run <a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html">aws configure</a>.
 Afterwards make sure ~/.aws/credentials is populated.</p>

<p>For more information on the required AWS IAM permissions <a href="https://github.com/Tim-B/grunt-aws-lambda#aws-permissions">read here</a>, you will also need whatever permissions are required to invoke your function (eg. access to S3 buckets).</p>

<h1>Creating your project</h1>

<p>First, create a directory for your project and run <code>npm init</code>. After following the prompts you should end up with a
 package.json, open this file and edit values as necessary. Also add <code>grunt</code> and <code>grunt-aws-lambda</code> to the devDependencies.
 Don&rsquo;t forget to update the version numbers if new releases are made in the future.</p>

<p>Your package.json should looks something like the following.</p>

<figure class='code'><figcaption><span>package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;link-scraper&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Scrapes a page and saves links in a HTML page to S3&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;devDependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.*&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;grunt-aws-lambda&quot;</span><span class="p">:</span> <span class="s2">&quot;0.3.0&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;BSD&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create a Gruntfile.js with the following:</p>

<figure class='code'><figcaption><span>Gruntfile.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">grunt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;grunt&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span><span class="s1">&#39;grunt-aws-lambda&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">lambda_invoke</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">lambda_deploy</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">function</span><span class="o">:</span> <span class="s1">&#39;link-scraper&#39;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">lambda_package</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;deploy&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;lambda_package&#39;</span><span class="p">,</span> <span class="s1">&#39;lambda_deploy&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then create an index.js, .npmignore and event.json with the following:</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;webpage = &#39;</span> <span class="o">+</span> <span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;link-scraper complete.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>.npmignore </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>event.json
</span><span class='line'>Gruntfile.js
</span><span class='line'>dist
</span><span class='line'>*.iml</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>event.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;webpage&quot;</span><span class="p">:</span> <span class="s2">&quot;http://en.wikipedia.org/wiki/Main_Page&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now run <code>npm install</code></p>

<p>Then run <code>grunt lambda_invoke</code>, you should receive the following output:</p>

<figure class='code'><figcaption><span>lambda_invoke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_invoke:default" (lambda_invoke) task
</span><span class='line'>
</span><span class='line'>webpage = http://en.wikipedia.org/wiki/Main_Page
</span><span class='line'>
</span><span class='line'>Message
</span><span class='line'>-------
</span><span class='line'>link-scraper complete.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Congratulations, you&rsquo;ve created a Lambda function and executed it locally!</p>

<h1>Using NPM packages with AWS Lambda</h1>

<p>For most nontrivial functions you&rsquo;re going to want to leverage 3rd party libraries. The grunt plugin makes using NPM packages
 with Lambda easy.</p>

<p>In this example we&rsquo;re going to use the following NPM packages:</p>

<ul>
<li><a href="https://www.npmjs.org/package/request">request</a> &ndash; Make a HTTP request to download the target page</li>
<li><a href="https://www.npmjs.org/package/cheerio">cheerio</a> &ndash; Query the DOM of the page we download</li>
<li><a href="https://www.npmjs.org/package/moment">moment</a> &ndash; Format the current time</li>
<li><a href="https://www.npmjs.org/package/mustache">mustache</a> &ndash; Generate our HTML page using a template file</li>
<li><a href="https://www.npmjs.org/package/aws-sdk">aws-sdk</a> &ndash; Access the AWS API to upload the page to S3</li>
</ul>


<p>As the aws-sdk is already available in the Lambda environment we&rsquo;re only going to include it in the devDependencies, the
 rest belong in the regular dependencies.</p>

<p>Update your package.json file with the following:</p>

<figure class='code'><figcaption><span>package.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">...</span>
</span><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;cheerio&quot;</span><span class="p">:</span> <span class="s2">&quot;0.18.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;2.49.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;mustache&quot;</span><span class="p">:</span> <span class="s2">&quot;0.8.2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;moment&quot;</span><span class="p">:</span> <span class="s2">&quot;2.8.4&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;devDependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;0.4.*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt-aws-lambda&quot;</span><span class="p">:</span> <span class="s2">&quot;0.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;aws-sdk&quot;</span><span class="p">:</span> <span class="s2">&quot;2.0.23&quot;</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="s2">&quot;bundledDependencies&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;cheerio&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;request&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mustache&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;moment&quot;</span>
</span><span class='line'><span class="p">]</span><span class="err">,</span>
</span><span class='line'><span class="err">...</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note that you must include any packages which are to be included in the Lambda package within the bundledDependencies list</strong>.</p>

<p>Now run <code>npm install</code> again to install these new packages.</p>

<h1>Developing a Lambda function using NPM packages</h1>

<p>Now we can actually develop the Lambda function in index.js, below is an example of a Lambda function to download
 the page provided in the webpage attribute of the event, extract all the links, convert them to absolute URLs, then
 generate a list of these links from a mustache template and upload it to S3.</p>

<p>Update your index.js with the following, don&rsquo;t forget to replace <code>mybucket</code> with your actual destination bucket:</p>

<figure class='code'><figcaption><span>index.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cheerio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;cheerio&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mustache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mustache&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;aws-sdk&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;moment&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="nx">cheerio</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">apiVersions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">s3</span><span class="o">:</span> <span class="s1">&#39;2006-03-01&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="c1">// other service API versions</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">S3</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">anchor</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">href</span> <span class="o">=</span> <span class="nx">anchor</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">anchor</span><span class="p">.</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">href</span> <span class="o">!==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">abs</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span> <span class="nx">href</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">text</span> <span class="o">=</span> <span class="nx">abs</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">new_item</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">text</span><span class="o">:</span> <span class="nx">text</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">url</span><span class="o">:</span> <span class="nx">abs</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">links</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">new_item</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">links</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">new_item</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;template.html&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">links</span><span class="o">:</span> <span class="nx">links</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">page</span><span class="o">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">webpage</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">time</span><span class="o">:</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;MMMM Do YYYY, h:mm:ss a&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="nx">mustache</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">view</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">s3_params</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">Bucket</span><span class="o">:</span> <span class="s1">&#39;mybucket&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">Key</span><span class="o">:</span> <span class="s1">&#39;links.html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">ContentType</span><span class="o">:</span> <span class="s1">&#39;text/html&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">Body</span><span class="o">:</span> <span class="nx">output</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">s3</span><span class="p">.</span><span class="nx">putObject</span><span class="p">(</span><span class="nx">s3_params</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span> <span class="c1">// an error occurred</span>
</span><span class='line'>                <span class="nx">context</span><span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;link-scraper complete.&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also create template.html which will be used to generate the page:</p>

<figure class='code'><figcaption><span>template.html </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>List of links on {{page}}<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>List of links on {{page}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {{#links}}
</span><span class='line'>    <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{{url}}}&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>{{text}}<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>    {{/links}}
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span><span class='line'>    Generated {{time}}
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we run <code>grunt lambda_invoke</code> again the task should output:</p>

<figure class='code'><figcaption><span>lambda_invoke </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_invoke:default" (lambda_invoke) task
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Message
</span><span class='line'>-------
</span><span class='line'>link-scraper complete.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Then, if we look in our target bucket there should be a file called links.html, if you view it in your browser you should see something like:</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/linkspage.png"></p>

<h1>Deploying to Lambda</h1>

<p>Before running the deploy task in grunt, go to the Lambda section of the AWS console and create a function which matches
 the name in the lambda_deploy section of your Gruntfile. In the example above the function name is <code>link-scraper</code>.</p>

<p>When creating the function select the &ldquo;Hello World&rdquo; template, as the code will be overwritten when we deploy a zip.</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/lambda-list.png"></p>

<p>If you&rsquo;ve added a deploy task to your Gruntfile as above you can now run <code>grunt deploy</code>, otherwise run both the lambda_package and lambda_deploy tasks with
 <code>grunt lambda_package lambda_deploy</code>.</p>

<p>After running that you should see something like:</p>

<figure class='code'><figcaption><span>lambda_deploy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running "lambda_package:default" (lambda_package) task
</span><span class='line'>link-scraper@1.0.0 ../../../../../../tmp/1417936030856.854/node_modules/link-scraper
</span><span class='line'>Created package at dist/link-scraper_1-0-0_2014-11-7-17-7-10.zip
</span><span class='line'>
</span><span class='line'>Running "lambda_deploy:default" (lambda_deploy) task
</span><span class='line'>Uploading...
</span><span class='line'>Package deployed.
</span><span class='line'>
</span><span class='line'>Done, without errors.</span></code></pre></td></tr></table></div></figure>


<p>Now if you go to the AWS console you should be able to successfully invoke the uploaded task:</p>

<p><img src="http://hipsterdevblog.com/images/posts/lambda_example/test_console.png"></p>

<p>After running you should see the date at the bottom of the generated links.html has been updated.</p>

<p>If for whatever reason you need to access the zip package which was uploaded you can find it under the dist directory of
 your project.</p>

<p>Congratulations, you&rsquo;ve now successfully deployed a Lambda function using NPM packages and Grunt! In future you can
 invoke this function manually, via another application using the SDK, or you could modify it to respond to one of the supported
 Lambda events such as an S3 Put event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 3: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-25T11:43:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 3 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the CodeDeploy deployment, deploying it to the configured OpsWorks stack and demonstrating the results of the integration.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Setting bucket policy and uploading deployment package</h1>

<p>Now we&rsquo;re ready to deploy a package from CodeDeploy.</p>

<p>For the purposes of this example the package will contain two files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appspec.yml
</span><span class='line'>app/index.php</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AppSpec</a> specifies that the contents of the
 App directory should be copied to the location of the placeholder OpsWorks deployment.</p>

<figure class='code'><figcaption><span>appspec.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">os</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>     <span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/www/my_app/public</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">CodeDeploy</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zip this up and upload it to your S3 bucket where you&rsquo;ll store your deployment packages.</p>

<p>If you haven&rsquo;t already done so, you will also need to apply the S3 bucket policy provided <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-deploy-revision.html">here</a>
 to allow the CodeDeploy role access to objects in this bucket:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/bucket_policy.png"></p>

<p>One important note is that you must also include the role ARN for your OpsWorks instances as above.</p>

<p>You can find the stack profile in the security settings of the layer:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/instanceprofile.png"></p>

<p>Then get the role ARN from your IAM console:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/iaminstanceprofile.png"></p>

<h1>Running CodeDeploy deployment</h1>

<p>We&rsquo;re now ready to deploy our application with CodeDeploy, head back to the CodeDeploy application you created earlier
 and create a new deployment from the zip you uploaded.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_deployment.png"></p>

<p>Click &ldquo;Deploy Now&rdquo; and wait for the deployment to conclude.</p>

<p>Should your deployment fail, click &ldquo;View All Instances&rdquo; > &ldquo;View Events&rdquo; beside an instance and click &ldquo;View Logs&rdquo; beside the failed step.</p>

<h2>Viewing your application</h2>

<p>Your application should now successfully be deployed to your OpsWorks instances. If you view the application in your
 browser you should see your deployment.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/complete.png"></p>

<h2>Caveats &ndash; Launching a new instance</h2>

<p>Unfortunately it seems CodeDeploy currently only supports automatic deployments for new instances when they&rsquo;re in
 an autoscaling group. OpsWorks only supports its own load and time based instance functionality rather than
 using autoscaling groups, and therefore you&rsquo;ll have to manually trigger a deployment after a new instance comes online
 and before you place it under your load-balancer. You may wish for your recipes to cause the load-balancer health
 check to fail by default, then have a separate recipe which enables the health check to pass which you can run manually
 once you&rsquo;ve run a deployment after a new instance has been launched.</p>

<p>Alternatively you could use your configure recipe to trigger a deployment automatically using the CodeDeploy API,
 however you would need to know which specific applications are relevant to the instance.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-24T11:43:29+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 2 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the OpsWorks Chef recipes to deploy your application via CodeDeploy.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Installing CodeDeploy agent via Chef</h1>

<p>Next we need to write a custom chef recipe to install the CodeDeploy agent and perform our desired configuration.</p>

<p>Checkout your cookbooks repository and create the following files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Berksfile
</span><span class='line'>myrecipe/metadata.rb
</span><span class='line'>myrecipe/recipes/agent-install.rb
</span><span class='line'>myrecipe/recipes/vhost.rb
</span><span class='line'>myrecipe/templates/default/myapp_vhost.erb</span></code></pre></td></tr></table></div></figure>


<p>Populate these files with the following:</p>

<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://supermarket.getchef.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(We won&rsquo;t be using <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/cookbooks-101-opsworks-berkshelf.html">Berkshelf</a>
 in this tutorial, however you&rsquo;ll probably want to create this file any way if you&rsquo;re planning to extend this tutorial
  with your own configuration)</p>

<figure class='code'><figcaption><span>myrecipe/metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="s1">&#39;myrecipe&#39;</span>
</span><span class='line'><span class="n">recipe</span> <span class="s1">&#39;myrecipe::agent-install&#39;</span><span class="p">,</span> <span class="s1">&#39;Fetches, installs, and starts the AWS CodeDeploy host agent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the code which downloads, installs and starts the CodeDeploy agent service:</p>

<figure class='code'><figcaption><span>myrecipe/recipes/agent-install.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/install&quot;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="s2">&quot;0744&quot;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;install_codedeploy_agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh auto&quot;</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;codedeploy-agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code creates a directory for the CodeDeploy to deploy to, creates the vhost and enables it.</p>

<figure class='code'><figcaption><span>myrecipe/recipes/vhost.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="s1">&#39;/srv/www/my_app/public/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;www-data&#39;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf.d/&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;myapp_vhost&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">path</span>  <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf&#39;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">link</span> <span class="s2">&quot;/etc/apache2/sites-enabled/my_app.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="s2">&quot;/etc/apache2/sites-available/my_app.conf&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a standard Apache vhost configuration based on the default OpsWorks template:</p>

<figure class='code'><figcaption><span>myrecipe/templates/default/myapp_vhost.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> myapp.com
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/srv/www/my_app/public/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">/srv/www/my_app/public/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.svn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.git&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">LogLevel</span> <span class="k">info</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/apache2/my_app-error.log</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-access.log</span> combined
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-ganglia.log</span> ganglia
</span><span class='line'>
</span><span class='line'>  <span class="nb">FileETag</span> <span class="k">none</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/rewrite</span>*
</span><span class='line'>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/local</span>*
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this step you may also like to create additional recipes for other configuration tasks, such as installing dependencies
or configuring your HTTP server.</p>

<h1>Adding recipes and packages to layer via OpsWorks</h1>

<p>Once you&rsquo;ve committed and pushed your recipes, go to OpsWorks and add the agent recipe to the configure lifecycle event
of your application server layer. Also add <code>ruby2.0</code> and <code>awscli</code> to the OS packages.</p>

<p> <img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/recipes.png"></p>

<h1>Creating placeholder deployment</h1>

<p>Because OpsWorks doesn&rsquo;t perform certain default configuration tasks (such as creating a www-data group) until
 a deployment occurs it&rsquo;s easiest to create a placeholder OpsWorks deployment with a holding page which will be replaced
 by CodeDeploy. You could of course skip this step and manually configure everything via custom recipes.</p>

<p>In this instance we&rsquo;ll create a new repository for the placeholder which contains nothing but an index.php file containing
 a placeholder message.</p>

<figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">undergoing</span> <span class="nx">maintenance</span><span class="p">,</span> <span class="nx">please</span> <span class="k">try</span> <span class="nx">reloading</span> <span class="nx">the</span> <span class="nx">page</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create this deployment in OpsWorks:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/opsworksdeploy.png"></p>

<h1>Starting an instance</h1>

<p>You can now start an instance in OpsWorks. It usually takes at least 20 minutes to boot and execute the setup and configure
 recipes. After this has complete your instance should have a status of online:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/online.png"></p>

<p>You should also see the placeholder message when you visit the IP in a browser:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/holding.png"></p>

<p>This should also have installed and started the CodeDeploy agent.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-23T11:09:28+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>Amazon <a href="http://aws.amazon.com/blogs/aws/code-management-and-deployment/">recently announced</a> a new deployment service
called <a href="http://aws.amazon.com/codedeploy/">CodeDeploy</a>. <a href="http://aws.amazon.com/opsworks/">OpsWorks</a> is another application
 management product which provides excellent configuration management via <a href="https://www.getchef.com/">Chef</a>, however it
lacks the advanced deployment functionality of CodeDeploy. It therefore makes sense to integrate these two products,
delegating the configuration management to OpsWorks and the deployment functionality to CodeDeploy.</p>

<p>This is part 1 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section provides an introduction to OpsWorks and CodeDeploy, and the basic configuration required to get started.</p>

<!-- more -->


<h2>Why not just use OpsWorks?</h2>

<p>OpsWorks is a great product, but it lacks several key deployment features such as the ability to run rolling
 deployments and cancel an in-flight deployment.</p>

<h2>Why not just use CodeDeploy?</h2>

<p>While CodeDeploy does support the execution of configuration scripts in lifecycle events, these could easily become
 difficult to maintain if your configuration is complex. Also, the configuration might not belong to any specific
 application, and if you&rsquo;re running multiple applications per instance it might make sense to configure certain
 shared services on a per-server basis rather than per-application. OpsWorks is an excellent solution to these issues
 as it supports Chef and per-instance setup and configuration lifecycle events.</p>

<h1>Getting started</h1>

<p>To get started you&rsquo;ll need to set up an OpsWorks stack with a custom cookbook repository. The stack also must be created
 in a region where CodeDeploy is supported, such as North Virginia. If you&rsquo;re using a VPC don&rsquo;t forget to configure your
  VPC to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">allow external connectivity</a>.</p>

<p>My stack configuration is as follows, as you can see I&rsquo;ll be using Ubuntu 14.04, but the steps should be similar on
 Amazon linux.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/stack.png"></p>

<p>Also, create a layer for your application servers. For example I&rsquo;ve created a PHP App Server layer. Don&rsquo;t forget to
 enable &ldquo;Public IP addresses&rdquo; under the networking options.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/layer.png"></p>

<p>In this example I&rsquo;m also going to deploy from S3, rather than GitHub. Therefore I&rsquo;ll assume you have an S3 bucket created
to host the zip deployment packages.</p>

<h1>Creating a CodeDeploy Service Role</h1>

<p>You&rsquo;ll need to create a service role for CodeDeploy before proceeding, although if you&rsquo;ve already followed the &ldquo;Sample
Deployment&rdquo; wizard then you will probably have created one at the following step:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policywizard.png"></p>

<p>If you need to create one manually then you can <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html">follow these steps</a>
 to first create a role with the following policy:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policy.png"></p>

<p>Then set the trust relationships:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/trust.png"></p>

<h1>Creating CodeDeploy application</h1>

<p>Next go to the CodeDeploy console and create a new application using the &ldquo;Custom Deployment&rdquo; option.</p>

<p>In the application options you have to define which EC2 instance tags will be included in the deployment. Set the <code>
opsworks:stack</code> and <code>opsworks:layer:php-app</code> to the name of your stack and layer respectively.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_app.png"></p>

<p>Select a Deployment Config (eg. <code>CodeDeployDefault.OneAtATime</code>), and set the Service Role ARN to the service
 role you created earlier.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NY Taxi Data Visualized]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized/"/>
    <updated>2014-06-27T11:58:54+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized</id>
    <content type="html"><![CDATA[<p>Recently a massive dataset of <a href="http://chriswhong.com/open-data/foil_nyc_taxi/">NYC Taxi Data</a> was made public. There are torrents available but at 19gb the data can be quite unwieldy to manage on a home machine. /r/BigQuery have <a href="http://www.reddit.com/r/bigquery/comments/28ialf/173_million_2013_nyc_taxi_rides_shared_on_bigquery/">uploaded</a> the dataset to Google&rsquo;s BigQuery service.</p>

<p>BQ provides a simple way to get insights out of this dataset without tearing through your internet usage or waiting for your home machine to query 173 million records. For example on reddit they have already discovered some <a href="https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1">anonymization issues</a>.</p>

<p>I&rsquo;ve taken some of the popular Queries and charted them.</p>

<!-- more -->


<h2>Histogram of tips as a % of fare.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart16f573026d1' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart16f573026d1()
    });
    function drawchart16f573026d1(){  
      var opts = {
 "dom": "chart16f573026d1",
"width":    800,
"height":    400,
"x": "tip_pct",
"y": "trips",
"type": "multiBarChart",
"id": "chart16f573026d1" 
},
        data = [
 {
 "tip_pct": "0%",
"trips": 3227816 
},
{
 "tip_pct": "1%",
"trips": 78606 
},
{
 "tip_pct": "2%",
"trips": 57945 
},
{
 "tip_pct": "3%",
"trips": 75351 
},
{
 "tip_pct": "4%",
"trips": 199571 
},
{
 "tip_pct": "5%",
"trips": 394763 
},
{
 "tip_pct": "6%",
"trips": 732748 
},
{
 "tip_pct": "7%",
"trips": 1001344 
},
{
 "tip_pct": "8%",
"trips": 1395657 
},
{
 "tip_pct": "9%",
"trips": 1516062 
},
{
 "tip_pct": "10%",
"trips": 2296492 
},
{
 "tip_pct": "11%",
"trips": 2813566 
},
{
 "tip_pct": "12%",
"trips": 2020426 
},
{
 "tip_pct": "13%",
"trips": 3641555 
},
{
 "tip_pct": "14%",
"trips": 2638662 
},
{
 "tip_pct": "15%",
"trips": 2659690 
},
{
 "tip_pct": "16%",
"trips": 1182530 
},
{
 "tip_pct": "17%",
"trips": 2604529 
},
{
 "tip_pct": "18%",
"trips": 2105279 
},
{
 "tip_pct": "19%",
"trips": 1140029 
},
{
 "tip_pct": "20%",
"trips": 14690183 
},
{
 "tip_pct": "21%",
"trips": 16606601 
},
{
 "tip_pct": "22%",
"trips": 9957665 
},
{
 "tip_pct": "23%",
"trips": 4688858 
},
{
 "tip_pct": "24%",
"trips": 2721643 
},
{
 "tip_pct": "25%",
"trips": 4876902 
},
{
 "tip_pct": "26%",
"trips": 3453940 
},
{
 "tip_pct": "27%",
"trips": 2587272 
},
{
 "tip_pct": "28%",
"trips": 1356344 
},
{
 "tip_pct": "29%",
"trips": 1217443 
},
{
 "tip_pct": "30%",
"trips": 1729572 
},
{
 "tip_pct": "31%",
"trips": 1186658 
},
{
 "tip_pct": "32%",
"trips": 1011215 
},
{
 "tip_pct": "33%",
"trips": 969247 
},
{
 "tip_pct": "34%",
"trips": 341499 
},
{
 "tip_pct": "35%",
"trips": 307730 
},
{
 "tip_pct": "36%",
"trips": 300208 
},
{
 "tip_pct": "37%",
"trips": 89795 
},
{
 "tip_pct": "38%",
"trips": 171289 
},
{
 "tip_pct": "39%",
"trips": 41494 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="n">ROUND</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span> <span class="o">/</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="n">tip_pct</span><span class="p">,</span>
</span><span class='line'>  <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">trips</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span> <span class="k">and</span> <span class="nb">float</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Speed Over Hour.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart7708516d29c5' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart7708516d29c5()
    });
    function drawchart7708516d29c5(){  
      var opts = {
 "dom": "chart7708516d29c5",
"width":    800,
"height":    400,
"x": "hour",
"y": "speed",
"type": "lineChart",
"id": "chart7708516d29c5" 
},
        data = [
 {
 "hour": 0,
"speed":             16 
},
{
 "hour": 1,
"speed":             17 
},
{
 "hour": 2,
"speed":             17 
},
{
 "hour": 3,
"speed":             18 
},
{
 "hour": 4,
"speed":             20 
},
{
 "hour": 5,
"speed":             22 
},
{
 "hour": 6,
"speed":             18 
},
{
 "hour": 7,
"speed":             14 
},
{
 "hour": 8,
"speed":             12 
},
{
 "hour": 9,
"speed":             11 
},
{
 "hour": 10,
"speed":             12 
},
{
 "hour": 11,
"speed":             11 
},
{
 "hour": 12,
"speed":             11 
},
{
 "hour": 13,
"speed":             11 
},
{
 "hour": 14,
"speed":             11 
},
{
 "hour": 15,
"speed":             11 
},
{
 "hour": 16,
"speed":             12 
},
{
 "hour": 17,
"speed":             12 
},
{
 "hour": 18,
"speed":             12 
},
{
 "hour": 19,
"speed":             12 
},
{
 "hour": 20,
"speed":             14 
},
{
 "hour": 21,
"speed":             14 
},
{
 "hour": 22,
"speed":             15 
},
{
 "hour": 23,
"speed":             15 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">HOUR</span><span class="p">(</span><span class="k">TIMESTAMP</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">))</span> <span class="k">as</span> <span class="n">hour</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ROUND</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span><span class="o">/</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">))</span> <span class="k">AS</span> <span class="n">speed</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_data</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>  <span class="nb">INTEGER</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">AND</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">90</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Tip Over Month.</h2>

<div>


  <body >
    
    <div id = 'chart77081e63288d' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart77081e63288d()
    });
    function drawchart77081e63288d(){  
      var opts = {
 "dom": "chart77081e63288d",
"width":    800,
"height":    400,
"x": "month",
"y": "avg_tip",
"type": "lineChart",
"id": "chart77081e63288d" 
},
        data = [
 {
 "avg_tip":           2.41,
"month": 1 
},
{
 "avg_tip":            2.4,
"month": 2 
},
{
 "avg_tip":           2.46,
"month": 3 
},
{
 "avg_tip":            2.5,
"month": 4 
},
{
 "avg_tip":           2.55,
"month": 5 
},
{
 "avg_tip":           2.56,
"month": 6 
},
{
 "avg_tip":            2.5,
"month": 7 
},
{
 "avg_tip":           2.53,
"month": 8 
},
{
 "avg_tip":           2.58,
"month": 9 
},
{
 "avg_tip":           2.59,
"month": 10 
},
{
 "avg_tip":           2.55,
"month": 11 
},
{
 "avg_tip":           2.63,
"month": 12 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span> <span class="n">avg_tip</span><span class="p">,</span>
</span><span class='line'>  <span class="n">REGEXP_EXTRACT</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">,</span> <span class="ss">&quot;2013-([0-9]*)&quot;</span><span class="p">)</span> <span class="k">month</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">2</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF's in Ruby]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby/"/>
    <updated>2014-06-25T21:18:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby</id>
    <content type="html"><![CDATA[<p>Avoid using PDF&rsquo;s in your application. There are no great solutions to PDF generation in general, and Ruby does not have any perfect options. If you really need PDF&rsquo;s, this is the landscape of options, and my suggestion.</p>

<!-- more -->


<h2>HTML to PDF</h2>

<p>PDF generation in Ruby, and in general, comes down to libraries that turn HTML + CSS into PDF&rsquo;s, and libraries that abstract the PDF standard into programmatic creation of documents.</p>

<p>The gold standard of HTML to PDF is <a href="http://www.princexml.com/">PrinceXML</a>. By all accounts this is a great product, used by big corporates and universities. However if the XML in the title didn&rsquo;t give it away, this is very much an &lsquo;enterprise&rsquo; product, starting at $3800 for a single license!</p>

<p>The open source alternative is <a href="http://wkhtmltopdf.org/">wkhtmltopdf</a>. Two gems that leverage this library are <a href="https://github.com/pdfkit/pdfkit">PDFKit</a> and <a href="https://github.com/mileszs/wicked_pdf">Wicked PDF</a>.</p>

<p>At first these libraries seem great, code in what you know, leverage existing controllers and even views. Ultimately though its a fairly bad abstraction, and PDF rendering can be slow and unreliable. This is not a problem unique to Ruby and I suspect it&rsquo;s why PrinceXML can still get away with their pricing.</p>

<p>The Ruby alternative is <a href="http://prawnpdf.org/api-docs/">Prawn</a>, a gem with a DSL for building documents.</p>

<h2>Go the raw Prawn</h2>

<p>Prawn does have a learning curve, but it performs well, doesn&rsquo;t rely on external binaries and gives full access to layout and paging. The prawn DSL is described fairly well in the <a href="http://prawnpdf.org/manual.pdf">manual</a> (generated of course in Prawn). Be careful using code examples on Github and older blog posts, Prawn has had some major API changes over time and a lot of old code examples floating around wont work.</p>

<p>For example Prawn has template functionality, that lets you use an existing PDF as a template. However when template PDF&rsquo;s are too large this feature crashes silently rendering a blank PDF.</p>

<p>If you stick to the methods used in the manual and learn the DSL Prawn is a flexible and reliable solution. The Prawn way of building documents makes a lot of sense and the simplicity of having no external requirements makes integrating into all kinds of Ruby projects easy.</p>

<h2>General PDF Weirdness</h2>

<p>Some things to watch out for</p>

<ul>
<li>Merging PDF&rsquo;s &ndash; there are absolutely no Ruby gems capable of doing this reliably, shelling out to something like <a href="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/">PDFtk</a> does work but is far from ideal.</li>
<li>Google Chrome PDF Viewer Issue &ndash; This is a really odd issue that I eventually found in a google support ticket. The PDF viewer in chrome cant copy any text containing a line ending in &lsquo;&ndash;&rsquo; (and possibly some other characters). This issue doesn&rsquo;t exist in any other PDF viewer and is unlikely to effect most applications, but its a good example of the fun world of PDF&rsquo;s!</li>
<li>Editing existing PDF&rsquo;s &ndash; don&rsquo;t even try, as mentioned previously Prawn claims to do this but it doesn&rsquo;t work very well</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic DNS Records Using Route53 on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53/"/>
    <updated>2014-06-23T18:28:23+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53</id>
    <content type="html"><![CDATA[<p>
    Lets say you have a load balanced web application managed with OpsWorks – your application traffic will be addressed
    to the load balancer, but sometimes it&#8217;s still handy to address your application nodes directly for testing
    purposes or perhaps so each node has a unique SNS endpoint for HTTP notifications. You could just  use their IP,
    but unless you use an EIP that IP address may change. You could create a DNS record, which would be easier to remember
    and allows the IP to change – but managing this manually would be a pain.
</p>




<p>
    Fortunately this process of managing DNS records can be automated using Chef, Route53 and the EC2 instance
    metadata functionality to obtain the public IP. Each instance will automatically create an A record for
    <code>[instance name].example.com</code> on setup using their OpsWorks instance name.
</p>




<!-- more -->




<h2>Getting started</h2>


<p>
    Firstly, I&#8217;ll assume you have a Route53 zone created – in my case the zone will be called <code>example.com</code>.
    You&#8217;ll also need a set of AWS access keys, I recommend creating an IAM user restricted to managing your hosted zone.
    You can use the following IAM user policy:
</p>


<figure class='code'><figcaption><span>IAM User Policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403515694000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;route53:ChangeResourceRecordSets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:GetHostedZone&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:ListResourceRecordSets&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:route53:::hostedzone/&lt;insert your hosted zone ID&gt;&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Next add your AWS credentials and zone ID as custom JSON variables in your OpsWorks stack:
</p>


<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;dns_zone_id&quot;</span>      <span class="p">:</span> <span class="s2">&quot;&lt;insert hosted zone ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
 Adding custom JSON to your stack is covered in more detail in
 <a target="_blank" href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">Retrieving Files From S3 Using Chef on OpsWorks</a>.
</p>


<p>
    Finally, add the <a target="_blank" href="http://community.opscode.com/cookbooks/route53">route53 cookbook</a>
    to your Berksfile. If you&#8217;re not using Berkshelf you&#8217;ll have to clone the whole cookbook into your custom cookbook
    repository.
</p>




<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://api.berkshelf.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;route53&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 0.3.4&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating your recipes</h2>


<p>
    Next, we need to create a custom cookbook and recipes – in this example the cookbook is called <code>dnsupdate</code>.
     Create the following file structure and files in your custom cookbook repository:
</p>




<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnsupdate/metadata.rb
</span><span class='line'>dnsupdate/recipes/add.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;dnsupdate&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Update Route53 Zone&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;route53&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>recipes/add.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;route53&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">route53_record</span> <span class="s2">&quot;create a record&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span>  <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:instance</span><span class="o">][</span><span class="ss">:hostname</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;.example.com&#39;</span>
</span><span class='line'>  <span class="n">value</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;http://169.254.169.254/latest/meta-data/public-ipv4&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">type</span>  <span class="s2">&quot;A&quot;</span>
</span><span class='line'>  <span class="n">ttl</span>   <span class="mi">60</span>
</span><span class='line'>  <span class="n">zone_id</span>               <span class="n">node</span><span class="o">[</span><span class="ss">:dns_zone_id</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span>     <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">overwrite</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Substitute <code>.example.com</code> with your own domain. <code>Net::HTTP.get(URI.parse('http://169.254.169.254/latest/meta-data/public-ipv4'))</code>
    is using the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">instance data API</a> to obtain the public IP
      – use the IP above any instance.
</p>




<h2>Adding recipe to life cycle event</h2>


<p>
    Once you&#8217;ve committed and pushed the new recipe to your custom cookbook repository you&#8217;re ready to add the recipe
    to the configure life cycle event. First update your custom cookbooks, by going to your stack > Run Command > and
    selecting &#8216;Update Custom Cookbooks&#8217; from the command select box.
</p>


<p>
    Finally, navigate to a layer in OpsWorks > Edit > Recipes > add &#8216;dnsupdate::add&#8217; to the configure
    event and save.
</p>


<p><img src="http://hipsterdevblog.com/images/posts/route53_dns/add_recipe.png"></p>

<p>
    Now when the run the configure event you should see a new DNS A record being added in Route53!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Processing Images Using S3 and Redirection Rules]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules/"/>
    <updated>2014-06-22T19:14:44+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules</id>
    <content type="html"><![CDATA[<p>
    In a system dealing with user generated images it&#8217;s common to have to resize images before they can be served to the web.
    Storing and serving large quantities of user generated images can also be a challenge – that is unless you&#8217;re using
    AWS S3. A typical implementation using S3 to store and serve images requires images to be resized into every required
    size and saved to S3 upon being uploaded. An unfortunate limitation of this technique is that you must know all
     required sizes at the time the image is uploaded – something that may not be constant, consistent or known in some
     (particularly legacy) applications.
</p>


<p>
     One solution is to automatically resize images the first time they&#8217;re requested
     using dimensions provided in the image URL, this way the application requesting the image can choose an appropriate
     size. While S3 doesn&#8217;t provide functionality to transparently proxy image misses to your image processor, it is
     possible to use S3 <a target="_blank" href="http://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html">S3
     routing rules</a> to achieve a similar function.
</p>


<!-- more -->


<h2>Overview</h2>


<p>
    Using routing rules it&#8217;s possible to return a 302 redirect whenever a 404 error occurs, this 302 redirect can then
    take the user to your EC2 instance which resizes the image, serves it to them then saves the resized copy back to
     the original bucket so future visitors won&#8217;t be redirected.
</p>


<p><img class="left" src="http://hipsterdevblog.com/images/posts/s3_lazy_process/s3_route.png"></p>

<h2>Implementation</h2>


<p>
    First, it&#8217;s assumed that you have a bucket setup to serve its content publicly on one domain and your processing
    server on another. Both domains must use the same URL structure for images aside from the host name, so for example
     <code>images.domain.com/widgets/myimage_600_400.jpg</code> and <code>process.domain.com/widgets/myimage_600_400.jpg</code>
     should both work (assuming <code>images.mydomain.com</code> is the bucket and <code>process.mydomain.com</code> is the processor).
</p>


<p>
    When receiving a request <code>process.mydomain.com</code> should resize the image (most likely after obtaining the
    image from another private bucket for originals), serve that image to the visitor then save it back to
    the <code>images.mydomain.com</code> bucket.
</p>


<p>
    Next – go to the bucket in the S3 console, go to the bucket properties and enter the following routing rules
    in the &#8216;Enable website hosting&#8217; accordion menu:
</p>


<figure class='code'><figcaption><span>Routing rules </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RoutingRules&gt;</span>
</span><span class='line'>    <span class="nt">&lt;RoutingRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Condition&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpErrorCodeReturnedEquals&gt;</span>404<span class="nt">&lt;/HttpErrorCodeReturnedEquals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Condition&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Redirect&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HostName&gt;</span>process.domain.com<span class="nt">&lt;/HostName&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpRedirectCode&gt;</span>302<span class="nt">&lt;/HttpRedirectCode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Redirect&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/RoutingRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/RoutingRules&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://hipsterdevblog.com/images/posts/s3_lazy_process/bucket_config.png"></p>

<p>
    You now have lazy image processing!
</p>


<h2>Enter CloudFront</h2>


<p>
    S3 is a reasonably effective CDN (in the sense that it offloads serving images), but it&#8217;s not geographically
    distributed and if you&#8217;re serving images to visitors across the globe you may wish to also implement CloudFront.
    Unfortunately you can&#8217;t simply setup CloudFront to use the <code>images.mydomain.com</code> bucket as an origin because
     CloudFront will cache the 302 redirects for a minimum of 60 minutes – meaning your image processor might process the same image many times.
</p>


<p>
    One solution is to put a second CloudFront distribution in front of <code>process.domain.com</code> and set the S3
    redirect to use that CloudFront endpoint rather than the processor directly. In this scenario the first region to receive
     a request will pass through the first CloudFront distribution, the S3 bucket, the second CloudFront distribution
     and then hit the processor. The second request from that same region should then hit the second CloudFront distribution
     as will every other request from this region until the 302 redirect expires.
     Users making requests from other regions after the first request won&#8217;t have the 302 redirect in the cache for their region
     so they should hit the file in the S3 bucket which will then get cached in their region.
</p>


<h2>Caveats</h2>


<p>
    While this approach is certainly effective in some scenarios it&#8217;s not exactly <em>elegant</em>.
    Be sure to first consider whether CloudFront alone or
    resizing images in advance would work better in your situation. It&#8217;s also worth keeping in mind that all genuine
    404 requests (that is for images which don&#8217;t exist at all) will get passed to your server and won&#8217;t be offloaded to S3.
</p>


<p>
    Be careful when lazy processing images in general – if you don&#8217;t implement some form of rate limiting you may
      end up being vulnerable to a Denial of Service attack if someone were to try and request thousands of images in
      different sizes.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrieving Files From S3 Using Chef on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/"/>
    <updated>2014-06-22T17:44:02+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks</id>
    <content type="html"><![CDATA[<p>
    Say you wanted to manage some configuration file in your OpsWorks stack – typically you&#8217;d create a custom Chef recipe,
    make your configuration file a template and store it within your custom cookbook repository. This approach works well
    in most instances, but what if the file is something not suited to version control such as a large binary file or
    perhaps a programmatically generated artifact of your system?
</p>


<p>
    In these cases you may prefer to store the file in an S3 bucket and automatically download a copy of the file
    as part of a custom recipe. In my case I wanted to have a dynamically generated (by a separate system)
    vhost configuration file which could be deployed to a stack using a simple recipe.
</p>


<!-- more -->


<h2>Adding AWS cookbook via Berkshelf</h2>




<p>
    The first thing you&#8217;ll need to do is add the OpsCode <a target="_blank" href="http://community.opscode.com/cookbooks/aws">AWS
    cookbook</a> to your Berkfile. Note that Berkshelf is only supported on Chef 11.10 or higher on OpsWorks, so if your
    OpsWorks stack has an older version selected you&#8217;ll have to either upgrade or include the whole AWS cookbook in your
    custom cookbook repository.
</p>


<p>
    If you don&#8217;t already have a Berkfile you&#8217;ll need to create one in your custom cookbook repository, otherwise simply
    add the AWS cookbook. Your Berkfile should look something like this:
</p>


<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://api.berkshelf.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;aws&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 2.2.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating an S3 bucket and a user which can access it</h2>


<p>
    You can probably figure out how to create a bucket on your own. In my case I have a bucket called &#8216;test-site-config&#8217;
    and a file in there called &#8216;vhost.map&#8217; which I want to download via Chef.
</p>


<p> <img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/bucket.png"></p>

<p>
    Next you&#8217;ll need some AWS credentials for Chef to use while downloading the file. You can use your root account
    but I&#8217;d strongly suggest using an IAM user limited to your bucket instead. If you create a new IAM user you can
    use the following policy which will only permit reading objects from the specified S3 bucket (obviously replace
    &#8216;test-site-config&#8217; with your own bucket name:
</p>


<figure class='code'><figcaption><span>IAM policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403407152000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;s3:GetObject&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::test-site-config/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Passing AWS credentials via custom JSON</h2>


<p>
    Now navigate to your stack in the OpsWorks console, click &#8216;Stack Settings&#8217; then &#8216;Edit&#8217; and modify the Custom JSON
    field to include variables for your access and secret key. If you already have custom JSON values then you&#8217;ll
    need to merge the new values with your existing JSON, otherwise you can use the code below:
</p>


<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/edit_stack.png"></p>

<h2>Creating your custom recipe</h2>


<p>
    In this instance I&#8217;ll create a new recipe called &#8216;deployfile&#8217; which does nothing but download my file and save it to the specified
    location, however you could just as easily include this code within an existing recipe.
</p>


<p>
    Create the following file structure and use the code below in your custom cookbook repository:
</p>


<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deployfile/metadata.rb
</span><span class='line'>deployfile/recipes/default.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;deployfile&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Deploy File From S3&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;aws&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>recipes/default.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;aws&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_s3_file</span> <span class="s2">&quot;/etc/apache2/vhost.map&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bucket</span> <span class="s2">&quot;test-site-config&quot;</span>
</span><span class='line'>  <span class="n">remote_path</span> <span class="s2">&quot;vhost.map&quot;</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Substitute <code>/etc/apache2/vhost.map</code> with the destination on your nodes, the bucket name and the remote
    path as required. You can also use other attributes belonging to the <a target="_blank" href="http://docs.opscode.com/resource_file.html">Chef
    file resource</a>.
</p>




<h2>Updating stack and executing recipe</h2>


<p>Once the code above has been committed and pushed back to your repository you&#8217;re finally ready to execute the recipe.</p>




<p>Go to your stack and click &#8216;Run Command&#8217;, select &#8216;Update Custom Cookbooks&#8217;:</p>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/update_cookbook.png"></p>

<p>Once OpsWorks has finished updating your custom cookbooks go back to &#8216;Run Command&#8217; and select &#8216;Execute Recipes&#8217;.
Enter the name of your recipe into the &#8216;Recipes to execute&#8217; field:</p>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/deploy_file.png"></p>

<p>Alternatively you can add your recipe to a layer life-cycle event (such as setup) and execute that life-cycle event
instead</p>


<p>Once that recipe has finished executing the file downloaded from S3 should now be present on your system!</p>

]]></content>
  </entry>
  
</feed>

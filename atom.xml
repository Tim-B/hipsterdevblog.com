<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[:HIPSTER_DEV_BLOG]]></title>
  <link href="http://hipsterdevblog.com/atom.xml" rel="self"/>
  <link href="http://hipsterdevblog.com/"/>
  <updated>2014-11-27T21:02:52+10:00</updated>
  <id>http://hipsterdevblog.com/</id>
  <author>
    <name><![CDATA[Tim B.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part 3: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-25T11:43:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 3 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the CodeDeploy deployment, deploying it to the configured OpsWorks stack and demonstrating the results of the integration.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Setting bucket policy and uploading deployment package</h1>

<p>Now we&rsquo;re ready to deploy a package from CodeDeploy.</p>

<p>For the purposes of this example the package will contain two files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>appspec.yml
</span><span class='line'>app/index.php</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AppSpec</a> specifies that the contents of the
 App directory should be copied to the location of the placeholder OpsWorks deployment.</p>

<figure class='code'><figcaption><span>appspec.yml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">0.0</span>
</span><span class='line'><span class="l-Scalar-Plain">os</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">linux</span>
</span><span class='line'><span class="l-Scalar-Plain">files</span><span class="p-Indicator">:</span>
</span><span class='line'>   <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">app</span>
</span><span class='line'>     <span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/srv/www/my_app/public</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">from</span> <span class="nx">CodeDeploy</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Zip this up and upload it to your S3 bucket where you&rsquo;ll store your deployment packages.</p>

<p>If you haven&rsquo;t already done so, you will also need to apply the S3 bucket policy provided <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-deploy-revision.html">here</a>
 to allow the CodeDeploy role access to objects in this bucket:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/bucket_policy.png"></p>

<p>One important note is that you must also include the role ARN for your OpsWorks instances as above.</p>

<p>You can find the stack profile in the security settings of the layer:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/instanceprofile.png"></p>

<p>Then get the role ARN from your IAM console:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/iaminstanceprofile.png"></p>

<h1>Running CodeDeploy deployment</h1>

<p>We&rsquo;re now ready to deploy our application with CodeDeploy, head back to the CodeDeploy application you created earlier
 and create a new deployment from the zip you uploaded.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_deployment.png"></p>

<p>Click &ldquo;Deploy Now&rdquo; and wait for the deployment to conclude.</p>

<p>Should your deployment fail, click &ldquo;View All Instances&rdquo; > &ldquo;View Events&rdquo; beside an instance and click &ldquo;View Logs&rdquo; beside the failed step.</p>

<h2>Viewing your application</h2>

<p>Your application should now successfully be deployed to your OpsWorks instances. If you view the application in your
 browser you should see your deployment.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/complete.png"></p>

<h2>Caveats &ndash; Launching a new instance</h2>

<p>Unfortunately it seems CodeDeploy currently only supports automatic deployments for new instances when they&rsquo;re in
 an autoscaling group. OpsWorks only supports its own load and time based instance functionality rather than
 using autoscaling groups, and therefore you&rsquo;ll have to manually trigger a deployment after a new instance comes online
 and before you place it under your load-balancer. You may wish for your recipes to cause the load-balancer health
 check to fail by default, then have a separate recipe which enables the health check to pass which you can run manually
 once you&rsquo;ve run a deployment after a new instance has been launched.</p>

<p>Alternatively you could use your configure recipe to trigger a deployment automatically using the CodeDeploy API,
 however you would need to know which specific applications are relevant to the instance.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 2: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-24T11:43:29+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>This is part 2 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section covers creating the OpsWorks Chef recipes to deploy your application via CodeDeploy.
 <a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Click here</a> for Part 1.</p>

<!-- more -->


<h1>Installing CodeDeploy agent via Chef</h1>

<p>Next we need to write a custom chef recipe to install the CodeDeploy agent and perform our desired configuration.</p>

<p>Checkout your cookbooks repository and create the following files:</p>

<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Berksfile
</span><span class='line'>myrecipe/metadata.rb
</span><span class='line'>myrecipe/recipes/agent-install.rb
</span><span class='line'>myrecipe/recipes/vhost.rb
</span><span class='line'>myrecipe/templates/default/myapp_vhost.erb</span></code></pre></td></tr></table></div></figure>


<p>Populate these files with the following:</p>

<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://supermarket.getchef.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(We won&rsquo;t be using <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/cookbooks-101-opsworks-berkshelf.html">Berkshelf</a>
 in this tutorial, however you&rsquo;ll probably want to create this file any way if you&rsquo;re planning to extend this tutorial
  with your own configuration)</p>

<figure class='code'><figcaption><span>myrecipe/metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="s1">&#39;myrecipe&#39;</span>
</span><span class='line'><span class="n">recipe</span> <span class="s1">&#39;myrecipe::agent-install&#39;</span><span class="p">,</span> <span class="s1">&#39;Fetches, installs, and starts the AWS CodeDeploy host agent&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the code which downloads, installs and starts the CodeDeploy agent service:</p>

<figure class='code'><figcaption><span>myrecipe/recipes/agent-install.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="s2">&quot;https://s3.amazonaws.com/aws-codedeploy-us-east-1/latest/install&quot;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="s2">&quot;0744&quot;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;install_codedeploy_agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Chef</span><span class="o">::</span><span class="no">Config</span><span class="o">[</span><span class="ss">:file_cache_path</span><span class="o">]</span><span class="si">}</span><span class="s2">/codedeploy-install.sh auto&quot;</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;codedeploy-agent&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code creates a directory for the CodeDeploy to deploy to, creates the vhost and enables it.</p>

<figure class='code'><figcaption><span>myrecipe/recipes/vhost.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="s1">&#39;/srv/www/my_app/public/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;www-data&#39;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf.d/&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;myapp_vhost&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">path</span>  <span class="s1">&#39;/etc/apache2/sites-available/my_app.conf&#39;</span>
</span><span class='line'>    <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>    <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">link</span> <span class="s2">&quot;/etc/apache2/sites-enabled/my_app.conf&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">to</span> <span class="s2">&quot;/etc/apache2/sites-available/my_app.conf&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a standard Apache vhost configuration based on the default OpsWorks template:</p>

<figure class='code'><figcaption><span>myrecipe/templates/default/myapp_vhost.erb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> myapp.com
</span><span class='line'>  <span class="nb">DocumentRoot</span> <span class="sx">/srv/www/my_app/public/</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">/srv/www/my_app/public/</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Options</span> FollowSymLinks
</span><span class='line'>    <span class="nb">AllowOverride</span> <span class="k">All</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Allow</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.svn&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;Directory</span> <span class="s">~ &quot;\.git&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">Order</span> allow,deny
</span><span class='line'>    <span class="nb">Deny</span> from <span class="k">all</span>
</span><span class='line'>  <span class="nt">&lt;/Directory&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">LogLevel</span> <span class="k">info</span>
</span><span class='line'>  <span class="nb">ErrorLog</span> <span class="sx">/var/log/apache2/my_app-error.log</span>
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-access.log</span> combined
</span><span class='line'>  <span class="nb">CustomLog</span> <span class="sx">/var/log/apache2/my_app-ganglia.log</span> ganglia
</span><span class='line'>
</span><span class='line'>  <span class="nb">FileETag</span> <span class="k">none</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">RewriteEngine</span> <span class="k">On</span>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/rewrite</span>*
</span><span class='line'>
</span><span class='line'>  <span class="nb">IncludeOptional</span> <span class="sx">/etc/apache2/sites-available/my_app.conf.d/local</span>*
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this step you may also like to create additional recipes for other configuration tasks, such as installing dependencies
or configuring your HTTP server.</p>

<h1>Adding recipes and packages to layer via OpsWorks</h1>

<p>Once you&rsquo;ve committed and pushed your recipes, go to OpsWorks and add the agent recipe to the configure lifecycle event
of your application server layer. Also add <code>ruby2.0</code> and <code>awscli</code> to the OS packages.</p>

<p> <img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/recipes.png"></p>

<h1>Creating placeholder deployment</h1>

<p>Because OpsWorks doesn&rsquo;t perform certain default configuration tasks (such as creating a www-data group) until
 a deployment occurs it&rsquo;s easiest to create a placeholder OpsWorks deployment with a holding page which will be replaced
 by CodeDeploy. You could of course skip this step and manually configure everything via custom recipes.</p>

<p>In this instance we&rsquo;ll create a new repository for the placeholder which contains nothing but an index.php file containing
 a placeholder message.</p>

<figure class='code'><figcaption><span>index.php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="k">This</span> <span class="nx">server</span> <span class="nx">is</span> <span class="nx">undergoing</span> <span class="nx">maintenance</span><span class="p">,</span> <span class="nx">please</span> <span class="k">try</span> <span class="nx">reloading</span> <span class="nx">the</span> <span class="nx">page</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create this deployment in OpsWorks:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/opsworksdeploy.png"></p>

<h1>Starting an instance</h1>

<p>You can now start an instance in OpsWorks. It usually takes at least 20 minutes to boot and execute the setup and configure
 recipes. After this has complete your instance should have a status of online:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/online.png"></p>

<p>You should also see the placeholder message when you visit the IP in a browser:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/holding.png"></p>

<p>This should also have installed and started the CodeDeploy agent.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part 1: Integrating OpsWorks and CodeDeploy]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/"/>
    <updated>2014-11-23T11:09:28+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy</id>
    <content type="html"><![CDATA[<p>Amazon <a href="http://aws.amazon.com/blogs/aws/code-management-and-deployment/">recently announced</a> a new deployment service
called <a href="http://aws.amazon.com/codedeploy/">CodeDeploy</a>. <a href="http://aws.amazon.com/opsworks/">OpsWorks</a> is another application
 management product which provides excellent configuration management via <a href="https://www.getchef.com/">Chef</a>, however it
lacks the advanced deployment functionality of CodeDeploy. It therefore makes sense to integrate these two products,
delegating the configuration management to OpsWorks and the deployment functionality to CodeDeploy.</p>

<p>This is part 1 of <a href="http://hipsterdevblog.com/blog/categories/integrating-opsworks-and-codedeploy/">integrating OpsWorks and CodeDeploy</a>.</p>

<p>This section provides an introduction to OpsWorks and CodeDeploy, and the basic configuration required to get started.</p>

<!-- more -->


<h2>Why not just use OpsWorks?</h2>

<p>OpsWorks is a great product, but it lacks several key deployment features such as the ability to run rolling
 deployments and cancel an in-flight deployment.</p>

<h2>Why not just use CodeDeploy?</h2>

<p>While CodeDeploy does support the execution of configuration scripts in lifecycle events, these could easily become
 difficult to maintain if your configuration is complex. Also, the configuration might not belong to any specific
 application, and if you&rsquo;re running multiple applications per instance it might make sense to configure certain
 shared services on a per-server basis rather than per-application. OpsWorks is an excellent solution to these issues
 as it supports Chef and per-instance setup and configuration lifecycle events.</p>

<h1>Getting started</h1>

<p>To get started you&rsquo;ll need to set up an OpsWorks stack with a custom cookbook repository. The stack also must be created
 in a region where CodeDeploy is supported, such as North Virginia. If you&rsquo;re using a VPC don&rsquo;t forget to configure your
  VPC to <a href="http://docs.aws.amazon.com/opsworks/latest/userguide/workingstacks-vpc.html">allow external connectivity</a>.</p>

<p>My stack configuration is as follows, as you can see I&rsquo;ll be using Ubuntu 14.04, but the steps should be similar on
 Amazon linux.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/stack.png"></p>

<p>Also, create a layer for your application servers. For example I&rsquo;ve created a PHP App Server layer. Don&rsquo;t forget to
 enable &ldquo;Public IP addresses&rdquo; under the networking options.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/layer.png"></p>

<p>In this example I&rsquo;m also going to deploy from S3, rather than GitHub. Therefore I&rsquo;ll assume you have an S3 bucket created
to host the zip deployment packages.</p>

<h1>Creating a CodeDeploy Service Role</h1>

<p>You&rsquo;ll need to create a service role for CodeDeploy before proceeding, although if you&rsquo;ve already followed the &ldquo;Sample
Deployment&rdquo; wizard then you will probably have created one at the following step:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policywizard.png"></p>

<p>If you need to create one manually then you can <a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html">follow these steps</a>
 to first create a role with the following policy:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/policy.png"></p>

<p>Then set the trust relationships:</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/trust.png"></p>

<h1>Creating CodeDeploy application</h1>

<p>Next go to the CodeDeploy console and create a new application using the &ldquo;Custom Deployment&rdquo; option.</p>

<p>In the application options you have to define which EC2 instance tags will be included in the deployment. Set the <code>
opsworks:stack</code> and <code>opsworks:layer:php-app</code> to the name of your stack and layer respectively.</p>

<p><img src="http://hipsterdevblog.com/images/posts/opsworks_codedeploy/codedeploy_app.png"></p>

<p>Select a Deployment Config (eg. <code>CodeDeployDefault.OneAtATime</code>), and set the Service Role ARN to the service
 role you created earlier.</p>

<h2>Integrating OpsWorks and CodeDeploy</h2>

<ul>
<li><a href="http://hipsterdevblog.com/blog/2014/11/23/integrating-opsworks-and-codedeploy/">Part 1</a> &ndash; Introduction and getting started.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/24/part-2-integrating-opsworks-and-codedeploy/">Part 2</a> &ndash; OpsWorks configuration and recipes.</li>
<li><a href="http://hipsterdevblog.com/blog/2014/11/25/part-3-integrating-opsworks-and-codedeploy/">Part 3</a> &ndash; Deployment and results.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NY Taxi Data Visualized]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized/"/>
    <updated>2014-06-27T11:58:54+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/27/ny-taxi-data-visualized</id>
    <content type="html"><![CDATA[<p>Recently a massive dataset of <a href="http://chriswhong.com/open-data/foil_nyc_taxi/">NYC Taxi Data</a> was made public. There are torrents available but at 19gb the data can be quite unwieldy to manage on a home machine. /r/BigQuery have <a href="http://www.reddit.com/r/bigquery/comments/28ialf/173_million_2013_nyc_taxi_rides_shared_on_bigquery/">uploaded</a> the dataset to Google&rsquo;s BigQuery service.</p>

<p>BQ provides a simple way to get insights out of this dataset without tearing through your internet usage or waiting for your home machine to query 173 million records. For example on reddit they have already discovered some <a href="https://medium.com/@vijayp/of-taxis-and-rainbows-f6bc289679a1">anonymization issues</a>.</p>

<p>I&rsquo;ve taken some of the popular Queries and charted them.</p>

<!-- more -->


<h2>Histogram of tips as a % of fare.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart16f573026d1' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart16f573026d1()
    });
    function drawchart16f573026d1(){  
      var opts = {
 "dom": "chart16f573026d1",
"width":    800,
"height":    400,
"x": "tip_pct",
"y": "trips",
"type": "multiBarChart",
"id": "chart16f573026d1" 
},
        data = [
 {
 "tip_pct": "0%",
"trips": 3227816 
},
{
 "tip_pct": "1%",
"trips": 78606 
},
{
 "tip_pct": "2%",
"trips": 57945 
},
{
 "tip_pct": "3%",
"trips": 75351 
},
{
 "tip_pct": "4%",
"trips": 199571 
},
{
 "tip_pct": "5%",
"trips": 394763 
},
{
 "tip_pct": "6%",
"trips": 732748 
},
{
 "tip_pct": "7%",
"trips": 1001344 
},
{
 "tip_pct": "8%",
"trips": 1395657 
},
{
 "tip_pct": "9%",
"trips": 1516062 
},
{
 "tip_pct": "10%",
"trips": 2296492 
},
{
 "tip_pct": "11%",
"trips": 2813566 
},
{
 "tip_pct": "12%",
"trips": 2020426 
},
{
 "tip_pct": "13%",
"trips": 3641555 
},
{
 "tip_pct": "14%",
"trips": 2638662 
},
{
 "tip_pct": "15%",
"trips": 2659690 
},
{
 "tip_pct": "16%",
"trips": 1182530 
},
{
 "tip_pct": "17%",
"trips": 2604529 
},
{
 "tip_pct": "18%",
"trips": 2105279 
},
{
 "tip_pct": "19%",
"trips": 1140029 
},
{
 "tip_pct": "20%",
"trips": 14690183 
},
{
 "tip_pct": "21%",
"trips": 16606601 
},
{
 "tip_pct": "22%",
"trips": 9957665 
},
{
 "tip_pct": "23%",
"trips": 4688858 
},
{
 "tip_pct": "24%",
"trips": 2721643 
},
{
 "tip_pct": "25%",
"trips": 4876902 
},
{
 "tip_pct": "26%",
"trips": 3453940 
},
{
 "tip_pct": "27%",
"trips": 2587272 
},
{
 "tip_pct": "28%",
"trips": 1356344 
},
{
 "tip_pct": "29%",
"trips": 1217443 
},
{
 "tip_pct": "30%",
"trips": 1729572 
},
{
 "tip_pct": "31%",
"trips": 1186658 
},
{
 "tip_pct": "32%",
"trips": 1011215 
},
{
 "tip_pct": "33%",
"trips": 969247 
},
{
 "tip_pct": "34%",
"trips": 341499 
},
{
 "tip_pct": "35%",
"trips": 307730 
},
{
 "tip_pct": "36%",
"trips": 300208 
},
{
 "tip_pct": "37%",
"trips": 89795 
},
{
 "tip_pct": "38%",
"trips": 171289 
},
{
 "tip_pct": "39%",
"trips": 41494 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="n">ROUND</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span> <span class="o">/</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span> <span class="n">tip_pct</span><span class="p">,</span>
</span><span class='line'>  <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="n">trips</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span> <span class="k">and</span> <span class="nb">float</span><span class="p">(</span><span class="n">fare_amount</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">00</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">1</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Speed Over Hour.</h2>

<div>

<!doctype HTML>
<meta charset = 'utf-8'>
<html>
  <head>
    <link rel='stylesheet' href='http://nvd3.org/assets/css/nv.d3.css'>
    
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js' type='text/javascript'></script>
    <script src='http://d3js.org/d3.v3.min.js' type='text/javascript'></script>
    <script src='http://timelyportfolio.github.io/rCharts_nvd3_tests/libraries/widgets/nvd3/js/nv.d3.min-new.js' type='text/javascript'></script>
    <script src='http://nvd3.org/assets/lib/fisheye.js' type='text/javascript'></script>
    
    <style>
    .rChart {
      display: block;
      margin-left: auto; 
      margin-right: auto;
      width: 800px;
      height: 400px;
    }  
    </style>
    
  </head>
  <body >
    
    <div id = 'chart7708516d29c5' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart7708516d29c5()
    });
    function drawchart7708516d29c5(){  
      var opts = {
 "dom": "chart7708516d29c5",
"width":    800,
"height":    400,
"x": "hour",
"y": "speed",
"type": "lineChart",
"id": "chart7708516d29c5" 
},
        data = [
 {
 "hour": 0,
"speed":             16 
},
{
 "hour": 1,
"speed":             17 
},
{
 "hour": 2,
"speed":             17 
},
{
 "hour": 3,
"speed":             18 
},
{
 "hour": 4,
"speed":             20 
},
{
 "hour": 5,
"speed":             22 
},
{
 "hour": 6,
"speed":             18 
},
{
 "hour": 7,
"speed":             14 
},
{
 "hour": 8,
"speed":             12 
},
{
 "hour": 9,
"speed":             11 
},
{
 "hour": 10,
"speed":             12 
},
{
 "hour": 11,
"speed":             11 
},
{
 "hour": 12,
"speed":             11 
},
{
 "hour": 13,
"speed":             11 
},
{
 "hour": 14,
"speed":             11 
},
{
 "hour": 15,
"speed":             11 
},
{
 "hour": 16,
"speed":             12 
},
{
 "hour": 17,
"speed":             12 
},
{
 "hour": 18,
"speed":             12 
},
{
 "hour": 19,
"speed":             12 
},
{
 "hour": 20,
"speed":             14 
},
{
 "hour": 21,
"speed":             14 
},
{
 "hour": 22,
"speed":             15 
},
{
 "hour": 23,
"speed":             15 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>
</html>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="n">HOUR</span><span class="p">(</span><span class="k">TIMESTAMP</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">))</span> <span class="k">as</span> <span class="n">hour</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ROUND</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span><span class="o">/</span><span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="p">))</span> <span class="k">AS</span> <span class="n">speed</span>
</span><span class='line'><span class="k">FROM</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_data</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span>
</span><span class='line'>  <span class="nb">INTEGER</span><span class="p">(</span><span class="n">trip_time_in_secs</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span><span class='line'>  <span class="k">AND</span> <span class="nb">FLOAT</span><span class="p">(</span><span class="n">trip_distance</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">90</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span>
</span><span class='line'>  <span class="n">hour</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Average Tip Over Month.</h2>

<div>


  <body >
    
    <div id = 'chart77081e63288d' class = 'rChart nvd3'></div>    
    <script type='text/javascript'>
 $(document).ready(function(){
      drawchart77081e63288d()
    });
    function drawchart77081e63288d(){  
      var opts = {
 "dom": "chart77081e63288d",
"width":    800,
"height":    400,
"x": "month",
"y": "avg_tip",
"type": "lineChart",
"id": "chart77081e63288d" 
},
        data = [
 {
 "avg_tip":           2.41,
"month": 1 
},
{
 "avg_tip":            2.4,
"month": 2 
},
{
 "avg_tip":           2.46,
"month": 3 
},
{
 "avg_tip":            2.5,
"month": 4 
},
{
 "avg_tip":           2.55,
"month": 5 
},
{
 "avg_tip":           2.56,
"month": 6 
},
{
 "avg_tip":            2.5,
"month": 7 
},
{
 "avg_tip":           2.53,
"month": 8 
},
{
 "avg_tip":           2.58,
"month": 9 
},
{
 "avg_tip":           2.59,
"month": 10 
},
{
 "avg_tip":           2.55,
"month": 11 
},
{
 "avg_tip":           2.63,
"month": 12 
} 
]
  
      if(!(opts.type==="pieChart" || opts.type==="sparklinePlus" || opts.type==="bulletChart")) {
        var data = d3.nest()
          .key(function(d){
            //return opts.group === undefined ? 'main' : d[opts.group]
            //instead of main would think a better default is opts.x
            return opts.group === undefined ? opts.y : d[opts.group];
          })
          .entries(data);
      }
      
      if (opts.disabled != undefined){
        data.map(function(d, i){
          d.disabled = opts.disabled[i]
        })
      }
      
      nv.addGraph(function() {
        var chart = nv.models[opts.type]()
          .width(opts.width)
          .height(opts.height)
          
        if (opts.type != "bulletChart"){
          chart
            .x(function(d) { return d[opts.x] })
            .y(function(d) { return d[opts.y] })
        }
          
         
        
          
        
 
        
        
        
      
       d3.select("#" + opts.id)
        .append('svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
 
       nv.utils.windowResize(chart.update);
       return chart;
      });
    };
</script>
    
    <script></script>    
  </body>


</div>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="nb">INTEGER</span><span class="p">(</span><span class="k">AVG</span><span class="p">(</span><span class="n">tip_amount</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="o">/</span><span class="mi">100</span> <span class="n">avg_tip</span><span class="p">,</span>
</span><span class='line'>  <span class="n">REGEXP_EXTRACT</span><span class="p">(</span><span class="n">pickup_datetime</span><span class="p">,</span> <span class="ss">&quot;2013-([0-9]*)&quot;</span><span class="p">)</span> <span class="k">month</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">[</span><span class="mi">833682135931</span><span class="p">:</span><span class="n">nyctaxi</span><span class="p">.</span><span class="n">trip_fare</span><span class="p">]</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">payment_type</span><span class="o">=</span><span class="s1">&#39;CRD&#39;</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="mi">2</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF's in Ruby]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby/"/>
    <updated>2014-06-25T21:18:36+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/25/pdfs-in-ruby</id>
    <content type="html"><![CDATA[<p>Avoid using PDF&rsquo;s in your application. There are no great solutions to PDF generation in general, and Ruby does not have any perfect options. If you really need PDF&rsquo;s, this is the landscape of options, and my suggestion.</p>

<!-- more -->


<h2>HTML to PDF</h2>

<p>PDF generation in Ruby, and in general, comes down to libraries that turn HTML + CSS into PDF&rsquo;s, and libraries that abstract the PDF standard into programmatic creation of documents.</p>

<p>The gold standard of HTML to PDF is <a href="http://www.princexml.com/">PrinceXML</a>. By all accounts this is a great product, used by big corporates and universities. However if the XML in the title didn&rsquo;t give it away, this is very much an &lsquo;enterprise&rsquo; product, starting at $3800 for a single license!</p>

<p>The open source alternative is <a href="http://wkhtmltopdf.org/">wkhtmltopdf</a>. Two gems that leverage this library are <a href="https://github.com/pdfkit/pdfkit">PDFKit</a> and <a href="https://github.com/mileszs/wicked_pdf">Wicked PDF</a>.</p>

<p>At first these libraries seem great, code in what you know, leverage existing controllers and even views. Ultimately though its a fairly bad abstraction, and PDF rendering can be slow and unreliable. This is not a problem unique to Ruby and I suspect it&rsquo;s why PrinceXML can still get away with their pricing.</p>

<p>The Ruby alternative is <a href="http://prawnpdf.org/api-docs/">Prawn</a>, a gem with a DSL for building documents.</p>

<h2>Go the raw Prawn</h2>

<p>Prawn does have a learning curve, but it performs well, doesn&rsquo;t rely on external binaries and gives full access to layout and paging. The prawn DSL is described fairly well in the <a href="http://prawnpdf.org/manual.pdf">manual</a> (generated of course in Prawn). Be careful using code examples on Github and older blog posts, Prawn has had some major API changes over time and a lot of old code examples floating around wont work.</p>

<p>For example Prawn has template functionality, that lets you use an existing PDF as a template. However when template PDF&rsquo;s are too large this feature crashes silently rendering a blank PDF.</p>

<p>If you stick to the methods used in the manual and learn the DSL Prawn is a flexible and reliable solution. The Prawn way of building documents makes a lot of sense and the simplicity of having no external requirements makes integrating into all kinds of Ruby projects easy.</p>

<h2>General PDF Weirdness</h2>

<p>Some things to watch out for</p>

<ul>
<li>Merging PDF&rsquo;s &ndash; there are absolutely no Ruby gems capable of doing this reliably, shelling out to something like <a href="http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/">PDFtk</a> does work but is far from ideal.</li>
<li>Google Chrome PDF Viewer Issue &ndash; This is a really odd issue that I eventually found in a google support ticket. The PDF viewer in chrome cant copy any text containing a line ending in &lsquo;&ndash;&rsquo; (and possibly some other characters). This issue doesn&rsquo;t exist in any other PDF viewer and is unlikely to effect most applications, but its a good example of the fun world of PDF&rsquo;s!</li>
<li>Editing existing PDF&rsquo;s &ndash; don&rsquo;t even try, as mentioned previously Prawn claims to do this but it doesn&rsquo;t work very well</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic DNS Records Using Route53 on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53/"/>
    <updated>2014-06-23T18:28:23+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/23/automatic-dns-records-using-route53</id>
    <content type="html"><![CDATA[<p>
    Lets say you have a load balanced web application managed with OpsWorks – your application traffic will be addressed
    to the load balancer, but sometimes it&#8217;s still handy to address your application nodes directly for testing
    purposes or perhaps so each node has a unique SNS endpoint for HTTP notifications. You could just  use their IP,
    but unless you use an EIP that IP address may change. You could create a DNS record, which would be easier to remember
    and allows the IP to change – but managing this manually would be a pain.
</p>




<p>
    Fortunately this process of managing DNS records can be automated using Chef, Route53 and the EC2 instance
    metadata functionality to obtain the public IP. Each instance will automatically create an A record for
    <code>[instance name].example.com</code> on setup using their OpsWorks instance name.
</p>




<!-- more -->




<h2>Getting started</h2>


<p>
    Firstly, I&#8217;ll assume you have a Route53 zone created – in my case the zone will be called <code>example.com</code>.
    You&#8217;ll also need a set of AWS access keys, I recommend creating an IAM user restricted to managing your hosted zone.
    You can use the following IAM user policy:
</p>


<figure class='code'><figcaption><span>IAM User Policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403515694000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;route53:ChangeResourceRecordSets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:GetHostedZone&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;route53:ListResourceRecordSets&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:route53:::hostedzone/&lt;insert your hosted zone ID&gt;&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Next add your AWS credentials and zone ID as custom JSON variables in your OpsWorks stack:
</p>


<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;dns_zone_id&quot;</span>      <span class="p">:</span> <span class="s2">&quot;&lt;insert hosted zone ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
 Adding custom JSON to your stack is covered in more detail in
 <a target="_blank" href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/">Retrieving Files From S3 Using Chef on OpsWorks</a>.
</p>


<p>
    Finally, add the <a target="_blank" href="http://community.opscode.com/cookbooks/route53">route53 cookbook</a>
    to your Berksfile. If you&#8217;re not using Berkshelf you&#8217;ll have to clone the whole cookbook into your custom cookbook
    repository.
</p>




<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://api.berkshelf.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;route53&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 0.3.4&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating your recipes</h2>


<p>
    Next, we need to create a custom cookbook and recipes – in this example the cookbook is called <code>dnsupdate</code>.
     Create the following file structure and files in your custom cookbook repository:
</p>




<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dnsupdate/metadata.rb
</span><span class='line'>dnsupdate/recipes/add.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;dnsupdate&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Update Route53 Zone&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;route53&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>recipes/add.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;route53&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">route53_record</span> <span class="s2">&quot;create a record&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">name</span>  <span class="n">node</span><span class="o">[</span><span class="ss">:opsworks</span><span class="o">][</span><span class="ss">:instance</span><span class="o">][</span><span class="ss">:hostname</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;.example.com&#39;</span>
</span><span class='line'>  <span class="n">value</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;http://169.254.169.254/latest/meta-data/public-ipv4&#39;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">type</span>  <span class="s2">&quot;A&quot;</span>
</span><span class='line'>  <span class="n">ttl</span>   <span class="mi">60</span>
</span><span class='line'>  <span class="n">zone_id</span>               <span class="n">node</span><span class="o">[</span><span class="ss">:dns_zone_id</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span>     <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">overwrite</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Substitute <code>.example.com</code> with your own domain. <code>Net::HTTP.get(URI.parse('http://169.254.169.254/latest/meta-data/public-ipv4'))</code>
    is using the <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">instance data API</a> to obtain the public IP
      – use the IP above any instance.
</p>




<h2>Adding recipe to life cycle event</h2>


<p>
    Once you&#8217;ve committed and pushed the new recipe to your custom cookbook repository you&#8217;re ready to add the recipe
    to the configure life cycle event. First update your custom cookbooks, by going to your stack > Run Command > and
    selecting &#8216;Update Custom Cookbooks&#8217; from the command select box.
</p>


<p>
    Finally, navigate to a layer in OpsWorks > Edit > Recipes > add &#8216;dnsupdate::add&#8217; to the configure
    event and save.
</p>


<p><img src="http://hipsterdevblog.com/images/posts/route53_dns/add_recipe.png"></p>

<p>
    Now when the run the configure event you should see a new DNS A record being added in Route53!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy Processing Images Using S3 and Redirection Rules]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules/"/>
    <updated>2014-06-22T19:14:44+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/lazy-processing-images-using-s3-and-redirection-rules</id>
    <content type="html"><![CDATA[<p>
    In a system dealing with user generated images it&#8217;s common to have to resize images before they can be served to the web.
    Storing and serving large quantities of user generated images can also be a challenge – that is unless you&#8217;re using
    AWS S3. A typical implementation using S3 to store and serve images requires images to be resized into every required
    size and saved to S3 upon being uploaded. An unfortunate limitation of this technique is that you must know all
     required sizes at the time the image is uploaded – something that may not be constant, consistent or known in some
     (particularly legacy) applications.
</p>


<p>
     One solution is to automatically resize images the first time they&#8217;re requested
     using dimensions provided in the image URL, this way the application requesting the image can choose an appropriate
     size. While S3 doesn&#8217;t provide functionality to transparently proxy image misses to your image processor, it is
     possible to use S3 <a target="_blank" href="http://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html">S3
     routing rules</a> to achieve a similar function.
</p>


<!-- more -->


<h2>Overview</h2>


<p>
    Using routing rules it&#8217;s possible to return a 302 redirect whenever a 404 error occurs, this 302 redirect can then
    take the user to your EC2 instance which resizes the image, serves it to them then saves the resized copy back to
     the original bucket so future visitors won&#8217;t be redirected.
</p>


<p><img class="left" src="http://hipsterdevblog.com/images/posts/s3_lazy_process/s3_route.png"></p>

<h2>Implementation</h2>


<p>
    First, it&#8217;s assumed that you have a bucket setup to serve its content publicly on one domain and your processing
    server on another. Both domains must use the same URL structure for images aside from the host name, so for example
     <code>images.domain.com/widgets/myimage_600_400.jpg</code> and <code>process.domain.com/widgets/myimage_600_400.jpg</code>
     should both work (assuming <code>images.mydomain.com</code> is the bucket and <code>process.mydomain.com</code> is the processor).
</p>


<p>
    When receiving a request <code>process.mydomain.com</code> should resize the image (most likely after obtaining the
    image from another private bucket for originals), serve that image to the visitor then save it back to
    the <code>images.mydomain.com</code> bucket.
</p>


<p>
    Next – go to the bucket in the S3 console, go to the bucket properties and enter the following routing rules
    in the &#8216;Enable website hosting&#8217; accordion menu:
</p>


<figure class='code'><figcaption><span>Routing rules </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;RoutingRules&gt;</span>
</span><span class='line'>    <span class="nt">&lt;RoutingRule&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Condition&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpErrorCodeReturnedEquals&gt;</span>404<span class="nt">&lt;/HttpErrorCodeReturnedEquals&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Condition&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Redirect&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HostName&gt;</span>process.domain.com<span class="nt">&lt;/HostName&gt;</span>
</span><span class='line'>            <span class="nt">&lt;HttpRedirectCode&gt;</span>302<span class="nt">&lt;/HttpRedirectCode&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Redirect&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/RoutingRule&gt;</span>
</span><span class='line'><span class="nt">&lt;/RoutingRules&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://hipsterdevblog.com/images/posts/s3_lazy_process/bucket_config.png"></p>

<p>
    You now have lazy image processing!
</p>


<h2>Enter CloudFront</h2>


<p>
    S3 is a reasonably effective CDN (in the sense that it offloads serving images), but it&#8217;s not geographically
    distributed and if you&#8217;re serving images to visitors across the globe you may wish to also implement CloudFront.
    Unfortunately you can&#8217;t simply setup CloudFront to use the <code>images.mydomain.com</code> bucket as an origin because
     CloudFront will cache the 302 redirects for a minimum of 60 minutes – meaning your image processor might process the same image many times.
</p>


<p>
    One solution is to put a second CloudFront distribution in front of <code>process.domain.com</code> and set the S3
    redirect to use that CloudFront endpoint rather than the processor directly. In this scenario the first region to receive
     a request will pass through the first CloudFront distribution, the S3 bucket, the second CloudFront distribution
     and then hit the processor. The second request from that same region should then hit the second CloudFront distribution
     as will every other request from this region until the 302 redirect expires.
     Users making requests from other regions after the first request won&#8217;t have the 302 redirect in the cache for their region
     so they should hit the file in the S3 bucket which will then get cached in their region.
</p>


<h2>Caveats</h2>


<p>
    While this approach is certainly effective in some scenarios it&#8217;s not exactly <em>elegant</em>.
    Be sure to first consider whether CloudFront alone or
    resizing images in advance would work better in your situation. It&#8217;s also worth keeping in mind that all genuine
    404 requests (that is for images which don&#8217;t exist at all) will get passed to your server and won&#8217;t be offloaded to S3.
</p>


<p>
    Be careful when lazy processing images in general – if you don&#8217;t implement some form of rate limiting you may
      end up being vulnerable to a Denial of Service attack if someone were to try and request thousands of images in
      different sizes.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Retrieving Files From S3 Using Chef on OpsWorks]]></title>
    <link href="http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks/"/>
    <updated>2014-06-22T17:44:02+10:00</updated>
    <id>http://hipsterdevblog.com/blog/2014/06/22/retrieving-files-from-s3-using-chef-on-opsworks</id>
    <content type="html"><![CDATA[<p>
    Say you wanted to manage some configuration file in your OpsWorks stack – typically you&#8217;d create a custom Chef recipe,
    make your configuration file a template and store it within your custom cookbook repository. This approach works well
    in most instances, but what if the file is something not suited to version control such as a large binary file or
    perhaps a programmatically generated artifact of your system?
</p>


<p>
    In these cases you may prefer to store the file in an S3 bucket and automatically download a copy of the file
    as part of a custom recipe. In my case I wanted to have a dynamically generated (by a separate system)
    vhost configuration file which could be deployed to a stack using a simple recipe.
</p>


<!-- more -->


<h2>Adding AWS cookbook via Berkshelf</h2>




<p>
    The first thing you&#8217;ll need to do is add the OpsCode <a target="_blank" href="http://community.opscode.com/cookbooks/aws">AWS
    cookbook</a> to your Berkfile. Note that Berkshelf is only supported on Chef 11.10 or higher on OpsWorks, so if your
    OpsWorks stack has an older version selected you&#8217;ll have to either upgrade or include the whole AWS cookbook in your
    custom cookbook repository.
</p>


<p>
    If you don&#8217;t already have a Berkfile you&#8217;ll need to create one in your custom cookbook repository, otherwise simply
    add the AWS cookbook. Your Berkfile should look something like this:
</p>


<figure class='code'><figcaption><span>Berksfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://api.berkshelf.com&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s2">&quot;aws&quot;</span><span class="p">,</span> <span class="s2">&quot;&gt;= 2.2.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating an S3 bucket and a user which can access it</h2>


<p>
    You can probably figure out how to create a bucket on your own. In my case I have a bucket called &#8216;test-site-config&#8217;
    and a file in there called &#8216;vhost.map&#8217; which I want to download via Chef.
</p>


<p> <img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/bucket.png"></p>

<p>
    Next you&#8217;ll need some AWS credentials for Chef to use while downloading the file. You can use your root account
    but I&#8217;d strongly suggest using an IAM user limited to your bucket instead. If you create a new IAM user you can
    use the following policy which will only permit reading objects from the specified S3 bucket (obviously replace
    &#8216;test-site-config&#8217; with your own bucket name:
</p>


<figure class='code'><figcaption><span>IAM policy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;Version&quot;</span><span class="p">:</span> <span class="s2">&quot;2012-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;Statement&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;Sid&quot;</span><span class="p">:</span> <span class="s2">&quot;Stmt1403407152000&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Effect&quot;</span><span class="p">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;Action&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;s3:GetObject&quot;</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="nt">&quot;Resource&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;arn:aws:s3:::test-site-config/*&quot;</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Passing AWS credentials via custom JSON</h2>


<p>
    Now navigate to your stack in the OpsWorks console, click &#8216;Stack Settings&#8217; then &#8216;Edit&#8217; and modify the Custom JSON
    field to include variables for your access and secret key. If you already have custom JSON values then you&#8217;ll
    need to merge the new values with your existing JSON, otherwise you can use the code below:
</p>


<figure class='code'><figcaption><span>Custom JSON </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;custom_access_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert access key&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;custom_secret_key&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;insert secret key&gt;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/edit_stack.png"></p>

<h2>Creating your custom recipe</h2>


<p>
    In this instance I&#8217;ll create a new recipe called &#8216;deployfile&#8217; which does nothing but download my file and save it to the specified
    location, however you could just as easily include this code within an existing recipe.
</p>


<p>
    Create the following file structure and use the code below in your custom cookbook repository:
</p>


<figure class='code'><figcaption><span>File Structure </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deployfile/metadata.rb
</span><span class='line'>deployfile/recipes/default.rb</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>metadata.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">name</span>        <span class="s2">&quot;deployfile&quot;</span>
</span><span class='line'><span class="n">description</span> <span class="s2">&quot;Deploy File From S3&quot;</span>
</span><span class='line'><span class="n">maintainer</span>  <span class="s2">&quot;Dilbert&quot;</span>
</span><span class='line'><span class="n">license</span>     <span class="s2">&quot;Apache 2.0&quot;</span>
</span><span class='line'><span class="n">version</span>     <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;aws&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>recipes/default.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;aws&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">aws_s3_file</span> <span class="s2">&quot;/etc/apache2/vhost.map&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">bucket</span> <span class="s2">&quot;test-site-config&quot;</span>
</span><span class='line'>  <span class="n">remote_path</span> <span class="s2">&quot;vhost.map&quot;</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_access_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:custom_secret_key</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
    Substitute <code>/etc/apache2/vhost.map</code> with the destination on your nodes, the bucket name and the remote
    path as required. You can also use other attributes belonging to the <a target="_blank" href="http://docs.opscode.com/resource_file.html">Chef
    file resource</a>.
</p>




<h2>Updating stack and executing recipe</h2>


<p>Once the code above has been committed and pushed back to your repository you&#8217;re finally ready to execute the recipe.</p>




<p>Go to your stack and click &#8216;Run Command&#8217;, select &#8216;Update Custom Cookbooks&#8217;:</p>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/update_cookbook.png"></p>

<p>Once OpsWorks has finished updating your custom cookbooks go back to &#8216;Run Command&#8217; and select &#8216;Execute Recipes&#8217;.
Enter the name of your recipe into the &#8216;Recipes to execute&#8217; field:</p>


<p><img src="http://hipsterdevblog.com/images/posts/s3_chef_opsworks/deploy_file.png"></p>

<p>Alternatively you can add your recipe to a layer life-cycle event (such as setup) and execute that life-cycle event
instead</p>


<p>Once that recipe has finished executing the file downloaded from S3 should now be present on your system!</p>

]]></content>
  </entry>
  
</feed>
